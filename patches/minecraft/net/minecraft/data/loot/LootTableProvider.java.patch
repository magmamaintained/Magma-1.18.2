--- a/net/minecraft/data/loot/LootTableProvider.java
+++ b/net/minecraft/data/loot/LootTableProvider.java
@@ -40,7 +_,7 @@
    public void run(HashCache p_124444_) {
       Path path = this.generator.getOutputFolder();
       Map<ResourceLocation, LootTable> map = Maps.newHashMap();
-      this.subProviders.forEach((p_124458_) -> {
+      this.getTables().forEach((p_124458_) -> {
          p_124458_.getFirst().get().accept((p_176077_, p_176078_) -> {
             if (map.put(p_176077_, p_176078_.setParamSet(p_124458_.getSecond()).build()) != null) {
                throw new IllegalStateException("Duplicate loot table " + p_176077_);
@@ -51,13 +_,8 @@
          return null;
       }, map::get);
 
-      for(ResourceLocation resourcelocation : Sets.difference(BuiltInLootTables.all(), map.keySet())) {
-         validationcontext.reportProblem("Missing built-in table: " + resourcelocation);
-      }
+      validate(map, validationcontext);
 
-      map.forEach((p_124441_, p_124442_) -> {
-         LootTables.validate(validationcontext, p_124441_, p_124442_);
-      });
       Multimap<String, String> multimap = validationcontext.getProblems();
       if (!multimap.isEmpty()) {
          multimap.forEach((p_124446_, p_124447_) -> {
@@ -76,6 +_,20 @@
 
          });
       }
+   }
+
+   protected List<Pair<Supplier<Consumer<BiConsumer<ResourceLocation, LootTable.Builder>>>, LootContextParamSet>> getTables() {
+      return subProviders;
+   }
+
+   protected void validate(Map<ResourceLocation, LootTable> map, ValidationContext validationtracker) {
+      for(ResourceLocation resourcelocation : Sets.difference(BuiltInLootTables.all(), map.keySet())) {
+         validationtracker.reportProblem("Missing built-in table: " + resourcelocation);
+      }
+
+      map.forEach((p_218436_2_, p_218436_3_) -> {
+         LootTables.validate(validationtracker, p_218436_2_, p_218436_3_);
+      });
    }
 
    private static Path createPath(Path p_124454_, ResourceLocation p_124455_) {
