--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -59,6 +_,46 @@
    private ContainerSynchronizer synchronizer;
    private boolean suppressRemoteUpdates;
 
+   // CraftBukkit star
+   //Magma - change this from org.bukkit.craftbukkit.v1_18_R2.inventory.CraftInventoryView to InventoryView
+   private org.bukkit.inventory.InventoryView bukkitView = null;
+   public boolean checkReachable = true;
+
+   //Magma - this should not be abstract
+   public org.bukkit.inventory.InventoryView getBukkitView(){
+       if (bukkitView == null) {
+           bukkitView = org.magmafoundation.magma.helpers.InventoryViewHelper.createInvView((AbstractContainerMenu) (Object) this);
+       }
+       return bukkitView;
+   }
+
+   //Magma - catch npe if source or destination is null
+   public void transferTo(AbstractContainerMenu other, org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity player) {
+      org.bukkit.inventory.InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+      try {
+         if (source != null) {
+            ((org.bukkit.craftbukkit.v1_18_R2.inventory.CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+            ((org.bukkit.craftbukkit.v1_18_R2.inventory.CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+         }
+         if (destination != null) {
+            ((org.bukkit.craftbukkit.v1_18_R2.inventory.CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+            ((org.bukkit.craftbukkit.v1_18_R2.inventory.CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+         }
+      } catch (AbstractMethodError ignored) {}
+   }
+
+   private net.minecraft.network.chat.Component title;
+
+   public net.minecraft.network.chat.Component getTitle() { // Remove final
+      return this.title == null ? net.minecraft.network.chat.TextComponent.EMPTY : this.title; //Magma - allow null titles
+   }
+
+   public final void setTitle(net.minecraft.network.chat.Component title) {
+      com.google.common.base.Preconditions.checkState(this.title == null, "Title already set");
+      this.title = title;
+   }
+   // CraftBukkit end
+
    protected AbstractContainerMenu(@Nullable MenuType<?> p_38851_, int p_38852_) {
       this.menuType = p_38851_;
       this.containerId = p_38852_;
@@ -211,9 +_,11 @@
    private void triggerSlotListeners(int p_150408_, ItemStack p_150409_, Supplier<ItemStack> p_150410_) {
       ItemStack itemstack = this.lastSlots.get(p_150408_);
       if (!ItemStack.matches(itemstack, p_150409_)) {
+         boolean clientStackChanged = !p_150409_.equals(itemstack, true);
          ItemStack itemstack1 = p_150410_.get();
          this.lastSlots.set(p_150408_, itemstack1);
 
+         if(clientStackChanged)
          for(ContainerListener containerlistener : this.containerListeners) {
             containerlistener.slotChanged(this, p_150408_, itemstack1);
          }
@@ -285,7 +_,7 @@
    }
 
    public ItemStack quickMoveStack(Player p_38941_, int p_38942_) {
-      return this.slots.get(p_38942_).getItem();
+      return ItemStack.EMPTY; // CraftBukkit - previous implementation was useless and broken
    }
 
    public void clicked(int p_150400_, int p_150401_, ClickType p_150402_, Player p_150403_) {
@@ -333,7 +_,7 @@
             }
          } else if (this.quickcraftStatus == 2) {
             if (!this.quickcraftSlots.isEmpty()) {
-               if (this.quickcraftSlots.size() == 1) {
+               if (false && this.quickcraftSlots.size() == 1) { // CraftBukkit - treat everything as a drag since we are unable to easily call InventoryClickEvent instead
                   int l = (this.quickcraftSlots.iterator().next()).index;
                   this.resetQuickCraft();
                   this.doClick(l, this.quickcraftType, ClickType.PICKUP, p_150434_);
@@ -342,6 +_,7 @@
 
                ItemStack itemstack3 = this.getCarried().copy();
                int j1 = this.getCarried().getCount();
+               java.util.Map<Integer, ItemStack> draggedSlots = new java.util.HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
 
                for(Slot slot1 : this.quickcraftSlots) {
                   ItemStack itemstack1 = this.getCarried();
@@ -355,12 +_,46 @@
                      }
 
                      j1 -= itemstack2.getCount() - j;
-                     slot1.set(itemstack2);
-                  }
-               }
-
-               itemstack3.setCount(j1);
-               this.setCarried(itemstack3);
+                     // slot1.set(itemstack2);
+                     draggedSlots.put(slot1.index, itemstack2); // CraftBukkit - Put in map instead of setting
+                  }
+               }
+
+               // CraftBukkit start - InventoryDragEvent
+               org.bukkit.inventory.InventoryView view = getBukkitView();
+               org.bukkit.inventory.ItemStack newcursor = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(itemstack3);
+               newcursor.setAmount(j1);
+               java.util.Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new java.util.HashMap<Integer, org.bukkit.inventory.ItemStack>();
+               for (java.util.Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
+                  eventmap.put(ditem.getKey(), org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asBukkitCopy(ditem.getValue()));
+               }
+
+               // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+               ItemStack oldCursor = this.getCarried();
+               this.setCarried(org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asNMSCopy(newcursor));
+
+               org.bukkit.event.inventory.InventoryDragEvent event = new org.bukkit.event.inventory.InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asBukkitCopy(oldCursor), this.quickcraftType == 1, eventmap);
+               p_150434_.level.getCraftServer().getPluginManager().callEvent(event);
+               // Whether or not a change was made to the inventory that requires an update.
+               boolean needsUpdate = event.getResult() != org.bukkit.event.Event.Result.DEFAULT;
+
+               if (event.getResult() != org.bukkit.event.Event.Result.DENY) {
+                  for (java.util.Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
+                     view.setItem(dslot.getKey(), org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asBukkitCopy(dslot.getValue()));
+                  }
+                  // The only time the carried item will be set to null is if the inventory is closed by the server.
+                  // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                  if (this.getCarried() != null) {
+                     this.setCarried(org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asNMSCopy(event.getCursor()));
+                     needsUpdate = true;
+                  }
+               } else {
+                  this.setCarried(oldCursor);
+               }
+               if (needsUpdate && p_150434_ instanceof ServerPlayer) {
+                  this.sendAllDataToRemote();
+               }
+               // CraftBukkit end
             }
 
             this.resetQuickCraft();
@@ -374,8 +_,11 @@
          if (p_150431_ == -999) {
             if (!this.getCarried().isEmpty()) {
                if (clickaction == ClickAction.PRIMARY) {
-                  p_150434_.drop(this.getCarried(), true);
+                  // CraftBukkit start
+                  ItemStack carried = this.getCarried();
                   this.setCarried(ItemStack.EMPTY);
+                  p_150434_.drop(carried, true);
+                  // CraftBukkit start
                } else {
                   p_150434_.drop(this.getCarried().split(1), true);
                }
@@ -434,6 +_,20 @@
             }
 
             slot7.setChanged();
+            // CraftBukkit start - Make sure the client has the right slot contents
+            if (p_150434_ instanceof ServerPlayer && slot7.getMaxStackSize() != 64) {
+               ((ServerPlayer) p_150434_).connection.send(new net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket(this.containerId, this.incrementStateId(), slot7.index, slot7.getItem()));
+               // Updating a crafting inventory makes the client reset the result slot, have to send it again
+               try {
+                  if (this.getBukkitView().getType() == org.bukkit.event.inventory.InventoryType.WORKBENCH || this.getBukkitView().getType() == org.bukkit.event.inventory.InventoryType.CRAFTING) {
+                     ((ServerPlayer) p_150434_).connection.send(new net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket(this.containerId, this.incrementStateId(), 0, this.getSlot(0).getItem()));
+                  }
+               } catch ( AbstractMethodError error ){
+                  LOGGER.error(error.getMessage());
+                  ((ServerPlayer) p_150434_).connection.send(new net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket(this.containerId, this.incrementStateId(), 0, this.getSlot(0).getItem()));
+               }
+            }
+            // CraftBukkit end
          }
       } else if (p_150433_ == ClickType.SWAP) {
          Slot slot2 = this.slots.get(p_150431_);
@@ -529,13 +_,14 @@
       if (p_38940_ instanceof ServerPlayer) {
          ItemStack itemstack = this.getCarried();
          if (!itemstack.isEmpty()) {
+            this.setCarried(ItemStack.EMPTY); // CraftBukkit - SPIGOT-4556 - from below
             if (p_38940_.isAlive() && !((ServerPlayer)p_38940_).hasDisconnected()) {
                p_38940_.getInventory().placeItemBackInInventory(itemstack);
             } else {
                p_38940_.drop(itemstack, false);
             }
 
-            this.setCarried(ItemStack.EMPTY);
+            //this.setCarried(ItemStack.EMPTY); // CraftBukkit - moved up
          }
       }
 
@@ -603,14 +_,15 @@
             ItemStack itemstack = slot.getItem();
             if (!itemstack.isEmpty() && ItemStack.isSameItemSameTags(p_38904_, itemstack)) {
                int j = itemstack.getCount() + p_38904_.getCount();
-               if (j <= p_38904_.getMaxStackSize()) {
+               int maxSize = Math.min(slot.getMaxStackSize(), p_38904_.getMaxStackSize());
+               if (j <= maxSize) {
                   p_38904_.setCount(0);
                   itemstack.setCount(j);
                   slot.setChanged();
                   flag = true;
-               } else if (itemstack.getCount() < p_38904_.getMaxStackSize()) {
-                  p_38904_.shrink(p_38904_.getMaxStackSize() - itemstack.getCount());
-                  itemstack.setCount(p_38904_.getMaxStackSize());
+               } else if (itemstack.getCount() < maxSize) {
+                  p_38904_.shrink(maxSize - itemstack.getCount());
+                  itemstack.setCount(maxSize);
                   slot.setChanged();
                   flag = true;
                }
@@ -710,7 +_,7 @@
          p_38925_.setCount(1);
          break;
       case 2:
-         p_38925_.setCount(p_38925_.getItem().getMaxStackSize());
+         p_38925_.setCount(p_38925_.getMaxStackSize());
       }
 
       p_38925_.grow(p_38926_);
@@ -749,6 +_,11 @@
    }
 
    public ItemStack getCarried() {
+      // CraftBukkit start
+      if (this.carried.isEmpty()) {
+         this.setCarried(ItemStack.EMPTY);
+      }
+      // CraftBukkit end
       return this.carried;
    }
 
@@ -798,4 +_,13 @@
       this.stateId = this.stateId + 1 & 32767;
       return this.stateId;
    }
+
+   // CraftBukkit start
+   public void broadcastCarriedItem() {
+      this.remoteCarried = this.getCarried().copy();
+      if (this.synchronizer != null) {
+         this.synchronizer.sendCarriedChange(this, this.remoteCarried);
+      }
+   }
+   // CraftBukkit end
 }
