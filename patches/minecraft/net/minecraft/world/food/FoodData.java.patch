--- a/net/minecraft/world/food/FoodData.java
+++ b/net/minecraft/world/food/FoodData.java
@@ -15,19 +_,60 @@
    private int tickTimer;
    private int lastFoodLevel = 20;
 
+   // CraftBukkit start
+   private @org.jetbrains.annotations.Nullable Player entityhuman; //Magma - add @Nullable
+   public boolean saturatedRegenRateModified = false; //Magma - mixin inject
+   public boolean unsaturatedRegenRateModified = false; //Magma - mixin inject
+   public boolean starvationRateModified = false; //Magma - mixin inject
+   public int saturatedRegenRate = 10;
+   public int unsaturatedRegenRate = 80;
+   public int starvationRate = 80;
+   // CraftBukkit end
+
    public FoodData() {
-      this.saturationLevel = 5.0F;
-   }
+      this(null); //Magma - instead of throwing an error we just set it to null
+   }
+
+   // CraftBukkit start - added Player constructor
+   public FoodData(Player player) {
+       this.entityhuman = player;
+       this.saturationLevel = 5.0F;
+   }
+   // CraftBukkit end
 
    public void eat(int p_38708_, float p_38709_) {
       this.foodLevel = Math.min(p_38708_ + this.foodLevel, 20);
       this.saturationLevel = Math.min(this.saturationLevel + (float)p_38708_ * p_38709_ * 2.0F, (float)this.foodLevel);
    }
 
+   // Use the LivingEntity sensitive version in favour of this.
+   @Deprecated
    public void eat(Item p_38713_, ItemStack p_38714_) {
+      this.eat(p_38713_, p_38714_, null);
+   }
+
+   public void eat(Item p_38713_, ItemStack p_38714_, @javax.annotation.Nullable net.minecraft.world.entity.LivingEntity entity) {
       if (p_38713_.isEdible()) {
-         FoodProperties foodproperties = p_38713_.getFoodProperties();
-         this.eat(foodproperties.getNutrition(), foodproperties.getSaturationModifier());
+         FoodProperties foodproperties = p_38714_.getFoodProperties(entity);
+
+         //Magma start - null check
+         if (entityhuman == null) {
+            this.eat(foodproperties.getNutrition(), foodproperties.getSaturationModifier());
+            return;
+         }
+         //Magma end
+
+         // CraftBukkit start
+         int oldFoodLevel = foodLevel;
+         org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, foodproperties.getNutrition() + oldFoodLevel, p_38714_);
+
+         if (!event.isCancelled()) {
+            this.eat(event.getFoodLevel() - oldFoodLevel, foodproperties.getSaturationModifier());
+         }
+
+         ((net.minecraft.server.level.ServerPlayer) entityhuman).getBukkitEntity().sendHealthUpdate();
+         // CraftBukkit end
+
       }
 
    }
@@ -41,28 +_,48 @@
             this.saturationLevel = Math.max(this.saturationLevel - 1.0F, 0.0F);
          } else if (difficulty != Difficulty.PEACEFUL) {
             this.foodLevel = Math.max(this.foodLevel - 1, 0);
+
+            //Magma start - null check
+            if (entityhuman != null) {
+
+               // CraftBukkit start
+               org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, Math.max(this.foodLevel - 1, 0));
+
+               if (!event.isCancelled()) {
+                  this.foodLevel = event.getFoodLevel();
+               }
+
+               ((net.minecraft.server.level.ServerPlayer) entityhuman).connection.send(new net.minecraft.network.protocol.game.ClientboundSetHealthPacket(((net.minecraft.server.level.ServerPlayer) entityhuman).getBukkitEntity().getScaledHealth(), this.foodLevel, this.saturationLevel));
+               // CraftBukkit end
+            }
+            //Magma end
+
          }
       }
 
       boolean flag = p_38711_.level.getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION);
       if (flag && this.saturationLevel > 0.0F && p_38711_.isHurt() && this.foodLevel >= 20) {
          ++this.tickTimer;
-         if (this.tickTimer >= 10) {
+         if (this.tickTimer >= (saturatedRegenRateModified ? saturatedRegenRate : 10)) { // CraftBukkit - add saturatedRegenRate //Magma - mixin inject
             float f = Math.min(this.saturationLevel, 6.0F);
-            p_38711_.heal(f / 6.0F);
+            p_38711_.setRegainReason(org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED); // Magma - fix mixin inject
+            p_38711_.heal(f / 6.0F); // CraftBukkit - add RegainReason
+            this.prepareExhaustion(p_38711_, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.REGEN); //Magma
             this.addExhaustion(f);
             this.tickTimer = 0;
          }
       } else if (flag && this.foodLevel >= 18 && p_38711_.isHurt()) {
          ++this.tickTimer;
-         if (this.tickTimer >= 80) {
+         if (this.tickTimer >= (unsaturatedRegenRateModified ? this.unsaturatedRegenRate : 80)) { // CraftBukkit - add unsaturatedRegenRate //Magma - mixin inject
+            p_38711_.setRegainReason(org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.SATIATED); // Magma - fix mixin inject
             p_38711_.heal(1.0F);
-            this.addExhaustion(6.0F);
+            this.prepareExhaustion(p_38711_, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.REGEN); //Magma
+            this.addExhaustion(entityhuman == null ? 6.0F : entityhuman.level.spigotConfig.regenExhaustion); //Magma - add null check
             this.tickTimer = 0;
          }
       } else if (this.foodLevel <= 0) {
          ++this.tickTimer;
-         if (this.tickTimer >= 80) {
+         if (this.tickTimer >= (starvationRateModified ? starvationRate : 80)) { // CraftBukkit - add starvationRate //Magma - mixin inject
             if (p_38711_.getHealth() > 10.0F || difficulty == Difficulty.HARD || p_38711_.getHealth() > 1.0F && difficulty == Difficulty.NORMAL) {
                p_38711_.hurt(DamageSource.STARVE, 1.0F);
             }
@@ -104,9 +_,29 @@
       return this.foodLevel < 20;
    }
 
+   //Magma start - mixin inject
+   private @org.jetbrains.annotations.Nullable Player addExhaustion_player;
+   private @org.jetbrains.annotations.Nullable org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason addExhaustion_reason;
+   public void prepareExhaustion(Player player, org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason reason) {
+      this.addExhaustion_player = player;
+      this.addExhaustion_reason = reason;
+   }
+
    public void addExhaustion(float p_38704_) {
-      this.exhaustionLevel = Math.min(this.exhaustionLevel + p_38704_, 40.0F);
+
+      if (addExhaustion_player != null) {
+         // CraftBukkit start
+         org.bukkit.event.entity.EntityExhaustionEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerExhaustionEvent(addExhaustion_player, addExhaustion_reason, p_38704_);
+         if (!event.isCancelled()) {
+            this.exhaustionLevel = Math.min(this.exhaustionLevel + event.getExhaustion(), 40.0F);
+         }
+         // CraftBukkit end
+      } else this.exhaustionLevel = Math.min(this.exhaustionLevel + p_38704_, 40.0F);
+
+      this.addExhaustion_player = null;
+      this.addExhaustion_reason = null;
    }
+   //Magma end
 
    public float getExhaustionLevel() {
       return this.exhaustionLevel;
