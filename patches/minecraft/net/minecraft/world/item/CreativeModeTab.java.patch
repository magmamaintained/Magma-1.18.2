--- a/net/minecraft/world/item/CreativeModeTab.java
+++ b/net/minecraft/world/item/CreativeModeTab.java
@@ -85,18 +_,23 @@
    private final String langId;
    private final Component displayName;
    private String recipeFolderName;
+   @Deprecated
    private String backgroundSuffix = "items.png";
+   private net.minecraft.resources.ResourceLocation backgroundLocation;
    private boolean canScroll = true;
    private boolean showTitle = true;
    private EnchantmentCategory[] enchantmentCategories = new EnchantmentCategory[0];
    private ItemStack iconItemStack;
 
+   public CreativeModeTab(String label) {
+       this(-1, label);
+   }
+
    public CreativeModeTab(int p_40773_, String p_40774_) {
-      this.id = p_40773_;
       this.langId = p_40774_;
       this.displayName = new TranslatableComponent("itemGroup." + p_40774_);
       this.iconItemStack = ItemStack.EMPTY;
-      TABS[p_40773_] = this;
+      this.id = addGroupSafe(p_40773_, this);
    }
 
    public int getId() {
@@ -121,15 +_,28 @@
 
    public abstract ItemStack makeIcon();
 
+   /**
+    * @deprecated Forge use {@link #getBackgroundImage()} instead
+    */
+   @Deprecated
    public String getBackgroundSuffix() {
       return this.backgroundSuffix;
    }
 
+   /**
+    * @deprecated Forge: use {@link #setBackgroundImage(net.minecraft.resources.ResourceLocation)} instead
+    */
+   @Deprecated
    public CreativeModeTab setBackgroundSuffix(String p_40780_) {
       this.backgroundSuffix = p_40780_;
       return this;
    }
 
+   public CreativeModeTab setBackgroundImage(net.minecraft.resources.ResourceLocation texture) {
+      this.backgroundLocation = texture;
+      return this;
+   }
+
    public CreativeModeTab setRecipeFolderName(String p_40785_) {
       this.recipeFolderName = p_40785_;
       return this;
@@ -154,10 +_,12 @@
    }
 
    public int getColumn() {
+      if (id > 11) return ((id - 12) % 10) % 5;
       return this.id % 6;
    }
 
    public boolean isTopRow() {
+      if (id > 11) return ((id - 12) % 10) < 5;
       return this.id < 6;
    }
 
@@ -191,5 +_,58 @@
          item.fillItemCategory(this, p_40778_);
       }
 
+   }
+
+   public int getTabPage() {
+      return id < 12 ? 0 : ((id - 12) / 10) + 1;
+   }
+
+   public boolean hasSearchBar() {
+      return id == TAB_SEARCH.id;
+   }
+
+   /**
+    * Gets the width of the search bar of the creative tab, use this if your
+    * creative tab name overflows together with a custom texture.
+    *
+    * @return The width of the search bar, 89 by default
+    */
+   public int getSearchbarWidth() {
+      return 89;
+   }
+
+   public net.minecraft.resources.ResourceLocation getBackgroundImage() {
+      if (backgroundLocation != null) return backgroundLocation; //FORGE: allow custom namespace
+      return new net.minecraft.resources.ResourceLocation("textures/gui/container/creative_inventory/tab_" + this.getBackgroundSuffix());
+   }
+
+   private static final net.minecraft.resources.ResourceLocation CREATIVE_INVENTORY_TABS = new net.minecraft.resources.ResourceLocation("textures/gui/container/creative_inventory/tabs.png");
+   public net.minecraft.resources.ResourceLocation getTabsImage() {
+      return CREATIVE_INVENTORY_TABS;
+   }
+
+   public int getLabelColor() {
+      return 4210752;
+   }
+
+   public int getSlotColor() {
+      return -2130706433;
+   }
+
+   public static synchronized int getGroupCountSafe() {
+      return CreativeModeTab.TABS.length;
+   }
+
+   private static synchronized int addGroupSafe(int index, CreativeModeTab newGroup) {
+      if(index == -1) {
+         index = TABS.length;
+      }
+      if (index >= TABS.length) {
+         CreativeModeTab[] tmp = new CreativeModeTab[index + 1];
+         System.arraycopy(TABS, 0, tmp, 0, TABS.length);
+         TABS = tmp;
+      }
+      TABS[index] = newGroup;
+      return index;
    }
 }
