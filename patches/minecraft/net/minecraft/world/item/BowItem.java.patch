--- a/net/minecraft/world/item/BowItem.java
+++ b/net/minecraft/world/item/BowItem.java
@@ -26,18 +_,23 @@
          Player player = (Player)p_40669_;
          boolean flag = player.getAbilities().instabuild || EnchantmentHelper.getItemEnchantmentLevel(Enchantments.INFINITY_ARROWS, p_40667_) > 0;
          ItemStack itemstack = player.getProjectile(p_40667_);
+
+         int i = this.getUseDuration(p_40667_) - p_40670_;
+         i = net.minecraftforge.event.ForgeEventFactory.onArrowLoose(p_40667_, p_40668_, player, i, !itemstack.isEmpty() || flag);
+         if (i < 0) return;
+
          if (!itemstack.isEmpty() || flag) {
             if (itemstack.isEmpty()) {
                itemstack = new ItemStack(Items.ARROW);
             }
 
-            int i = this.getUseDuration(p_40667_) - p_40670_;
             float f = getPowerForTime(i);
             if (!((double)f < 0.1D)) {
-               boolean flag1 = flag && itemstack.is(Items.ARROW);
+               boolean flag1 = player.getAbilities().instabuild || (itemstack.getItem() instanceof ArrowItem && ((ArrowItem)itemstack.getItem()).isInfinite(itemstack, p_40667_, player));
                if (!p_40668_.isClientSide) {
                   ArrowItem arrowitem = (ArrowItem)(itemstack.getItem() instanceof ArrowItem ? itemstack.getItem() : Items.ARROW);
                   AbstractArrow abstractarrow = arrowitem.createArrow(p_40668_, itemstack, player);
+                  abstractarrow = customArrow(abstractarrow);
                   abstractarrow.shootFromRotation(player, player.getXRot(), player.getYRot(), 0.0F, f * 3.0F, 1.0F);
                   if (f == 1.0F) {
                      abstractarrow.setCritArrow(true);
@@ -57,6 +_,15 @@
                      abstractarrow.setSecondsOnFire(100);
                   }
 
+                  // CraftBukkit start
+                  org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callEntityShootBowEvent(player, p_40667_, itemstack, abstractarrow, player.getUsedItemHand(), f, !flag1);
+                  if (event.isCancelled()) {
+                     event.getProjectile().remove();
+                     return;
+                  }
+                  flag1 = !event.shouldConsumeItem();
+                  // CraftBukkit end
+
                   p_40667_.hurtAndBreak(1, player, (p_40665_) -> {
                      p_40665_.broadcastBreakEvent(player.getUsedItemHand());
                   });
@@ -64,7 +_,17 @@
                      abstractarrow.pickup = AbstractArrow.Pickup.CREATIVE_ONLY;
                   }
 
-                  p_40668_.addFreshEntity(abstractarrow);
+                  // CraftBukkit start
+                  if (event.getProjectile() == abstractarrow.getBukkitEntity()) {
+                     if (!p_40668_.addFreshEntity(abstractarrow)) {
+                        if (player instanceof net.minecraft.server.level.ServerPlayer) {
+                           ((net.minecraft.server.level.ServerPlayer) player).getBukkitEntity().updateInventory();
+                        }
+                        return;
+                     }
+                  }
+                  // CraftBukkit end
+
                }
 
                p_40668_.playSound((Player)null, player.getX(), player.getY(), player.getZ(), SoundEvents.ARROW_SHOOT, SoundSource.PLAYERS, 1.0F, 1.0F / (p_40668_.getRandom().nextFloat() * 0.4F + 1.2F) + f * 0.5F);
@@ -102,6 +_,10 @@
    public InteractionResultHolder<ItemStack> use(Level p_40672_, Player p_40673_, InteractionHand p_40674_) {
       ItemStack itemstack = p_40673_.getItemInHand(p_40674_);
       boolean flag = !p_40673_.getProjectile(itemstack).isEmpty();
+
+      InteractionResultHolder<ItemStack> ret = net.minecraftforge.event.ForgeEventFactory.onArrowNock(itemstack, p_40672_, p_40673_, p_40674_, flag);
+      if (ret != null) return ret;
+
       if (!p_40673_.getAbilities().instabuild && !flag) {
          return InteractionResultHolder.fail(itemstack);
       } else {
@@ -112,6 +_,10 @@
 
    public Predicate<ItemStack> getAllSupportedProjectiles() {
       return ARROW_ONLY;
+   }
+
+   public AbstractArrow customArrow(AbstractArrow arrow) {
+      return arrow;
    }
 
    public int getDefaultProjectileRange() {
