--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -10,15 +_,11 @@
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonSyntaxException;
 import com.mojang.logging.LogUtils;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
+import java.util.*;
 import java.util.Map.Entry;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
@@ -35,11 +_,20 @@
    private static final Gson f_44005_ = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
    private static final Logger f_44006_ = LogUtils.getLogger();
    public Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> f_44007_ = ImmutableMap.of();
+   public Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>>> recipesCB = ImmutableMap.of(); // CraftBukkit
    private Map<ResourceLocation, Recipe<?>> f_199900_ = ImmutableMap.of();
    private boolean f_44008_;
+   private final net.minecraftforge.common.crafting.conditions.ICondition.IContext context; //Forge: add context
 
+   /** @deprecated Forge: use {@linkplain RecipeManager#RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext) constructor with context}. */
+   @Deprecated
    public RecipeManager() {
+      this(net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+   }
+
+   public RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
       super(f_44005_, "recipes");
+      this.context = context;
    }
 
    protected void m_5787_(Map<ResourceLocation, JsonElement> p_44037_, ResourceManager p_44038_, ProfilerFiller p_44039_) {
@@ -47,11 +_,27 @@
       Map<RecipeType<?>, Builder<ResourceLocation, Recipe<?>>> map = Maps.newHashMap();
       Builder<ResourceLocation, Recipe<?>> builder = ImmutableMap.builder();
 
+      // CraftBukkit start - SPIGOT-5667 make sure all types are populated and mutable
+      Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>>> map1 = Maps.newHashMap();
+      for (RecipeType<?> recipeType : Registry.f_122864_) {
+         map1.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
+      }
+      // CraftBukkit end
+
       for(Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
          ResourceLocation resourcelocation = entry.getKey();
+         if (resourcelocation.m_135815_().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
          try {
-            Recipe<?> recipe = m_44045_(resourcelocation, GsonHelper.m_13918_(entry.getValue(), "top element"));
+            if (entry.getValue().isJsonObject() && !net.minecraftforge.common.crafting.CraftingHelper.processConditions(entry.getValue().getAsJsonObject(), "conditions", this.context)) {
+               f_44006_.debug("Skipping loading recipe {} as it's conditions were not met", resourcelocation);
+               continue;
+            }
+            Recipe<?> recipe = fromJson(resourcelocation, GsonHelper.m_13918_(entry.getValue(), "top element"), this.context);
+            if (recipe == null) {
+               f_44006_.info("Skipping loading recipe {} as it's serializer returned null", resourcelocation);
+               continue;
+            }
             map.computeIfAbsent(recipe.m_6671_(), (p_44075_) -> {
                return ImmutableMap.builder();
             }).put(resourcelocation, recipe);
@@ -68,14 +_,31 @@
       f_44006_.info("Loaded {} recipes", (int)map.size());
    }
 
+   // CraftBukkit start - Magma Start
+   public void addRecipe(Recipe<?> irecipe) {
+      Map<ResourceLocation, Recipe<?>> mapMC = this.f_44007_.get(irecipe.m_6671_());
+      Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>> mapCB = this.recipesCB.get(irecipe.m_6671_());
+      if (mapMC.containsKey(irecipe.m_6423_()) || mapCB.containsKey(irecipe.m_6423_())) {
+         throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.m_6423_());
+      } else {
+         this.f_44007_.put(irecipe.m_6671_(), ImmutableMap.<ResourceLocation, Recipe<?>>builder().putAll(mapMC).put(irecipe.m_6423_(), irecipe).build());
+         mapCB.putAndMoveToFirst(irecipe.m_6423_(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+      }
+   }
+   // CraftBukkit end - Magma End
+
    public boolean m_151269_() {
       return this.f_44008_;
    }
 
    public <C extends Container, T extends Recipe<C>> Optional<T> m_44015_(RecipeType<T> p_44016_, C p_44017_, Level p_44018_) {
-      return this.m_44054_(p_44016_).values().stream().flatMap((p_44064_) -> {
+      // CraftBukkit start
+      Optional<T> recipe = this.m_44054_(p_44016_).values().stream().flatMap((p_44064_) -> {
          return p_44016_.m_44115_(p_44064_, p_44018_, p_44017_).stream();
       }).findFirst();
+      p_44017_.setCurrentRecipe(recipe.orElse(null)); // CraftBukkit - Clear recipe when no recipe is found
+      // CraftBukkit end
+      return recipe;
    }
 
    public <C extends Container, T extends Recipe<C>> List<T> m_44013_(RecipeType<T> p_44014_) {
@@ -127,11 +_,17 @@
       });
    }
 
+   /** @deprecated Forge: use {@linkplain #fromJson(ResourceLocation, JsonObject, net.minecraftforge.common.crafting.conditions.ICondition.IContext) overload with context}. */
+   @Deprecated
    public static Recipe<?> m_44045_(ResourceLocation p_44046_, JsonObject p_44047_) {
+      return fromJson(p_44046_, p_44047_, net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+   }
+
+   public static Recipe<?> fromJson(ResourceLocation p_44046_, JsonObject p_44047_, net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
       String s = GsonHelper.m_13906_(p_44047_, "type");
       return Registry.f_122865_.m_6612_(new ResourceLocation(s)).orElseThrow(() -> {
          return new JsonSyntaxException("Invalid or unsupported recipe type '" + s + "'");
-      }).m_6729_(p_44046_, p_44047_);
+      }).fromJson(p_44046_, p_44047_, context);
    }
 
    public void m_44024_(Iterable<Recipe<?>> p_44025_) {
@@ -152,4 +_,23 @@
       this.f_44007_ = ImmutableMap.copyOf(map);
       this.f_199900_ = builder.build();
    }
+
+   // CraftBukkit start
+   public boolean removeRecipe(ResourceLocation mcKey) {
+      for (Map<ResourceLocation, Recipe<?>> recipes : f_44007_.values()) {
+         recipes.remove(mcKey);
+      }
+      return f_199900_.remove(mcKey) != null;
+   }
+
+   public void clearRecipes() {
+      this.f_44007_ = Maps.newHashMap();
+      this.recipesCB = Maps.newHashMap();
+      for (RecipeType<?> recipeType : Registry.f_122864_) {
+         this.f_44007_.put(recipeType, Collections.emptyMap());
+         this.recipesCB.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
+      }
+      this.f_199900_ = Maps.newHashMap();
+   }
+   // CraftBukkit end
 }
