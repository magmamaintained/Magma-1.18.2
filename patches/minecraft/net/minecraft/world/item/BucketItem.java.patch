--- a/net/minecraft/world/item/BucketItem.java
+++ b/net/minecraft/world/item/BucketItem.java
@@ -32,14 +_,28 @@
 public class BucketItem extends Item implements DispensibleContainerItem {
    private final Fluid content;
 
+   // Forge: Use the other constructor that takes a Supplier
+   @Deprecated
    public BucketItem(Fluid p_40689_, Item.Properties p_40690_) {
       super(p_40690_);
       this.content = p_40689_;
+      this.fluidSupplier = p_40689_.delegate;
+   }
+
+   /**
+    * @param supplier A fluid supplier such as {@link net.minecraftforge.registries.RegistryObject<Fluid>}
+    */
+   public BucketItem(java.util.function.Supplier<? extends Fluid> supplier, Item.Properties builder) {
+      super(builder);
+      this.content = null;
+      this.fluidSupplier = supplier;
    }
 
    public InteractionResultHolder<ItemStack> use(Level p_40703_, Player p_40704_, InteractionHand p_40705_) {
       ItemStack itemstack = p_40704_.getItemInHand(p_40705_);
       BlockHitResult blockhitresult = getPlayerPOVHitResult(p_40703_, p_40704_, this.content == Fluids.EMPTY ? ClipContext.Fluid.SOURCE_ONLY : ClipContext.Fluid.NONE);
+      InteractionResultHolder<ItemStack> ret = net.minecraftforge.event.ForgeEventFactory.onBucketUse(p_40704_, p_40703_, itemstack, blockhitresult);
+      if (ret != null) return ret;
       if (blockhitresult.getType() == HitResult.Type.MISS) {
          return InteractionResultHolder.pass(itemstack);
       } else if (blockhitresult.getType() != HitResult.Type.BLOCK) {
@@ -53,14 +_,26 @@
                BlockState blockstate1 = p_40703_.getBlockState(blockpos);
                if (blockstate1.getBlock() instanceof BucketPickup) {
                   BucketPickup bucketpickup = (BucketPickup)blockstate1.getBlock();
+
+                  // CraftBukkit start
+                  ItemStack dummyFluid = bucketpickup.pickupBlock(org.bukkit.craftbukkit.v1_18_R2.util.DummyGeneratorAccess.INSTANCE, blockpos, blockstate1);
+                  if (dummyFluid.isEmpty()) return InteractionResultHolder.fail(itemstack); // Don't fire event if the bucket won't be filled.
+                  org.bukkit.event.player.PlayerBucketFillEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerBucketFillEvent((net.minecraft.server.level.ServerLevel) p_40703_, p_40704_, blockpos, blockpos, blockhitresult.getDirection(), itemstack, dummyFluid.getItem());
+                  if (event.isCancelled()) {
+                     ((ServerPlayer) p_40704_).connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(p_40703_, blockpos)); // SPIGOT-5163 (see PlayerInteractManager)
+                     ((ServerPlayer) p_40704_).getBukkitEntity().updateInventory(); // SPIGOT-4541
+                     return InteractionResultHolder.fail(itemstack);
+                  }
+                  // CraftBukkit end
+
                   ItemStack itemstack1 = bucketpickup.pickupBlock(p_40703_, blockpos, blockstate1);
                   if (!itemstack1.isEmpty()) {
                      p_40704_.awardStat(Stats.ITEM_USED.get(this));
-                     bucketpickup.getPickupSound().ifPresent((p_150709_) -> {
+                     bucketpickup.getPickupSound(blockstate1).ifPresent((p_150709_) -> {
                         p_40704_.playSound(p_150709_, 1.0F, 1.0F);
                      });
                      p_40703_.gameEvent(p_40704_, GameEvent.FLUID_PICKUP, blockpos);
-                     ItemStack itemstack2 = ItemUtils.createFilledResult(itemstack, p_40704_, itemstack1);
+                     ItemStack itemstack2 = ItemUtils.createFilledResult(itemstack, p_40704_, org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asNMSCopy(event.getItemStack())); // CraftBukkit
                      if (!p_40703_.isClientSide) {
                         CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)p_40704_, itemstack1);
                      }
@@ -72,8 +_,8 @@
                return InteractionResultHolder.fail(itemstack);
             } else {
                BlockState blockstate = p_40703_.getBlockState(blockpos);
-               BlockPos blockpos2 = blockstate.getBlock() instanceof LiquidBlockContainer && this.content == Fluids.WATER ? blockpos : blockpos1;
-               if (this.emptyContents(p_40704_, p_40703_, blockpos2, blockhitresult)) {
+               BlockPos blockpos2 = canBlockContainFluid(p_40703_, blockpos, blockstate) ? blockpos : blockpos1;
+               if (this.emptyContents(p_40704_, p_40703_, blockpos2, blockhitresult, blockhitresult.getDirection(), blockpos, itemstack)) { // CraftBukkit
                   this.checkExtraContent(p_40704_, p_40703_, itemstack, blockpos2);
                   if (p_40704_ instanceof ServerPlayer) {
                      CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)p_40704_, blockpos2, itemstack);
@@ -98,7 +_,15 @@
    public void checkExtraContent(@Nullable Player p_150711_, Level p_150712_, ItemStack p_150713_, BlockPos p_150714_) {
    }
 
+   @Deprecated //Forge: use the ItemStack sensitive version
    public boolean emptyContents(@Nullable Player p_150716_, Level p_150717_, BlockPos p_150718_, @Nullable BlockHitResult p_150719_) {
+      return this.emptyContents(p_150716_, p_150717_, p_150718_, p_150719_, null);
+   }
+
+   //Magma start - move emptyContents back to original method and change how bukkit implements it
+   @Nullable private Direction emptyContents_direction;
+   @Nullable private BlockPos emptyContents_clicked;
+   public boolean emptyContents(@Nullable Player p_150716_, Level p_150717_, BlockPos p_150718_, @Nullable BlockHitResult p_150719_, @Nullable ItemStack container) {
       if (!(this.content instanceof FlowingFluid)) {
          return false;
       } else {
@@ -107,8 +_,34 @@
          Material material = blockstate.getMaterial();
          boolean flag = blockstate.canBeReplaced(this.content);
          boolean flag1 = blockstate.isAir() || flag || block instanceof LiquidBlockContainer && ((LiquidBlockContainer)block).canPlaceLiquid(p_150717_, p_150718_, blockstate, this.content);
+         var containedFluidStack = java.util.Optional.ofNullable(container).flatMap(net.minecraftforge.fluids.FluidUtil::getFluidContained);
+
+         // CraftBukkit start
+         if (flag1 && p_150716_ != null) {
+            //Magma start - ClassCastException with Create
+            org.bukkit.event.player.PlayerBucketEmptyEvent event = null;
+            try {
+               net.minecraft.server.level.ServerLevel serverLevel = (net.minecraft.server.level.ServerLevel) p_150717_;
+               event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerBucketEmptyEvent(serverLevel, p_150716_, p_150718_, emptyContents_clicked, emptyContents_direction, container);
+            } catch (ClassCastException ignored) {}
+            //Magma end
+
+            //Magma - set these back to null after use
+            this.emptyContents_direction = null;
+            this.emptyContents_clicked = null;
+            if (event != null && event.isCancelled()) { //Magma - null check
+               ((ServerPlayer) p_150716_).connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(p_150717_, p_150718_)); // SPIGOT-4238: needed when looking through entity
+               ((ServerPlayer) p_150716_).getBukkitEntity().updateInventory(); // SPIGOT-4541
+               return false;
+            }
+         }
+         // CraftBukkit end
+
          if (!flag1) {
-            return p_150719_ != null && this.emptyContents(p_150716_, p_150717_, p_150719_.getBlockPos().relative(p_150719_.getDirection()), (BlockHitResult)null);
+            return p_150719_ != null && this.emptyContents(p_150716_, p_150717_, p_150719_.getBlockPos().relative(p_150719_.getDirection()), (BlockHitResult)null, container);
+         } else if (p_150717_.dimensionType().ultraWarm() && containedFluidStack.isPresent() && this.content.getAttributes().doesVaporize(p_150717_, p_150718_, containedFluidStack.get())) {
+            this.content.getAttributes().vaporize(p_150716_, p_150717_, p_150718_, containedFluidStack.get());
+            return true;
          } else if (p_150717_.dimensionType().ultraWarm() && this.content.is(FluidTags.WATER)) {
             int i = p_150718_.getX();
             int j = p_150718_.getY();
@@ -120,7 +_,7 @@
             }
 
             return true;
-         } else if (block instanceof LiquidBlockContainer && this.content == Fluids.WATER) {
+         } else if (block instanceof LiquidBlockContainer && ((LiquidBlockContainer)block).canPlaceLiquid(p_150717_,p_150718_,blockstate,content)) {
             ((LiquidBlockContainer)block).placeLiquid(p_150717_, p_150718_, blockstate, ((FlowingFluid)this.content).getSource(false));
             this.playEmptySound(p_150716_, p_150717_, p_150718_);
             return true;
@@ -139,9 +_,38 @@
       }
    }
 
+   public boolean emptyContents(@Nullable Player p_150716_, Level p_150717_, BlockPos p_150718_, @Nullable BlockHitResult p_150719_, Direction direction, BlockPos clicked, ItemStack itemstack) {
+      this.emptyContents_direction = direction;
+      this.emptyContents_clicked = clicked;
+      return this.emptyContents(p_150716_, p_150717_, p_150718_, p_150719_, itemstack);
+   }
+   //Magma end
+
    protected void playEmptySound(@Nullable Player p_40696_, LevelAccessor p_40697_, BlockPos p_40698_) {
-      SoundEvent soundevent = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
+      SoundEvent soundevent = this.content.getAttributes().getEmptySound();
+      if(soundevent == null) soundevent = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
       p_40697_.playSound(p_40696_, p_40698_, soundevent, SoundSource.BLOCKS, 1.0F, 1.0F);
       p_40697_.gameEvent(p_40696_, GameEvent.FLUID_PLACE, p_40698_);
+   }
+
+   @Override
+   public net.minecraftforge.common.capabilities.ICapabilityProvider initCapabilities(ItemStack stack, @Nullable net.minecraft.nbt.CompoundTag nbt) {
+      if (this.getClass() == BucketItem.class)
+         return new net.minecraftforge.fluids.capability.wrappers.FluidBucketWrapper(stack);
+      else
+         return super.initCapabilities(stack, nbt);
+   }
+
+   private final java.util.function.Supplier<? extends Fluid> fluidSupplier;
+
+   public Fluid getContent() {
+      return content;
+   }
+
+   public Fluid getFluid() { return fluidSupplier.get(); }
+
+   private boolean canBlockContainFluid(Level worldIn, BlockPos posIn, BlockState blockstate)
+   {
+      return blockstate.getBlock() instanceof LiquidBlockContainer && ((LiquidBlockContainer)blockstate.getBlock()).canPlaceLiquid(worldIn, posIn, blockstate, this.content);
    }
 }
