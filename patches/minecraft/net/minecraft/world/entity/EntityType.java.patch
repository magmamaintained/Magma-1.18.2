--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -148,12 +_,12 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.slf4j.Logger;
 
-public class EntityType<T extends Entity> implements EntityTypeTest<Entity, T> {
+public class EntityType<T extends Entity> extends net.minecraftforge.registries.ForgeRegistryEntry<EntityType<?>> implements EntityTypeTest<Entity, T> {
    private static final Logger LOGGER = LogUtils.getLogger();
    public static final String ENTITY_TAG = "EntityTag";
    private final Holder.Reference<EntityType<?>> builtInRegistryHolder = Registry.ENTITY_TYPE.createIntrusiveHolder(this);
    private static final float MAGIC_HORSE_WIDTH = 1.3964844F;
-   public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = register("area_effect_cloud", EntityType.Builder.<AreaEffectCloud>of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0F, 0.5F).clientTrackingRange(10).updateInterval(Integer.MAX_VALUE));
+   public static final EntityType<AreaEffectCloud> AREA_EFFECT_CLOUD = register("area_effect_cloud", EntityType.Builder.<AreaEffectCloud>of(AreaEffectCloud::new, MobCategory.MISC).fireImmune().sized(6.0F, 0.5F).clientTrackingRange(10).updateInterval(10)); // CraftBukkit - SPIGOT-3729: track area effect clouds
    public static final EntityType<ArmorStand> ARMOR_STAND = register("armor_stand", EntityType.Builder.<ArmorStand>of(ArmorStand::new, MobCategory.MISC).sized(0.5F, 1.975F).clientTrackingRange(10));
    public static final EntityType<Arrow> ARROW = register("arrow", EntityType.Builder.<Arrow>of(Arrow::new, MobCategory.MISC).sized(0.5F, 0.5F).clientTrackingRange(4).updateInterval(20));
    public static final EntityType<Axolotl> AXOLOTL = register("axolotl", EntityType.Builder.<Axolotl>of(Axolotl::new, MobCategory.AXOLOTLS).sized(0.75F, 0.42F).clientTrackingRange(10));
@@ -283,6 +_,11 @@
    private ResourceLocation lootTable;
    private final EntityDimensions dimensions;
 
+   private final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier;
+   private final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier;
+   private final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier;
+   private final java.util.function.BiFunction<net.minecraftforge.network.PlayMessages.SpawnEntity, Level, T> customClientFactory;
+
    private static <T extends Entity> EntityType<T> register(String p_20635_, EntityType.Builder<T> p_20636_) {
       return Registry.register(Registry.ENTITY_TYPE, p_20635_, p_20636_.build(p_20635_));
    }
@@ -295,7 +_,19 @@
       return Registry.ENTITY_TYPE.getOptional(ResourceLocation.tryParse(p_20633_));
    }
 
+   // Paper start - add id
+   public final String id;
+
    public EntityType(EntityType.EntityFactory<T> p_20574_, MobCategory p_20575_, boolean p_20576_, boolean p_20577_, boolean p_20578_, boolean p_20579_, ImmutableSet<Block> p_20580_, EntityDimensions p_20581_, int p_20582_, int p_20583_) {
+       this(p_20574_, p_20575_, p_20576_, p_20577_, p_20578_, p_20579_, p_20580_, p_20581_, p_20582_, p_20583_, EntityType::defaultVelocitySupplier, EntityType::defaultTrackingRangeSupplier, EntityType::defaultUpdateIntervalSupplier, null);
+   }
+
+   public EntityType(EntityType.EntityFactory<T> p_20574_, MobCategory p_20575_, boolean p_20576_, boolean p_20577_, boolean p_20578_, boolean p_20579_, ImmutableSet<Block> p_20580_, EntityDimensions p_20581_, int p_20582_, int p_20583_, final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier, final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier, final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier, final java.util.function.BiFunction<net.minecraftforge.network.PlayMessages.SpawnEntity, Level, T> customClientFactory) {
+      this(p_20574_, p_20575_, p_20576_, p_20577_, p_20578_, p_20579_, p_20580_, p_20581_, p_20582_, p_20583_, velocityUpdateSupplier, trackingRangeSupplier, updateIntervalSupplier, customClientFactory, "custom");
+   }
+
+   public EntityType(EntityType.EntityFactory<T> p_20574_, MobCategory p_20575_, boolean p_20576_, boolean p_20577_, boolean p_20578_, boolean p_20579_, ImmutableSet<Block> p_20580_, EntityDimensions p_20581_, int p_20582_, int p_20583_, final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier, final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier, final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier, final java.util.function.BiFunction<net.minecraftforge.network.PlayMessages.SpawnEntity, Level, T> customClientFactory, String id) {
+      // Paper end
       this.factory = p_20574_;
       this.category = p_20575_;
       this.canSpawnFarFromPlayer = p_20579_;
@@ -306,17 +_,39 @@
       this.dimensions = p_20581_;
       this.clientTrackingRange = p_20582_;
       this.updateInterval = p_20583_;
+      this.velocityUpdateSupplier = velocityUpdateSupplier;
+      this.trackingRangeSupplier = trackingRangeSupplier;
+      this.updateIntervalSupplier = updateIntervalSupplier;
+      this.customClientFactory = customClientFactory;
+
+      // Paper start - timings
+      this.id = id;
+      this.tickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "tick");
+      this.inactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "inactiveTick");
+      this.passengerTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerTick");
+      this.passengerInactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerInactiveTick");
+      // Paper end
    }
 
    @Nullable
    public Entity spawn(ServerLevel p_20593_, @Nullable ItemStack p_20594_, @Nullable Player p_20595_, BlockPos p_20596_, MobSpawnType p_20597_, boolean p_20598_, boolean p_20599_) {
+      this.prepareSpawn(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG);
       return this.spawn(p_20593_, p_20594_ == null ? null : p_20594_.getTag(), p_20594_ != null && p_20594_.hasCustomHoverName() ? p_20594_.getHoverName() : null, p_20595_, p_20596_, p_20597_, p_20598_, p_20599_);
    }
 
+   //Magma start - spawn reason
+   private @Nullable org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawn_spawnReason = org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG;
+   public void prepareSpawn(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+      this.spawn_spawnReason = spawnReason;
+   }
+   //Magma end
+
    @Nullable
    public T spawn(ServerLevel p_20601_, @Nullable CompoundTag p_20602_, @Nullable Component p_20603_, @Nullable Player p_20604_, BlockPos p_20605_, MobSpawnType p_20606_, boolean p_20607_, boolean p_20608_) {
       T t = this.create(p_20601_, p_20602_, p_20603_, p_20604_, p_20605_, p_20606_, p_20607_, p_20608_);
       if (t != null) {
+         p_20601_.prepareEntity(t, spawn_spawnReason); //Magma - add spawn reason
+         prepareSpawn(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG); //Magma - reset spawn reason
          p_20601_.addFreshEntityWithPassengers(t);
       }
 
@@ -342,6 +_,7 @@
             Mob mob = (Mob)t;
             mob.yHeadRot = mob.getYRot();
             mob.yBodyRot = mob.getYRot();
+            if (!net.minecraftforge.event.ForgeEventFactory.doSpecialSpawn(mob, p_20656_, (float) mob.getX(), (float) mob.getY(), (float) mob.getZ(), null, p_20661_))
             mob.finalizeSpawn(p_20656_, p_20656_.getCurrentDifficultyAt(mob.blockPosition()), p_20661_, (SpawnGroupData)null, p_20657_);
             mob.playAmbientSound();
          }
@@ -350,7 +_,11 @@
             t.setCustomName(p_20658_);
          }
 
-         updateCustomEntityTag(p_20656_, p_20659_, t, p_20657_);
+         try {
+            updateCustomEntityTag(p_20656_, p_20659_, t, p_20657_);
+         } catch (Throwable t0) {
+            LOGGER.warn("Error loading spawn eg NBT", t0);
+         }
          return t;
       }
    }
@@ -544,14 +_,29 @@
    }
 
    public int clientTrackingRange() {
+      return trackingRangeSupplier.applyAsInt(this);
+   }
+   private int defaultTrackingRangeSupplier() {
       return this.clientTrackingRange;
    }
 
    public int updateInterval() {
+      return updateIntervalSupplier.applyAsInt(this);
+   }
+   private int defaultUpdateIntervalSupplier() {
       return this.updateInterval;
    }
 
+   // Paper start - timings
+   public final co.aikar.timings.Timing tickTimer;
+   public final co.aikar.timings.Timing inactiveTickTimer;
+   public final co.aikar.timings.Timing passengerTickTimer;
+   public final co.aikar.timings.Timing passengerInactiveTickTimer;
+   // Paper end
    public boolean trackDeltas() {
+      return velocityUpdateSupplier.test(this);
+   }
+   private boolean defaultVelocitySupplier() {
       return this != PLAYER && this != LLAMA_SPIT && this != WITHER && this != BAT && this != ITEM_FRAME && this != GLOW_ITEM_FRAME && this != LEASH_KNOT && this != PAINTING && this != END_CRYSTAL && this != EVOKER_FANGS;
    }
 
@@ -574,6 +_,12 @@
       return this.builtInRegistryHolder;
    }
 
+   public T customClientSpawn(net.minecraftforge.network.PlayMessages.SpawnEntity packet, Level world) {
+       if (customClientFactory == null) return this.create(world);
+       return customClientFactory.apply(packet, world);
+   }
+   public Stream<TagKey<EntityType<?>>> getTags() {return this.builtInRegistryHolder().tags();}
+
    public static class Builder<T extends Entity> {
       private final EntityType.EntityFactory<T> factory;
       private final MobCategory category;
@@ -586,6 +_,11 @@
       private int updateInterval = 3;
       private EntityDimensions dimensions = EntityDimensions.scalable(0.6F, 1.8F);
 
+      private java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier = EntityType::defaultVelocitySupplier;
+      private java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier = EntityType::defaultTrackingRangeSupplier;
+      private java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier = EntityType::defaultUpdateIntervalSupplier;
+      private java.util.function.BiFunction<net.minecraftforge.network.PlayMessages.SpawnEntity, Level, T> customClientFactory;
+
       private Builder(EntityType.EntityFactory<T> p_20696_, MobCategory p_20697_) {
          this.factory = p_20696_;
          this.category = p_20697_;
@@ -642,16 +_,46 @@
          return this;
       }
 
+      public EntityType.Builder<T> setUpdateInterval(int interval) {
+          this.updateIntervalSupplier = t->interval;
+          return this;
+      }
+
+      public EntityType.Builder<T> setTrackingRange(int range) {
+          this.trackingRangeSupplier = t->range;
+          return this;
+      }
+
+      public EntityType.Builder<T> setShouldReceiveVelocityUpdates(boolean value) {
+          this.velocityUpdateSupplier = t->value;
+          return this;
+      }
+
+      /**
+       * By default, entities are spawned clientside via {@link EntityType#create(Level)}}.
+       * If you need finer control over the spawning process, use this to get read access to the spawn packet.
+       */
+      public EntityType.Builder<T> setCustomClientFactory(java.util.function.BiFunction<net.minecraftforge.network.PlayMessages.SpawnEntity, Level, T> customClientFactory) {
+          this.customClientFactory = customClientFactory;
+          return this;
+      }
+
       public EntityType<T> build(String p_20713_) {
          if (this.serialize) {
             Util.fetchChoiceType(References.ENTITY_TREE, p_20713_);
          }
 
-         return new EntityType<>(this.factory, this.category, this.serialize, this.summon, this.fireImmune, this.canSpawnFarFromPlayer, this.immuneTo, this.dimensions, this.clientTrackingRange, this.updateInterval);
+         return new EntityType<>(this.factory, this.category, this.serialize, this.summon, this.fireImmune, this.canSpawnFarFromPlayer, this.immuneTo, this.dimensions, this.clientTrackingRange, this.updateInterval, velocityUpdateSupplier, trackingRangeSupplier, updateIntervalSupplier, customClientFactory, p_20713_); // Paper - add id
       }
    }
 
    public interface EntityFactory<T extends Entity> {
       T create(EntityType<T> p_20722_, Level p_20723_);
    }
+
+   // Paper start
+   public static java.util.Set<ResourceLocation> getEntityNameList() {
+      return Registry.ENTITY_TYPE.keySet();
+   }
+   // Paper end
 }
