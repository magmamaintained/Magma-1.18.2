--- a/net/minecraft/world/entity/ai/village/poi/PoiType.java
+++ b/net/minecraft/world/entity/ai/village/poi/PoiType.java
@@ -21,7 +_,7 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BedPart;
 
-public class PoiType {
+public class PoiType extends net.minecraftforge.registries.ForgeRegistryEntry<PoiType> {
    private static final Supplier<Set<PoiType>> ALL_JOB_POI_TYPES = Suppliers.memoize(() -> {
       return Registry.VILLAGER_PROFESSION.stream().map(VillagerProfession::getJobPoiType).collect(Collectors.toSet());
    });
@@ -39,7 +_,7 @@
    private static final Set<BlockState> CAULDRONS = ImmutableList.of(Blocks.CAULDRON, Blocks.LAVA_CAULDRON, Blocks.WATER_CAULDRON, Blocks.POWDER_SNOW_CAULDRON).stream().flatMap((p_148697_) -> {
       return p_148697_.getStateDefinition().getPossibleStates().stream();
    }).collect(ImmutableSet.toImmutableSet());
-   private static final Map<BlockState, PoiType> TYPE_BY_STATE = Maps.newHashMap();
+   private static final Map<BlockState, PoiType> TYPE_BY_STATE = net.minecraftforge.registries.GameData.getBlockStatePointOfInterestTypeMap();
    public static final PoiType UNEMPLOYED = register("unemployed", ImmutableSet.of(), 1, ALL_JOBS, 1);
    public static final PoiType ARMORER = register("armorer", getBlockStates(Blocks.BLAST_FURNACE), 1, 1);
    public static final PoiType BUTCHER = register("butcher", getBlockStates(Blocks.SMOKER), 1, 1);
@@ -124,16 +_,14 @@
    }
 
    private static PoiType registerBlockStates(PoiType p_27368_) {
-      p_27368_.matchingStates.forEach((p_148691_) -> {
-         PoiType poitype = TYPE_BY_STATE.put(p_148691_, p_27368_);
-         if (poitype != null) {
-            throw (IllegalStateException)Util.pauseInIde(new IllegalStateException(String.format("%s is defined in too many tags", p_148691_)));
-         }
-      });
       return p_27368_;
    }
 
    public static Optional<PoiType> forState(BlockState p_27391_) {
       return Optional.ofNullable(TYPE_BY_STATE.get(p_27391_));
+   }
+   
+   public ImmutableSet<BlockState> getBlockStates() {
+      return ImmutableSet.copyOf(this.matchingStates);
    }
 }
