--- a/net/minecraft/world/entity/monster/Zombie.java
+++ b/net/minecraft/world/entity/monster/Zombie.java
@@ -83,6 +_,7 @@
    private boolean canBreakDoors;
    private int inWaterTime;
    public int conversionTime;
+   private int lastTick = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit - add field
 
    public Zombie(EntityType<? extends Zombie> p_34271_, Level p_34272_) {
       super(p_34271_, p_34272_);
@@ -105,7 +_,7 @@
       this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
       this.targetSelector.addGoal(1, (new HurtByTargetGoal(this)).setAlertOthers(ZombifiedPiglin.class));
       this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
-      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false));
+      if ( level.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false)); // Spigot
       this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
       this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
    }
@@ -190,8 +_,11 @@
    public void tick() {
       if (!this.level.isClientSide && this.isAlive() && !this.isNoAi()) {
          if (this.isUnderWaterConverting()) {
-            --this.conversionTime;
-            if (this.conversionTime < 0) {
+            // CraftBukkit start - Use wall time instead of ticks for conversion
+            int elapsedTicks = net.minecraft.server.MinecraftServer.currentTick - this.lastTick;
+            this.conversionTime -= elapsedTicks;
+            // CraftBukkit end
+            if (this.conversionTime < 0 && net.minecraftforge.event.ForgeEventFactory.canLivingConvert(this, EntityType.DROWNED, (timer) -> this.conversionTime = timer)) {
                this.doUnderWaterConversion();
             }
          } else if (this.convertsInWater()) {
@@ -207,6 +_,7 @@
       }
 
       super.tick();
+      this.lastTick = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit
    }
 
    public void aiStep() {
@@ -236,6 +_,7 @@
    }
 
    public void startUnderWaterConversion(int p_34279_) {
+      this.lastTick = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit
       this.conversionTime = p_34279_;
       this.getEntityData().set(DATA_DROWNED_CONVERSION_ID, true);
    }
@@ -249,10 +_,15 @@
    }
 
    protected void convertToZombieType(EntityType<? extends Zombie> p_34311_) {
-      Zombie zombie = this.convertTo(p_34311_, true);
+      Zombie zombie = this.convertTo(p_34311_, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.DROWNED, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DROWNED);
       if (zombie != null) {
          zombie.handleAttributes(zombie.level.getCurrentDifficultyAt(zombie.blockPosition()).getSpecialMultiplier());
          zombie.setCanBreakDoors(zombie.supportsBreakDoorGoal() && this.canBreakDoors());
+         net.minecraftforge.event.ForgeEventFactory.onLivingConvert(this, zombie);
+         // CraftBukkit start - SPIGOT-5208: End conversion to stop event spam
+      } else {
+         ((org.bukkit.entity.Zombie) getBukkitEntity()).setConversionTime(-1);
+         // CraftBukkit end
       }
 
    }
@@ -273,11 +_,14 @@
             livingentity = (LivingEntity)p_34288_.getEntity();
          }
 
-         if (livingentity != null && this.level.getDifficulty() == Difficulty.HARD && (double)this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE) && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
             int i = Mth.floor(this.getX());
             int j = Mth.floor(this.getY());
             int k = Mth.floor(this.getZ());
-            Zombie zombie = new Zombie(this.level);
+         net.minecraftforge.event.entity.living.ZombieEvent.SummonAidEvent event = net.minecraftforge.event.ForgeEventFactory.fireZombieSummonAid(this, level, i, j, k, livingentity, this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).getValue());
+         if (event.getResult() == net.minecraftforge.eventbus.api.Event.Result.DENY) return true;
+         if (event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW  ||
+            livingentity != null && this.level.getDifficulty() == Difficulty.HARD && (double)this.random.nextFloat() < this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).getValue() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
+            Zombie zombie = event.getCustomSummonedAid() != null && event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW ? event.getCustomSummonedAid() : EntityType.ZOMBIE.create(this.level);
 
             for(int l = 0; l < 50; ++l) {
                int i1 = i + Mth.nextInt(this.random, 7, 40) * Mth.nextInt(this.random, -1, 1);
@@ -289,8 +_,10 @@
                if (NaturalSpawner.isSpawnPositionOk(spawnplacements$type, this.level, blockpos, entitytype) && SpawnPlacements.checkSpawnRules(entitytype, serverlevel, MobSpawnType.REINFORCEMENT, blockpos, this.level.random)) {
                   zombie.setPos((double)i1, (double)j1, (double)k1);
                   if (!this.level.hasNearbyAlivePlayer((double)i1, (double)j1, (double)k1, 7.0D) && this.level.isUnobstructed(zombie) && this.level.noCollision(zombie) && !this.level.containsAnyLiquid(zombie.getBoundingBox())) {
-                     zombie.setTarget(livingentity);
+                     if (livingentity != null)
+                     zombie.setTarget(livingentity, org.bukkit.event.entity.EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true); // CraftBukkit
                      zombie.finalizeSpawn(serverlevel, this.level.getCurrentDifficultyAt(zombie.blockPosition()), MobSpawnType.REINFORCEMENT, (SpawnGroupData)null, (CompoundTag)null);
+                     serverlevel.prepareEntity(zombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); //Magma - add spawn reason
                      serverlevel.addFreshEntityWithPassengers(zombie);
                      this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement caller charge", (double)-0.05F, AttributeModifier.Operation.ADDITION));
                      zombie.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement callee charge", (double)-0.05F, AttributeModifier.Operation.ADDITION));
@@ -309,7 +_,13 @@
       if (flag) {
          float f = this.level.getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();
          if (this.getMainHandItem().isEmpty() && this.isOnFire() && this.random.nextFloat() < f * 0.3F) {
-            p_34276_.setSecondsOnFire(2 * (int)f);
+            // CraftBukkit start
+            org.bukkit.event.entity.EntityCombustByEntityEvent event = new org.bukkit.event.entity.EntityCombustByEntityEvent(this.getBukkitEntity(), p_34276_.getBukkitEntity(), 2 * (int) f); // PAIL: fixme
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+               p_34276_.setSecondsOnFire(event.getDuration(), false);
+            }
+            // CraftBukkit end
          }
       }
 
@@ -374,23 +_,33 @@
 
    public void killed(ServerLevel p_34281_, LivingEntity p_34282_) {
       super.killed(p_34281_, p_34282_);
-      if ((p_34281_.getDifficulty() == Difficulty.NORMAL || p_34281_.getDifficulty() == Difficulty.HARD) && p_34282_ instanceof Villager) {
+      if ((p_34281_.getDifficulty() == Difficulty.NORMAL || p_34281_.getDifficulty() == Difficulty.HARD) && p_34282_ instanceof Villager && net.minecraftforge.event.ForgeEventFactory.canLivingConvert(p_34282_, EntityType.ZOMBIE_VILLAGER, (timer) -> {
+      })) {
          if (p_34281_.getDifficulty() != Difficulty.HARD && this.random.nextBoolean()) {
             return;
          }
 
-         Villager villager = (Villager)p_34282_;
-         ZombieVillager zombievillager = villager.convertTo(EntityType.ZOMBIE_VILLAGER, false);
-         zombievillager.finalizeSpawn(p_34281_, p_34281_.getCurrentDifficultyAt(zombievillager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), (CompoundTag)null);
-         zombievillager.setVillagerData(villager.getVillagerData());
-         zombievillager.setGossips(villager.getGossips().store(NbtOps.INSTANCE).getValue());
-         zombievillager.setTradeOffers(villager.getOffers().createTag());
-         zombievillager.setVillagerXp(villager.getVillagerXp());
-         if (!this.isSilent()) {
-            p_34281_.levelEvent((Player)null, 1026, this.blockPosition(), 0);
+         Villager villager = (Villager) p_34282_;
+         // CraftBukkit start
+         zombifyVillager(p_34281_, villager, this.blockPosition(), this.isSilent(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.INFECTION);
+      }
+   }
+   public static ZombieVillager zombifyVillager(ServerLevel p_34281_, Villager villager, net.minecraft.core.BlockPos blockPosition, boolean silent, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+      ZombieVillager entityzombievillager = (ZombieVillager) villager.convertTo(EntityType.ZOMBIE_VILLAGER, false, org.bukkit.event.entity.EntityTransformEvent.TransformReason.INFECTION, spawnReason);
+      if (entityzombievillager != null) {
+         // CraftBukkit end
+         entityzombievillager.finalizeSpawn(p_34281_, p_34281_.getCurrentDifficultyAt(villager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), (CompoundTag) null);
+         entityzombievillager.setVillagerData(villager.getVillagerData());
+         entityzombievillager.setGossips(villager.getGossips().store(NbtOps.INSTANCE).getValue());
+         entityzombievillager.setTradeOffers(villager.getOffers().createTag());
+         entityzombievillager.setVillagerXp(villager.getVillagerXp());
+         net.minecraftforge.event.ForgeEventFactory.onLivingConvert(entityzombievillager, villager);
+         if (!silent) {
+            p_34281_.levelEvent((Player) null, 1026, blockPosition, 0);
          }
       }
 
+      return entityzombievillager; // CraftBukkit
    }
 
    protected float getStandingEyeHeight(Pose p_34313_, EntityDimensions p_34314_) {
@@ -432,6 +_,7 @@
                   chicken1.finalizeSpawn(p_34297_, p_34298_, MobSpawnType.JOCKEY, (SpawnGroupData)null, (CompoundTag)null);
                   chicken1.setChickenJockey(true);
                   this.startRiding(chicken1);
+                  p_34297_.prepareEntity(chicken1, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.MOUNT); //Magma - add spawn reason
                   p_34297_.addFreshEntity(chicken1);
                }
             }
@@ -457,7 +_,7 @@
    }
 
    public static boolean getSpawnAsBabyOdds(Random p_34303_) {
-      return p_34303_.nextFloat() < 0.05F;
+      return p_34303_.nextFloat() < net.minecraftforge.common.ForgeConfig.SERVER.zombieBabyChance.get();
    }
 
    protected void handleAttributes(float p_34340_) {
@@ -477,7 +_,7 @@
    }
 
    protected void randomizeReinforcementsChance() {
-      this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * (double)0.1F);
+      this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).setBaseValue(this.random.nextDouble() * net.minecraftforge.common.ForgeConfig.SERVER.zombieBaseSummonChance.get());
    }
 
    public double getMyRidingOffset() {
