--- a/net/minecraft/world/entity/item/ItemEntity.java
+++ b/net/minecraft/world/entity/item/ItemEntity.java
@@ -43,6 +_,11 @@
    @Nullable
    private UUID owner;
    public final float bobOffs;
+   /**
+    * The maximum age of this EntityItem.  The item is expired once this is reached.
+    */
+   public int lifespan = ItemEntity.LIFETIME;
+   private int lastTick = net.minecraft.server.MinecraftServer.currentTick - 1; // CraftBukkit
 
    public ItemEntity(EntityType<? extends ItemEntity> p_31991_, Level p_31992_) {
       super(p_31991_, p_31992_);
@@ -59,6 +_,7 @@
       this.setPos(p_149664_, p_149665_, p_149666_);
       this.setDeltaMovement(p_149668_, p_149669_, p_149670_);
       this.setItem(p_149667_);
+      this.lifespan = (p_149667_.getItem() == null ? (p_149663_ == null ? ItemEntity.LIFETIME : level.spigotConfig.itemDespawnRate) : p_149667_.getEntityLifespan(p_149663_));
    }
 
    private ItemEntity(ItemEntity p_31994_) {
@@ -82,13 +_,17 @@
    }
 
    public void tick() {
+      if (getItem().onEntityItemUpdate(this)) return;
       if (this.getItem().isEmpty()) {
          this.discard();
       } else {
          super.tick();
-         if (this.pickupDelay > 0 && this.pickupDelay != 32767) {
-            --this.pickupDelay;
-         }
+         // CraftBukkit start - Use wall time for pickup and despawn timers
+         int elapsedTicks = net.minecraft.server.MinecraftServer.currentTick - this.lastTick;
+         if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+         if (this.age != -32768) this.age += elapsedTicks;
+         this.lastTick = net.minecraft.server.MinecraftServer.currentTick;
+         // CraftBukkit end
 
          this.xo = this.getX();
          this.yo = this.getY();
@@ -116,7 +_,7 @@
             this.move(MoverType.SELF, this.getDeltaMovement());
             float f1 = 0.98F;
             if (this.onGround) {
-               f1 = this.level.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ())).getBlock().getFriction() * 0.98F;
+               f1 = this.level.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ())).getFriction(level, new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ()), this) * 0.98F;
             }
 
             this.setDeltaMovement(this.getDeltaMovement().multiply((double)f1, 0.98D, (double)f1));
@@ -134,9 +_,11 @@
             this.mergeWithNeighbours();
          }
 
+          /* CraftBukkit start - moved up
          if (this.age != -32768) {
             ++this.age;
          }
+         // CraftBukkit end */
 
          this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
          if (!this.level.isClientSide) {
@@ -146,12 +_,46 @@
             }
          }
 
-         if (!this.level.isClientSide && this.age >= 6000) {
+         ItemStack item = this.getItem();
+         if (!this.level.isClientSide && this.age >= lifespan) {
+             int hook = net.minecraftforge.event.ForgeEventFactory.onItemExpire(this, item);
+             if (hook < 0) this.discard();
+             else          this.lifespan += hook;
+         }
+
+         if (item.isEmpty()) {
+            // CraftBukkit start - fire ItemDespawnEvent
+            if (org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+               this.age = 0;
+               return;
+            }
+            // CraftBukkit end
             this.discard();
          }
 
       }
    }
+
+   // Spigot start - copied from above
+   @Override
+   public void inactiveTick() {
+      // CraftBukkit start - Use wall time for pickup and despawn timers
+      int elapsedTicks = net.minecraft.server.MinecraftServer.currentTick - this.lastTick;
+      if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+      if (this.age != -32768) this.age += elapsedTicks;
+      this.lastTick = net.minecraft.server.MinecraftServer.currentTick;
+      // CraftBukkit end
+      if (!this.level.isClientSide && this.age >= lifespan) { //Magma
+         // CraftBukkit start - fire ItemDespawnEvent
+         if (org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+            this.age = 0;
+            return;
+         }
+         // CraftBukkit end
+         this.discard();
+      }
+   }
+   // Spigot end
 
    private void setUnderwaterMovement() {
       Vec3 vec3 = this.getDeltaMovement();
@@ -165,7 +_,7 @@
 
    private void mergeWithNeighbours() {
       if (this.isMergable()) {
-         for(ItemEntity itementity : this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(0.5D, 0.0D, 0.5D), (p_186268_) -> {
+         for(ItemEntity itementity : this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(level.spigotConfig.itemMerge, level.spigotConfig.itemMerge - 0.5D, level.spigotConfig.itemMerge), (p_186268_) -> {
             return p_186268_ != this && p_186268_.isMergable();
          })) {
             if (itementity.isMergable()) {
@@ -188,7 +_,7 @@
       ItemStack itemstack = this.getItem();
       ItemStack itemstack1 = p_32016_.getItem();
       if (Objects.equals(this.getOwner(), p_32016_.getOwner()) && areMergable(itemstack, itemstack1)) {
-         if (itemstack1.getCount() < itemstack.getCount()) {
+         if (true || itemstack1.getCount() < itemstack.getCount()) { // Spigot
             merge(this, itemstack, p_32016_, itemstack1);
          } else {
             merge(p_32016_, itemstack1, this, itemstack);
@@ -204,6 +_,8 @@
          return false;
       } else if (p_32028_.hasTag() ^ p_32027_.hasTag()) {
          return false;
+      } else if (!p_32027_.areCapsCompatible(p_32028_)) {
+         return false;
       } else {
          return !p_32028_.hasTag() || p_32028_.getTag().equals(p_32027_.getTag());
       }
@@ -219,10 +_,11 @@
 
    private static void merge(ItemEntity p_32023_, ItemStack p_32024_, ItemStack p_32025_) {
       ItemStack itemstack = merge(p_32024_, p_32025_, 64);
-      p_32023_.setItem(itemstack);
+      if (!itemstack.isEmpty()) p_32023_.setItem(itemstack); // CraftBukkit - don't set empty stacks
    }
 
    private static void merge(ItemEntity p_32018_, ItemStack p_32019_, ItemEntity p_32020_, ItemStack p_32021_) {
+      if (org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callItemMergeEvent(p_32020_, p_32018_).isCancelled()) return; // CraftBukkit
       merge(p_32018_, p_32019_, p_32021_);
       p_32018_.pickupDelay = Math.max(p_32018_.pickupDelay, p_32020_.pickupDelay);
       p_32018_.age = Math.min(p_32018_.age, p_32020_.age);
@@ -237,6 +_,7 @@
    }
 
    public boolean hurt(DamageSource p_32013_, float p_32014_) {
+      if (this.level.isClientSide || this.isRemoved()) return false; //Forge: Fixes MC-53850
       if (this.isInvulnerableTo(p_32013_)) {
          return false;
       } else if (!this.getItem().isEmpty() && this.getItem().is(Items.NETHER_STAR) && p_32013_.isExplosion()) {
@@ -246,11 +_,16 @@
       } else if (this.level.isClientSide) {
          return true;
       } else {
+         // CraftBukkit start
+         if (org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_32013_, p_32014_)) {
+            return false;
+         }
+         // CraftBukkit end
          this.markHurt();
          this.health = (int)((float)this.health - p_32014_);
          this.gameEvent(GameEvent.ENTITY_DAMAGED, p_32013_.getEntity());
          if (this.health <= 0) {
-            this.getItem().onDestroyed(this);
+            this.getItem().onDestroyed(this, p_32013_);
             this.discard();
          }
 
@@ -262,6 +_,7 @@
       p_32050_.putShort("Health", (short)this.health);
       p_32050_.putShort("Age", (short)this.age);
       p_32050_.putShort("PickupDelay", (short)this.pickupDelay);
+      p_32050_.putInt("Lifespan", lifespan);
       if (this.getThrower() != null) {
          p_32050_.putUUID("Thrower", this.getThrower());
       }
@@ -282,6 +_,7 @@
       if (p_32034_.contains("PickupDelay")) {
          this.pickupDelay = p_32034_.getShort("PickupDelay");
       }
+      if (p_32034_.contains("Lifespan")) lifespan = p_32034_.getInt("Lifespan");
 
       if (p_32034_.hasUUID("Owner")) {
          this.owner = p_32034_.getUUID("Owner");
@@ -301,10 +_,59 @@
 
    public void playerTouch(Player p_32040_) {
       if (!this.level.isClientSide) {
+         if (this.pickupDelay > 0) return;
          ItemStack itemstack = this.getItem();
          Item item = itemstack.getItem();
          int i = itemstack.getCount();
-         if (this.pickupDelay == 0 && (this.owner == null || this.owner.equals(p_32040_.getUUID())) && p_32040_.getInventory().add(itemstack)) {
+
+         // CraftBukkit start - fire PlayerPickupItemEvent
+         int canHold = p_32040_.getInventory().canHold(itemstack);
+         int remaining = i - canHold;
+
+         if (this.pickupDelay <= 0 && canHold > 0) {
+            itemstack.setCount(canHold);
+            // Call legacy event
+            org.bukkit.event.player.PlayerPickupItemEvent playerEvent = new org.bukkit.event.player.PlayerPickupItemEvent((org.bukkit.entity.Player) p_32040_.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+            playerEvent.setCancelled(!playerEvent.getPlayer().getCanPickupItems());
+            this.level.getCraftServer().getPluginManager().callEvent(playerEvent);
+            if (playerEvent.isCancelled()) {
+               itemstack.setCount(i); // SPIGOT-5294 - restore count
+               return;
+            }
+
+            // Call newer event afterwards
+            org.bukkit.event.entity.EntityPickupItemEvent entityEvent = new org.bukkit.event.entity.EntityPickupItemEvent((org.bukkit.entity.Player) p_32040_.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+            entityEvent.setCancelled(!entityEvent.getEntity().getCanPickupItems());
+            this.level.getCraftServer().getPluginManager().callEvent(entityEvent);
+            if (entityEvent.isCancelled()) {
+               itemstack.setCount(i); // SPIGOT-5294 - restore count
+               return;
+            }
+
+            // Update the ItemStack if it was changed in the event
+            ItemStack current = this.getItem();
+            if (!itemstack.equals(current)) {
+               itemstack = current;
+            } else {
+               itemstack.setCount(canHold + remaining); // = i
+            }
+
+            // Possibly < 0; fix here so we do not have to modify code below
+            this.pickupDelay = 0;
+         } else if (this.pickupDelay == 0) {
+            // ensure that the code below isn't triggered if canHold says we can't pick the items up
+            this.pickupDelay = -1;
+         }
+         // CraftBukkit end
+
+         int hook = net.minecraftforge.event.ForgeEventFactory.onItemPickup(this, p_32040_);
+         if (hook < 0) return;
+
+         ItemStack copy = itemstack.copy();
+
+         if (this.pickupDelay == 0 && (this.owner == null || lifespan - this.age <= 200 || this.owner.equals(p_32040_.getUUID())) && (hook == 1 || i <= 0 || p_32040_.getInventory().add(itemstack))) {
+            copy.setCount(copy.getCount() - getItem().getCount());
+            net.minecraftforge.event.ForgeEventFactory.firePlayerItemPickupEvent(p_32040_, this, copy);
             p_32040_.take(this, i);
             if (itemstack.isEmpty()) {
                this.discard();
@@ -328,8 +_,8 @@
    }
 
    @Nullable
-   public Entity changeDimension(ServerLevel p_32042_) {
-      Entity entity = super.changeDimension(p_32042_);
+   public Entity changeDimension(ServerLevel p_32042_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      Entity entity = super.changeDimension(p_32042_, teleporter);
       if (!this.level.isClientSide && entity instanceof ItemEntity) {
          ((ItemEntity)entity).mergeWithNeighbours();
       }
@@ -342,7 +_,9 @@
    }
 
    public void setItem(ItemStack p_32046_) {
+      //com.google.common.base.Preconditions.checkArgument(!p_32046_.isEmpty(), "Cannot drop air"); // CraftBukkit //Magma - removed
       this.getEntityData().set(DATA_ITEM, p_32046_);
+      this.getEntityData().markDirty(DATA_ITEM); // CraftBukkit - SPIGOT-4591, must mark dirty
    }
 
    public void onSyncedDataUpdated(EntityDataAccessor<?> p_32036_) {
@@ -405,7 +_,7 @@
 
    public void makeFakeItem() {
       this.setNeverPickUp();
-      this.age = 5999;
+      this.age = level.spigotConfig.itemDespawnRate - 1; // Spigot
    }
 
    public float getSpin(float p_32009_) {
