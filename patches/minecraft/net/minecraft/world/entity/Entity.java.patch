--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -116,7 +_,54 @@
 import net.minecraft.world.scores.Team;
 import org.slf4j.Logger;
 
-public abstract class Entity implements Nameable, EntityAccess, CommandSource {
+
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements Nameable, EntityAccess, CommandSource, net.minecraftforge.common.extensions.IForgeEntity {
+
+   // CraftBukkit start
+   private static final int CURRENT_LEVEL = 2;
+   static boolean isLevelAtLeast(CompoundTag tag, int level) {
+      return tag.contains("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
+   }
+
+   private org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity bukkitEntity;
+
+   public org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity getBukkitEntity() {
+      if (bukkitEntity == null) {
+         bukkitEntity = org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity.getEntity(level.getCraftServer(), this);
+      }
+      return bukkitEntity;
+   }
+
+   //Magma start - make it possible to reset the entity
+   public void resetBukkitEntity() {
+      org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity temp = getBukkitEntity();
+
+      this.bukkitEntity = null;
+      getBukkitEntity();
+
+      if (bukkitEntity instanceof org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer player)
+         player.setFirstPlayed(((org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer) temp).getFirstPlayed());
+
+      if (bukkitEntity instanceof org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity human) //Keep perms on reset
+         human.setPerm(((org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity) temp).getPerm());
+   }
+
+   public void setBukkitEntity(org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity bukkitEntity) {
+      this.bukkitEntity = bukkitEntity;
+   }
+   //Magma end
+
+   @Override
+   public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return getBukkitEntity();
+   }
+
+   // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+   public int getDefaultMaxAirSupply() {
+      return TOTAL_AIR_SUPPLY;
+   }
+   // CraftBukkit end
+
    private static final Logger LOGGER = LogUtils.getLogger();
    public static final String ID_TAG = "id";
    public static final String PASSENGERS_TAG = "Passengers";
@@ -135,6 +_,7 @@
    private static final double LAVA_SLOW_FLOW_SCALE = 0.0023333333333333335D;
    public static final String UUID_TAG = "UUID";
    private static double viewScale = 1.0D;
+   @Deprecated // Forge: Use the getter to allow overriding in mods
    private final EntityType<?> type;
    private int id = ENTITY_COUNTER.incrementAndGet();
    public boolean blocksBuilding;
@@ -175,12 +_,13 @@
    public double xOld;
    public double yOld;
    public double zOld;
+   @Deprecated // Forge - see IForgeEntity#getStepHeight
    public float maxUpStep;
    public boolean noPhysics;
    protected final Random random = new Random();
    public int tickCount;
    public int remainingFireTicks = -this.getFireImmuneTicks();
-   protected boolean wasTouchingWater;
+   public boolean wasTouchingWater;
    protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
    protected boolean wasEyeInWater;
    private final Set<TagKey<Fluid>> fluidOnEyes = new HashSet<>();
@@ -228,7 +_,40 @@
    @Nullable
    private BlockState feetBlockState = null;
 
+   // CraftBukkit start
+   public boolean persist = true;
+   public boolean valid;
+   public boolean generation;
+   public int maxAirTicks = getDefaultMaxAirSupply(); // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+   public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+   public boolean lastDamageCancelled; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+   public boolean persistentInvisibility = false;
+   public BlockPos lastLavaContact;
+
+   // Spigot start
+   public final org.spigotmc.ActivationRange.ActivationType activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+   public final boolean defaultActivationState;
+   public long activatedTick = Integer.MIN_VALUE;
+   public void inactiveTick() { }
+   // Spigot end
+
+
+   public float getBukkitYaw() {
+      return this.yRot;
+   }
+
+   public boolean isChunkLoaded() {
+      return level.hasChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4);
+   }
+   // CraftBukkit end
+
+   //Magma start - add entity spawn reason in the entity class
+   public org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason = org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT;
+   //Magma end
+
+
    public Entity(EntityType<?> p_19870_, Level p_19871_) {
+      super(Entity.class);
       this.type = p_19870_;
       this.level = p_19871_;
       this.dimensions = p_19870_.getDimensions();
@@ -236,6 +_,13 @@
       this.blockPosition = BlockPos.ZERO;
       this.chunkPosition = ChunkPos.ZERO;
       this.packetCoordinates = Vec3.ZERO;
+      // Spigot start
+      if (level != null) {
+         this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, level.spigotConfig);
+      } else {
+         this.defaultActivationState = false;
+      }
+      // Spigot end
       this.entityData = new SynchedEntityData(this);
       this.entityData.define(DATA_SHARED_FLAGS_ID, (byte)0);
       this.entityData.define(DATA_AIR_SUPPLY_ID, this.getMaxAirSupply());
@@ -247,7 +_,11 @@
       this.entityData.define(DATA_TICKS_FROZEN, 0);
       this.defineSynchedData();
       this.setPos(0.0D, 0.0D, 0.0D);
-      this.eyeHeight = this.getEyeHeight(Pose.STANDING, this.dimensions);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, Pose.STANDING, this.dimensions, this.getEyeHeight(Pose.STANDING, this.dimensions));
+      this.dimensions = sizeEvent.getNewSize();
+      this.eyeHeight = sizeEvent.getNewEyeHeight();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EntityConstructing(this));
+      this.gatherCapabilities();
    }
 
    public boolean isColliding(BlockPos p_20040_, BlockState p_20041_) {
@@ -343,6 +_,7 @@
       if (p_146834_ == Entity.RemovalReason.KILLED) {
          this.gameEvent(GameEvent.ENTITY_KILLED);
       }
+      this.invalidateCaps();
 
    }
 
@@ -350,6 +_,23 @@
    }
 
    public void setPose(Pose p_20125_) {
+      // CraftBukkit start
+      if (p_20125_ == this.getPose()) {
+         return;
+      }
+
+      //Magma start - fix IndexOutOfBoundsException
+      org.bukkit.entity.Pose pose;
+      try {
+         pose = org.bukkit.entity.Pose.values()[p_20125_.ordinal()];
+      } catch (IndexOutOfBoundsException ignored) {
+         pose = org.bukkit.entity.Pose.MODDED;
+      }
+
+      this.level.getCraftServer().getPluginManager().callEvent(new org.bukkit.event.entity.EntityPoseChangeEvent(this.getBukkitEntity(), pose));
+      //Magma end
+
+      // CraftBukkit end
       this.entityData.set(DATA_POSE, p_20125_);
    }
 
@@ -365,6 +_,33 @@
    }
 
    protected void setRot(float p_19916_, float p_19917_) {
+      // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_19916_)) {
+         p_19916_ = 0;
+      }
+      
+      if (p_19916_ == Float.POSITIVE_INFINITY || p_19916_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayer) {
+            this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid yaw");
+            ((org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)");
+         }
+         p_19916_ = 0;
+      }
+      
+      // pitch was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_19917_)) {
+         p_19917_ = 0;
+      }
+      
+      if (p_19917_ == Float.POSITIVE_INFINITY || p_19917_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayer) {
+            this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid pitch");
+            ((org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite pitch (Hacking?)");
+         }
+         p_19917_ = 0;
+      }
+      // CraftBukkit end
+      
       this.setYRot(p_19916_ % 360.0F);
       this.setXRot(p_19917_ % 360.0F);
    }
@@ -405,6 +_,15 @@
       this.baseTick();
    }
 
+   // CraftBukkit start
+   public void postTick() {
+      // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+      if (!(this instanceof ServerPlayer)) {
+         this.handleNetherPortal();
+      }
+   }
+   // CraftBukkit end
+
    public void baseTick() {
       this.level.getProfiler().push("entityBaseTick");
       this.feetBlockState = null;
@@ -419,7 +_,7 @@
       this.walkDistO = this.walkDist;
       this.xRotO = this.getXRot();
       this.yRotO = this.getYRot();
-      this.handleNetherPortal();
+      if (this instanceof ServerPlayer) this.handleNetherPortal(); // CraftBukkit - // Moved up to postTick
       if (this.canSpawnSprintParticle()) {
          this.spawnSprintParticle();
       }
@@ -454,6 +_,10 @@
       if (this.isInLava()) {
          this.lavaHurt();
          this.fallDistance *= 0.5F;
+         // CraftBukkit start
+      } else {
+         this.lastLavaContact = null;
+         // CraftBukkit end
       }
 
       this.checkOutOfWorld();
@@ -497,15 +_,45 @@
 
    public void lavaHurt() {
       if (!this.fireImmune()) {
-         this.setSecondsOnFire(15);
+         // CraftBukkit start - Fallen in lava TODO: this event spams!
+         if (this instanceof LivingEntity && remainingFireTicks <= 0) {
+            // not on fire yet
+            org.bukkit.block.Block damager = (lastLavaContact == null) ? null : org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(level, lastLavaContact);
+            org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+            org.bukkit.event.entity.EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+            this.level.getCraftServer().getPluginManager().callEvent(combustEvent);
+            if (!combustEvent.isCancelled()) {
+               this.setSecondsOnFire(combustEvent.getDuration(), false);
+            }
+         } else {
+            // This will be called every single tick the entity is in lava, so don't throw an event
+            this.setSecondsOnFire(15, false);
+         }
+         org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.blockDamage = (lastLavaContact) == null ? null : org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(level, lastLavaContact);
          if (this.hurt(DamageSource.LAVA, 4.0F)) {
             this.playSound(SoundEvents.GENERIC_BURN, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
          }
+         org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.blockDamage = null;
+         // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
 
       }
    }
 
    public void setSecondsOnFire(int p_20255_) {
+      // CraftBukkit start
+      this.setSecondsOnFire(p_20255_, true);
+   }
+
+   public void setSecondsOnFire(int p_20255_, boolean callEvent) {
+      if (callEvent) {
+         org.bukkit.event.entity.EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustEvent(this.getBukkitEntity(), p_20255_);
+         this.level.getCraftServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         p_20255_ = event.getDuration();
+      }
+      // CraftBukkit end
       int i = p_20255_ * 20;
       if (this instanceof LivingEntity) {
          i = ProtectionEnchantment.getFireAfterDampener((LivingEntity)this, i);
@@ -612,6 +_,28 @@
                block.updateEntityAfterFallOn(this.level, this);
             }
 
+            // CraftBukkit start
+            if (horizontalCollision && getBukkitEntity() instanceof org.bukkit.entity.Vehicle) {
+               org.bukkit.entity.Vehicle vehicle = (org.bukkit.entity.Vehicle) this.getBukkitEntity();
+               org.bukkit.block.Block bl = this.level.getWorld().getBlockAt(Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ()));
+              
+               if (p_19974_.x > vec3.x) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.EAST);
+               } else if (p_19974_.x < vec3.x) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.WEST);
+               } else if (p_19974_.z > vec3.z) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.SOUTH);
+               } else if (p_19974_.z < vec3.z) {
+                  bl = bl.getRelative(org.bukkit.block.BlockFace.NORTH);
+               }
+               
+               if (!bl.getType().isAir()) {
+                  org.bukkit.event.vehicle.VehicleBlockCollisionEvent event = new org.bukkit.event.vehicle.VehicleBlockCollisionEvent(vehicle, bl);
+                  level.getCraftServer().getPluginManager().callEvent(event);
+               }
+            }
+            // CraftBukkit end
+
             if (this.onGround && !this.isSteppingCarefully()) {
                block.stepOn(this.level, blockpos, blockstate, this);
             }
@@ -621,12 +_,12 @@
                double d1 = vec3.x;
                double d2 = vec3.y;
                double d3 = vec3.z;
-               this.flyDist += (float)(vec3.length() * 0.6D);
+               this.flyDist = (float) ((double) this.flyDist + vec3.length() * 0.6D);
                if (!blockstate.is(BlockTags.CLIMBABLE) && !blockstate.is(Blocks.POWDER_SNOW)) {
                   d2 = 0.0D;
                }
 
-               this.walkDist += (float)vec3.horizontalDistance() * 0.6F;
+               this.walkDist += (float) vec3.horizontalDistance() * 0.6F;
                this.moveDist += (float)Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3) * 0.6F;
                if (this.moveDist > this.nextStep && !blockstate.isAir()) {
                   this.nextStep = this.nextStep();
@@ -659,25 +_,23 @@
 
             this.tryCheckInsideBlocks();
             float f2 = this.getBlockSpeedFactor();
-            this.setDeltaMovement(this.getDeltaMovement().multiply((double)f2, 1.0D, (double)f2));
-            if (this.level.getBlockStatesIfLoaded(this.getBoundingBox().deflate(1.0E-6D)).noneMatch((p_20127_) -> {
-               return p_20127_.is(BlockTags.FIRE) || p_20127_.is(Blocks.LAVA);
-            })) {
-               if (this.remainingFireTicks <= 0) {
-                  this.setRemainingFireTicks(-this.getFireImmuneTicks());
-               }
-
-               if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
-                  this.playEntityOnFireExtinguishedSound();
-               }
-            }
-
-            if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+            this.setDeltaMovement(this.getDeltaMovement().multiply((double) f2, 1.0D, (double) f2));
+         }
+         if (this.level.getBlockStatesIfLoaded(this.getBoundingBox().deflate(1.0E-6D)).noneMatch((p_20127_) -> p_20127_.is(BlockTags.FIRE) || p_20127_.is(Blocks.LAVA))) {
+            if (this.remainingFireTicks <= 0) {
                this.setRemainingFireTicks(-this.getFireImmuneTicks());
             }
 
-            this.level.getProfiler().pop();
-         }
+            if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+               this.playEntityOnFireExtinguishedSound();
+            }
+         }
+
+         if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+            this.setRemainingFireTicks(-this.getFireImmuneTicks());
+         }
+
+         this.level.getProfiler().pop();
       }
    }
 
@@ -715,10 +_,10 @@
       int j = Mth.floor(this.position.y - (double)0.2F);
       int k = Mth.floor(this.position.z);
       BlockPos blockpos = new BlockPos(i, j, k);
-      if (this.level.getBlockState(blockpos).isAir()) {
+      if (this.level.isEmptyBlock(blockpos)) {
          BlockPos blockpos1 = blockpos.below();
          BlockState blockstate = this.level.getBlockState(blockpos1);
-         if (blockstate.is(BlockTags.FENCES) || blockstate.is(BlockTags.WALLS) || blockstate.getBlock() instanceof FenceGateBlock) {
+         if (blockstate.collisionExtendsVertically(this.level, blockpos1, this)) {
             return blockpos1;
          }
       }
@@ -791,10 +_,11 @@
       boolean flag1 = p_20273_.y != vec3.y;
       boolean flag2 = p_20273_.z != vec3.z;
       boolean flag3 = this.onGround || flag1 && p_20273_.y < 0.0D;
-      if (this.maxUpStep > 0.0F && flag3 && (flag || flag2)) {
-         Vec3 vec31 = collideBoundingBox(this, new Vec3(p_20273_.x, (double)this.maxUpStep, p_20273_.z), aabb, this.level, list);
-         Vec3 vec32 = collideBoundingBox(this, new Vec3(0.0D, (double)this.maxUpStep, 0.0D), aabb.expandTowards(p_20273_.x, 0.0D, p_20273_.z), this.level, list);
-         if (vec32.y < (double)this.maxUpStep) {
+      float stepHeight = getStepHeight();
+      if (stepHeight > 0.0F && flag3 && (flag || flag2)) {
+         Vec3 vec31 = collideBoundingBox(this, new Vec3(p_20273_.x, (double)stepHeight, p_20273_.z), aabb, this.level, list);
+         Vec3 vec32 = collideBoundingBox(this, new Vec3(0.0D, (double)stepHeight, 0.0D), aabb.expandTowards(p_20273_.x, 0.0D, p_20273_.z), this.level, list);
+         if (vec32.y < (double)stepHeight) {
             Vec3 vec33 = collideBoundingBox(this, new Vec3(p_20273_.x, 0.0D, p_20273_.z), aabb.move(vec32), this.level, list).add(vec32);
             if (vec33.horizontalDistanceSqr() > vec31.horizontalDistanceSqr()) {
                vec31 = vec33;
@@ -929,7 +_,7 @@
    protected void playStepSound(BlockPos p_20135_, BlockState p_20136_) {
       if (!p_20136_.getMaterial().isLiquid()) {
          BlockState blockstate = this.level.getBlockState(p_20135_.above());
-         SoundType soundtype = blockstate.is(BlockTags.INSIDE_STEP_SOUND_BLOCKS) ? blockstate.getSoundType() : p_20136_.getSoundType();
+         SoundType soundtype = blockstate.is(Blocks.SNOW) ? blockstate.getSoundType(level, p_20135_, this) : p_20136_.getSoundType(level, p_20135_, this);
          this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
       }
    }
@@ -1035,6 +_,8 @@
       return this.isInWater() || this.isInRain();
    }
 
+   @Deprecated public final boolean isInWaterOrRainOrBubble() { return isInWaterRainOrBubble(); } // Paper - OBFHELPER
+
    public boolean isInWaterRainOrBubble() {
       return this.isInWater() || this.isInRain() || this.isInBubbleColumn();
    }
@@ -1144,9 +_,10 @@
       int k = Mth.floor(this.getZ());
       BlockPos blockpos = new BlockPos(i, j, k);
       BlockState blockstate = this.level.getBlockState(blockpos);
+      if(!blockstate.addRunningEffects(level, blockpos, this))
       if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
          Vec3 vec3 = this.getDeltaMovement();
-         this.level.addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate), this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, vec3.x * -4.0D, 1.5D, vec3.z * -4.0D);
+         this.level.addParticle(new BlockParticleOption(ParticleTypes.BLOCK, blockstate).setPos(blockpos), this.getX() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, this.getY() + 0.1D, this.getZ() + (this.random.nextDouble() - 0.5D) * (double)this.dimensions.width, vec3.x * -4.0D, 1.5D, vec3.z * -4.0D);
       }
 
    }
@@ -1195,6 +_,7 @@
       this.yo = p_20250_;
       this.zo = d1;
       this.setPos(d0, p_20250_, d1);
+      if (valid) level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
    }
 
    public void moveTo(Vec3 p_20220_) {
@@ -1376,6 +_,12 @@
       return false;
    }
 
+   // CraftBukkit start - collidable API
+   public boolean canCollideWithBukkit(Entity entity) {
+      return isPushable();
+   }
+   // CraftBukkit end
+
    public void awardKillScore(Entity p_19953_, int p_19954_, DamageSource p_19955_) {
       if (p_19953_ instanceof ServerPlayer) {
          CriteriaTriggers.ENTITY_KILLED_PLAYER.trigger((ServerPlayer)p_19953_, this, p_19955_);
@@ -1406,7 +_,7 @@
          return false;
       } else {
          String s = this.getEncodeId();
-         if (s == null) {
+         if (!this.persist || s == null) { // CraftBukkit - persist flag
             return false;
          } else {
             p_20087_.putString("id", s);
@@ -1430,6 +_,18 @@
 
          Vec3 vec3 = this.getDeltaMovement();
          p_20241_.put("Motion", this.newDoubleList(vec3.x, vec3.y, vec3.z));
+
+         // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+         // TODO: make sure this is the best way to address this.
+         if (Float.isNaN(this.yRot)) {
+            this.yRot = 0;
+         }
+
+         if (Float.isNaN(this.xRot)) {
+            this.xRot = 0;
+         }
+         // CraftBukkit end
+
          p_20241_.put("Rotation", this.newFloatList(this.getYRot(), this.getXRot()));
          p_20241_.putFloat("FallDistance", this.fallDistance);
          p_20241_.putShort("Fire", (short)this.remainingFireTicks);
@@ -1438,6 +_,25 @@
          p_20241_.putBoolean("Invulnerable", this.invulnerable);
          p_20241_.putInt("PortalCooldown", this.portalCooldown);
          p_20241_.putUUID("UUID", this.getUUID());
+
+         // CraftBukkit start
+         // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+         p_20241_.putLong("WorldUUIDLeast", ((ServerLevel) this.level).getWorld().getUID().getLeastSignificantBits());
+         p_20241_.putLong("WorldUUIDMost", ((ServerLevel) this.level).getWorld().getUID().getMostSignificantBits());
+         p_20241_.putInt("Bukkit.updateLevel", CURRENT_LEVEL);
+         if (!this.persist) {
+            p_20241_.putBoolean("Bukkit.persist", this.persist);
+         }
+         if (this.persistentInvisibility) {
+            p_20241_.putBoolean("Bukkit.invisible", this.persistentInvisibility);
+         }
+         // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+         if (maxAirTicks != getDefaultMaxAirSupply()) {
+            p_20241_.putInt("Bukkit.MaxAirSupply", getMaxAirSupply());
+         }
+         p_20241_.putInt("Spigot.ticksLived", this.tickCount);
+         // CraftBukkit end
+
          Component component = this.getCustomName();
          if (component != null) {
             p_20241_.putString("CustomName", Component.Serializer.toJson(component));
@@ -1467,6 +_,7 @@
          if (this.hasVisualFire) {
             p_20241_.putBoolean("HasVisualFire", this.hasVisualFire);
          }
+         p_20241_.putBoolean("CanUpdate", canUpdate);
 
          if (!this.tags.isEmpty()) {
             ListTag listtag = new ListTag();
@@ -1478,6 +_,10 @@
             p_20241_.put("Tags", listtag);
          }
 
+         CompoundTag caps = serializeCaps();
+         if (caps != null) p_20241_.put("ForgeCaps", caps);
+         if (persistentData != null) p_20241_.put("ForgeData", persistentData.copy());
+
          this.addAdditionalSaveData(p_20241_);
          if (this.isVehicle()) {
             ListTag listtag1 = new ListTag();
@@ -1494,6 +_,11 @@
             }
          }
 
+         // CraftBukkit start - stores eventually existing bukkit values
+         if (this.bukkitEntity != null) {
+            this.bukkitEntity.storeBukkitValues(p_20241_);
+         }
+         // CraftBukkit end
          return p_20241_;
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -1552,6 +_,9 @@
                this.setGlowingTag(p_20259_.getBoolean("Glowing"));
                this.setTicksFrozen(p_20259_.getInt("TicksFrozen"));
                this.hasVisualFire = p_20259_.getBoolean("HasVisualFire");
+               if (p_20259_.contains("ForgeData", 10)) persistentData = p_20259_.getCompound("ForgeData");
+               if (p_20259_.contains("CanUpdate", 99)) this.canUpdate(p_20259_.getBoolean("CanUpdate"));
+               if (p_20259_.contains("ForgeCaps", 10)) deserializeCaps(p_20259_.getCompound("ForgeCaps"));
                if (p_20259_.contains("Tags", 9)) {
                   this.tags.clear();
                   ListTag listtag3 = p_20259_.getList("Tags", 8);
@@ -1573,6 +_,49 @@
          } else {
             throw new IllegalStateException("Entity has invalid position");
          }
+
+         // CraftBukkit start
+         // Spigot start
+         if (this instanceof LivingEntity) {
+            this.tickCount = p_20259_.getInt("Spigot.ticksLived");
+         }
+         // Spigot end
+         this.persist = !p_20259_.contains("Bukkit.persist") || p_20259_.getBoolean("Bukkit.persist");
+         // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+         if (p_20259_.contains("Bukkit.MaxAirSupply")) {
+            maxAirTicks = p_20259_.getInt("Bukkit.MaxAirSupply");
+         }
+         // CraftBukkit end
+
+         // CraftBukkit start - Reset world
+         if (this instanceof ServerPlayer) {
+            org.bukkit.Server server = org.bukkit.Bukkit.getServer();
+            org.bukkit.World bworld = null;
+
+            // TODO: Remove World related checks, replaced with WorldUID
+            String worldName = p_20259_.getString("world");
+
+            if (p_20259_.contains("WorldUUIDMost") && p_20259_.contains("WorldUUIDLeast")) {
+               UUID uid = new UUID(p_20259_.getLong("WorldUUIDMost"), p_20259_.getLong("WorldUUIDLeast"));
+               bworld = server.getWorld(uid);
+            } else {
+               bworld = server.getWorld(worldName);
+            }
+
+            if (bworld == null) {
+               bworld = ((org.bukkit.craftbukkit.v1_18_R2.CraftServer) server).getServer().getLevel(Level.OVERWORLD).getWorld();
+            }
+
+            ((ServerPlayer) this).setLevel(bworld == null ? null : ((org.bukkit.craftbukkit.v1_18_R2.CraftWorld) bworld).getHandle());
+         }
+         this.getBukkitEntity().readBukkitValues(p_20259_);
+         if (p_20259_.contains("Bukkit.invisible")) {
+            boolean bukkitInvisible = p_20259_.getBoolean("Bukkit.invisible");
+            this.setInvisible(bukkitInvisible);
+            this.persistentInvisibility = bukkitInvisible;
+         }
+         // CraftBukkit end
+
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
          CrashReportCategory crashreportcategory = crashreport.addCategory("Entity being loaded");
@@ -1640,7 +_,19 @@
       } else {
          ItemEntity itementity = new ItemEntity(this.level, this.getX(), this.getY() + (double)p_19986_, this.getZ(), p_19985_);
          itementity.setDefaultPickUpDelay();
-         this.level.addFreshEntity(itementity);
+         // CraftBukkit start
+         org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+         org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return null;
+         }
+         // CraftBukkit end
+
+         if (captureDrops() != null) {
+            captureDrops().add(itementity);
+         } else {
+            this.level.addFreshEntity(itementity);
+         }
          return itementity;
       }
    }
@@ -1676,6 +_,7 @@
 
    public void rideTick() {
       this.setDeltaMovement(Vec3.ZERO);
+      if (canUpdate())
       this.tick();
       if (this.isPassenger()) {
          this.getVehicle().positionRider(this);
@@ -1722,6 +_,7 @@
             }
          }
 
+      if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, p_19966_, true)) return false;
          if (p_19967_ || this.canRide(p_19966_) && p_19966_.canAddPassenger(this)) {
             if (this.isPassenger()) {
                this.stopRiding();
@@ -1729,7 +_,7 @@
 
             this.setPose(Pose.STANDING);
             this.vehicle = p_19966_;
-            this.vehicle.addPassenger(this);
+            if (!this.vehicle.addPassenger(this)) this.vehicle = null; // CraftBukkit
             p_19966_.getIndirectPassengersStream().filter((p_185984_) -> {
                return p_185984_ instanceof ServerPlayer;
             }).forEach((p_185982_) -> {
@@ -1760,8 +_,9 @@
    public void removeVehicle() {
       if (this.vehicle != null) {
          Entity entity = this.vehicle;
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
          this.vehicle = null;
-         entity.removePassenger(this);
+         if (!entity.removePassenger(this)) this.vehicle = entity; // CraftBukkit
       }
 
    }
@@ -1770,10 +_,43 @@
       this.removeVehicle();
    }
 
-   protected void addPassenger(Entity p_20349_) {
+   protected boolean addPassenger(Entity p_20349_) { // CraftBukkit - void -> boolean
       if (p_20349_.getVehicle() != this) {
          throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
       } else {
+
+         // CraftBukkit start
+         com.google.common.base.Preconditions.checkState(!p_20349_.passengers.contains(this), "Circular entity riding! %s %s", this, p_20349_);
+         org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity craft = (org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity) p_20349_.getBukkitEntity().getVehicle();
+         Entity orig = craft == null ? null : craft.getHandle();
+         if (getBukkitEntity() instanceof org.bukkit.entity.Vehicle && p_20349_.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+            org.bukkit.event.vehicle.VehicleEnterEvent event = new org.bukkit.event.vehicle.VehicleEnterEvent(
+                    (org.bukkit.entity.Vehicle) getBukkitEntity(),
+                    p_20349_.getBukkitEntity()
+            );
+            // Suppress during worldgen
+            if (this.valid) {
+               org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            }
+            org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity craftn = (org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity) p_20349_.getBukkitEntity().getVehicle();
+            Entity n = craftn == null ? null : craftn.getHandle();
+            if (event.isCancelled() || n != orig) {
+               return false;
+            }
+         }
+         // CraftBukkit end
+
+         // Spigot start
+         org.spigotmc.event.entity.EntityMountEvent event = new org.spigotmc.event.entity.EntityMountEvent(p_20349_.getBukkitEntity(), this.getBukkitEntity());
+         // Suppress during worldgen
+         if (this.valid) {
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         }
+         if (event.isCancelled()) {
+            return false;
+         }
+         // Spigot end
+
          if (this.passengers.isEmpty()) {
             this.passengers = ImmutableList.of(p_20349_);
          } else {
@@ -1788,12 +_,42 @@
          }
 
       }
+      return true; // CraftBukkit
    }
 
-   protected void removePassenger(Entity p_20352_) {
+   protected boolean removePassenger(Entity p_20352_) { // CraftBukkit - void -> boolean
       if (p_20352_.getVehicle() == this) {
          throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
       } else {
+         // CraftBukkit start
+         org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity craft = (org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity) p_20352_.getBukkitEntity().getVehicle();
+         Entity orig = craft == null ? null : craft.getHandle();
+         if (getBukkitEntity() instanceof org.bukkit.entity.Vehicle && p_20352_.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+            org.bukkit.event.vehicle.VehicleExitEvent event = new org.bukkit.event.vehicle.VehicleExitEvent(
+                    (org.bukkit.entity.Vehicle) getBukkitEntity(),
+                    (org.bukkit.entity.LivingEntity) p_20352_.getBukkitEntity()
+            );
+            // Suppress during worldgen
+            if (this.valid) {
+               org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            }
+            org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity craftn = (org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity) p_20352_.getBukkitEntity().getVehicle();
+            Entity n = craftn == null ? null : craftn.getHandle();
+            if (event.isCancelled() || n != orig) {
+               return false;
+            }
+         }
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(p_20352_.getBukkitEntity(), this.getBukkitEntity());
+         // Suppress during worldgen
+         if (this.valid) {
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         }
+         if (event.isCancelled()) {
+            return false;
+         }
+         // Spigot end
          if (this.passengers.size() == 1 && this.passengers.get(0) == p_20352_) {
             this.passengers = ImmutableList.of();
          } else {
@@ -1804,6 +_,7 @@
 
          p_20352_.boardingCooldown = 60;
       }
+      return true; // CraftBukkit
    }
 
    protected boolean canAddPassenger(Entity p_20354_) {
@@ -1870,7 +_,13 @@
                this.level.getProfiler().push("portal");
                this.portalTime = i;
                this.setPortalCooldown();
-               this.changeDimension(serverlevel1);
+               // CraftBukkit start
+               if (this instanceof ServerPlayer) {
+                  ((ServerPlayer) this).changeDimension(serverlevel1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.NETHER_PORTAL);
+               } else {
+                  this.changeDimension(serverlevel1);
+               }
+               // CraftBukkit end
                this.level.getProfiler().pop();
             }
 
@@ -1936,6 +_,7 @@
       return !this.passengers.isEmpty();
    }
 
+   @Deprecated //Forge: Use rider sensitive version
    public boolean rideableUnderWater() {
       return true;
    }
@@ -1989,6 +_,13 @@
    }
 
    public void setSwimming(boolean p_20283_) {
+      // CraftBukkit start
+      if (valid && this.isSwimming() != p_20283_ && this instanceof LivingEntity) {
+         if (org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callToggleSwimEvent((LivingEntity) this, p_20283_).isCancelled()) {
+            return;
+         }
+      }
+      // CraftBukkit end
       this.setSharedFlag(4, p_20283_);
    }
 
@@ -2036,8 +_,12 @@
       return this.getTeam() != null ? this.getTeam().isAlliedTo(p_20032_) : false;
    }
 
+   // CraftBukkit - start
    public void setInvisible(boolean p_20304_) {
-      this.setSharedFlag(5, p_20304_);
+      if (!this.persistentInvisibility) { // Prevent Minecraft from removing our invisibility flag
+         this.setSharedFlag(5, p_20304_);
+      }
+      // CraftBukkit - end
    }
 
    public boolean getSharedFlag(int p_20292_) {
@@ -2055,7 +_,7 @@
    }
 
    public int getMaxAirSupply() {
-      return 300;
+      return maxAirTicks; // CraftBukkit - SPIGOT-6907: re-implement org.bukkit.entity.LivingEntity#setMaximumAir()
    }
 
    public int getAirSupply() {
@@ -2063,7 +_,18 @@
    }
 
    public void setAirSupply(int p_20302_) {
-      this.entityData.set(DATA_AIR_SUPPLY_ID, p_20302_);
+      // CraftBukkit start
+      org.bukkit.event.entity.EntityAirChangeEvent event = new org.bukkit.event.entity.EntityAirChangeEvent(this.getBukkitEntity(), p_20302_);
+      // Suppress during worldgen
+      if (this.valid) {
+         event.getEntity().getServer().getPluginManager().callEvent(event);
+      }
+      if (event.isCancelled() && this.getAirSupply() != p_20302_) {
+         this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
+         return;
+      }
+      this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
+      // CraftBukkit end
    }
 
    public int getTicksFrozen() {
@@ -2089,11 +_,39 @@
 
    public void thunderHit(ServerLevel p_19927_, LightningBolt p_19928_) {
       this.setRemainingFireTicks(this.remainingFireTicks + 1);
+      // CraftBukkit start
+      final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+      final org.bukkit.entity.Entity stormBukkitEntity = p_19928_.getBukkitEntity();
+      final org.bukkit.plugin.PluginManager pluginManager = org.bukkit.Bukkit.getPluginManager();
+      // CraftBukkit end
+
       if (this.remainingFireTicks == 0) {
-         this.setSecondsOnFire(8);
+         // CraftBukkit start - Call a combust event when lightning strikes
+         org.bukkit.event.entity.EntityCombustByEntityEvent entityCombustEvent = new org.bukkit.event.entity.EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+         pluginManager.callEvent(entityCombustEvent);
+         if (!entityCombustEvent.isCancelled()) {
+            this.setSecondsOnFire(entityCombustEvent.getDuration(), false);
+         }
+         // CraftBukkit end
+      }
+      // CraftBukkit start
+      if (thisBukkitEntity instanceof org.bukkit.entity.Hanging) {
+         org.bukkit.event.hanging.HangingBreakByEntityEvent hangingEvent = new org.bukkit.event.hanging.HangingBreakByEntityEvent((org.bukkit.entity.Hanging) thisBukkitEntity, stormBukkitEntity);
+         pluginManager.callEvent(hangingEvent);
+         if (hangingEvent.isCancelled()) {
+            return;
+         }
       }
 
-      this.hurt(DamageSource.LIGHTNING_BOLT, 5.0F);
+      if (this.fireImmune()) {
+         return;
+      }
+      org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.entityDamage = p_19928_;
+      if (!this.hurt(DamageSource.LIGHTNING_BOLT, 5.0F)) {
+         org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.entityDamage = null;
+         return;
+      }
+      // CraftBukkit end
    }
 
    public void onAboveBubbleCol(boolean p_20313_) {
@@ -2181,7 +_,7 @@
    }
 
    protected Component getTypeName() {
-      return this.type.getDescription();
+      return this.getType().getDescription(); // Forge: Use getter to allow overriding by mods
    }
 
    public boolean is(Entity p_20356_) {
@@ -2237,37 +_,87 @@
 
    @Nullable
    public Entity changeDimension(ServerLevel p_20118_) {
+      return this.changeDimension(p_20118_, p_20118_.getPortalForcer());
+   }
+
+   //Magma start - fix mixin inject
+   private @Nullable BlockPos changeDimension_blockpos;
+   @Nullable
+   public Entity changeDimension(ServerLevel p_20118_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      BlockPos blockPos = this.changeDimension_blockpos;
+      this.changeDimension_blockpos = null;
+      if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, p_20118_.dimension())) return null;
+      java.util.concurrent.atomic.AtomicReference<ServerLevel> serverLevel = new java.util.concurrent.atomic.AtomicReference<>( p_20118_ );
       if (this.level instanceof ServerLevel && !this.isRemoved()) {
          this.level.getProfiler().push("changeDimension");
-         this.unRide();
+         //this.unRide();
+         // CraftBukkit start
+         if (serverLevel.get() == null) {
+            return null;
+         }
+         // CraftBukkit end
          this.level.getProfiler().push("reposition");
-         PortalInfo portalinfo = this.findDimensionEntryPoint(p_20118_);
-         if (portalinfo == null) {
-            return null;
-         } else {
+         PortalInfo portalinfo = (blockPos == null) ? teleporter.getPortalInfo( this, serverLevel.get(), this::findDimensionEntryPoint ) :
+                 new PortalInfo( new Vec3( blockPos.getX(), blockPos.getY(), blockPos.getZ() ), Vec3.ZERO, this.xRot, this.xRot );
+         if(portalinfo == null) return null; //Magma - fix dead entites
+         portalinfo.setCBPortalEvent(serverLevel.get(), null);
+         //CraftBukkit start
+         serverLevel.set( portalinfo.world );
+         if (serverLevel.get() == level) {
+            //SPIGOT-6782: Just move the entity if a plugin changed the world to the one the entity is already in
+            moveTo( portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, portalinfo.xRot );
+            setDeltaMovement( portalinfo.speed );
+            return this;
+         }
+         this.unRide();
+         // CraftBukkit end
+
+         Entity transportedEntity = teleporter.placeEntity( this, (ServerLevel) this.level, serverLevel.get(), this.yRot, spawnPortal -> { //Forge: Start vanilla logic
             this.level.getProfiler().popPush("reloading");
-            Entity entity = this.getType().create(p_20118_);
+            Entity entity = this.getType().create( serverLevel.get() );
             if (entity != null) {
                entity.restoreFrom(this);
                entity.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, entity.getXRot());
                entity.setDeltaMovement(portalinfo.speed);
-               p_20118_.addDuringTeleport(entity);
-               if (p_20118_.dimension() == Level.END) {
-                  ServerLevel.makeObsidianPlatform(p_20118_);
+               serverLevel.get().addDuringTeleport( entity );
+               if (spawnPortal && serverLevel.get().dimension() == Level.END) {
+                  ServerLevel.makeObsidianPlatform( serverLevel.get(), this );
                }
-            }
+               // CraftBukkit start - Forward the org.bukkit.craftbukkit.v1_18_R2.entity.CraftEntity to the new entity
+               this.getBukkitEntity().setHandle( entity );
+               entity.bukkitEntity = this.getBukkitEntity();
 
-            this.removeAfterChangingDimensions();
-            this.level.getProfiler().pop();
-            ((ServerLevel)this.level).resetEmptyTime();
-            p_20118_.resetEmptyTime();
-            this.level.getProfiler().pop();
+               if (this instanceof Mob) {
+                  ((Mob) this).dropLeash( true, false ); //Unleash to prevent duping of leads
+               }
+            }
             return entity;
-         }
+         }); //Forge: End vanilla logic
+
+         this.removeAfterChangingDimensions();
+         this.level.getProfiler().pop();
+         ((ServerLevel)this.level).resetEmptyTime();
+         serverLevel.get().resetEmptyTime();
+         this.level.getProfiler().pop();
+         return transportedEntity;
       } else {
          return null;
       }
    }
+   //Magma end
+
+   @Nullable
+   public Entity teleportTo(ServerLevel p_20118_, BlockPos blockPos) {
+      return this.teleportTo( p_20118_, blockPos, p_20118_.getPortalForcer() );
+   }
+
+   //Magma start - fix NPE when teleporting to the end with a null blockPos
+   @Nullable
+   public Entity teleportTo(ServerLevel p_20118_, BlockPos blockPos, net.minecraftforge.common.util.ITeleporter teleporter) {
+      this.changeDimension_blockpos = blockPos;
+      return this.changeDimension(p_20118_, teleporter);
+   }
+   //Magma end
 
    protected void removeAfterChangingDimensions() {
       this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION);
@@ -2275,17 +_,33 @@
 
    @Nullable
    protected PortalInfo findDimensionEntryPoint(ServerLevel p_19923_) {
+        java.util.concurrent.atomic.AtomicReference<ServerLevel> serverLevel = new java.util.concurrent.atomic.AtomicReference<>( p_19923_ );
+        // CraftBukkit start
+        if (serverLevel.get() == null) return null;
+
       boolean flag = this.level.dimension() == Level.END && p_19923_.dimension() == Level.OVERWORLD;
       boolean flag1 = p_19923_.dimension() == Level.END;
+        // CraftBukkit end
+
       if (!flag && !flag1) {
          boolean flag2 = p_19923_.dimension() == Level.NETHER;
          if (this.level.dimension() != Level.NETHER && !flag2) {
             return null;
          } else {
             WorldBorder worldborder = p_19923_.getWorldBorder();
-            double d0 = DimensionType.getTeleportationScale(this.level.dimensionType(), p_19923_.dimensionType());
+                double d0 = DimensionType.getTeleportationScale( this.level.dimensionType(), serverLevel.get().dimensionType() );
             BlockPos blockpos1 = worldborder.clampToBounds(this.getX() * d0, this.getY(), this.getZ() * d0);
-            return this.getExitPortal(p_19923_, blockpos1, flag2, worldborder).map((p_185941_) -> {
+                // CraftBukkit start
+                org.bukkit.craftbukkit.v1_18_R2.event.CraftPortalEvent event = callPortalEvent( this, serverLevel.get(), blockpos1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.NETHER_PORTAL, flag2 ? 16 : 128, 16 );
+                if (event == null) {
+                    return null;
+                }
+                serverLevel.set( ((org.bukkit.craftbukkit.v1_18_R2.CraftWorld) event.getTo().getWorld()).getHandle() );
+                worldborder = serverLevel.get().getWorldBorder();
+                blockpos1 = worldborder.clampToBounds( event.getTo().getX(), event.getTo().getY(), event.getTo().getZ() );
+
+                return this.getExitPortal( p_19923_, blockpos1, flag2, worldborder, event.getSearchRadius(), event.getCanCreatePortal(), event.getCreationRadius() ).map( (p_185941_) -> {
+                    // CraftBukkit end
                BlockState blockstate = this.level.getBlockState(this.portalEntrancePos);
                Direction.Axis direction$axis;
                Vec3 vec3;
@@ -2300,7 +_,7 @@
                   vec3 = new Vec3(0.5D, 0.0D, 0.0D);
                }
 
-               return PortalShape.createPortalInfo(p_19923_, p_185941_, direction$axis, vec3, this.getDimensions(this.getPose()), this.getDeltaMovement(), this.getYRot(), this.getXRot());
+                    return PortalShape.createPortalInfo( serverLevel.get(), p_185941_, direction$axis, vec3, this.getDimensions( this.getPose() ), this.getDeltaMovement(), this.getYRot(), this.getXRot(), event ); //CraftBukkit
             }).orElse((PortalInfo)null);
          }
       } else {
@@ -2311,7 +_,16 @@
             blockpos = p_19923_.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, p_19923_.getSharedSpawnPos());
          }
 
-         return new PortalInfo(new Vec3((double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D), this.getDeltaMovement(), this.getYRot(), this.getXRot());
+            //CraftBukkit start
+            org.bukkit.craftbukkit.v1_18_R2.event.CraftPortalEvent event = callPortalEvent( this, serverLevel.get(), blockpos, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.END_PORTAL, 0, 0 );
+            if (event == null) {
+                return null;
+            }
+            blockpos = new BlockPos( event.getTo().getX(), event.getTo().getY(), event.getTo().getZ() );
+
+            PortalInfo info = new PortalInfo( new Vec3( (double) blockpos.getX() + 0.5D, (double) blockpos.getY(), (double) blockpos.getZ() + 0.5D ), this.getDeltaMovement(), this.getYRot(), this.getXRot() );
+            info.setCBPortalEvent( p_19923_, event );
+            return info;
       }
    }
 
@@ -2319,6 +_,25 @@
       return PortalShape.getRelativePosition(p_20046_, p_20045_, this.position(), this.getDimensions(this.getPose()));
    }
 
+    // CraftBukkit start
+    protected org.bukkit.craftbukkit.v1_18_R2.event.CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitServerLevel, BlockPos exitPosition, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+        org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+        org.bukkit.Location enter = bukkitEntity.getLocation();
+        org.bukkit.Location exit = new org.bukkit.Location( exitServerLevel.getWorld(), exitPosition.getX(), exitPosition.getY(), exitPosition.getZ() );
+
+        org.bukkit.event.entity.EntityPortalEvent event = new org.bukkit.event.entity.EntityPortalEvent( bukkitEntity, enter, exit, searchRadius );
+        event.getEntity().getServer().getPluginManager().callEvent( event );
+        if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !entity.isAlive()) {
+            return null;
+        }
+        return new org.bukkit.craftbukkit.v1_18_R2.event.CraftPortalEvent( event );
+    }
+
+    protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel worldserver, BlockPos blockposition, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) {
+        return worldserver.getPortalForcer().findPortalAround( blockposition, worldborder, searchRadius );
+        // CraftBukkit end
+    }
+
    protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_185935_, BlockPos p_185936_, boolean p_185937_, WorldBorder p_185938_) {
       return p_185935_.getPortalForcer().findPortalAround(p_185936_, p_185937_, p_185938_);
    }
@@ -2463,8 +_,10 @@
       EntityDimensions entitydimensions = this.dimensions;
       Pose pose = this.getPose();
       EntityDimensions entitydimensions1 = this.getDimensions(pose);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, pose, entitydimensions, entitydimensions1, this.getEyeHeight(pose, entitydimensions1));
+      entitydimensions1 = sizeEvent.getNewSize();
       this.dimensions = entitydimensions1;
-      this.eyeHeight = this.getEyeHeight(pose, entitydimensions1);
+      this.eyeHeight = sizeEvent.getNewEyeHeight();
       this.reapplyPosition();
       boolean flag = (double)entitydimensions1.width <= 4.0D && (double)entitydimensions1.height <= 4.0D;
       if (!this.level.isClientSide && !this.firstTick && !this.noPhysics && flag && (entitydimensions1.width > entitydimensions.width || entitydimensions1.height > entitydimensions.height) && !(this instanceof Player)) {
@@ -2472,8 +_,9 @@
          double d0 = (double)Math.max(0.0F, entitydimensions1.width - entitydimensions.width) + 1.0E-6D;
          double d1 = (double)Math.max(0.0F, entitydimensions1.height - entitydimensions.height) + 1.0E-6D;
          VoxelShape voxelshape = Shapes.create(AABB.ofSize(vec3, d0, d1, d0));
+         EntityDimensions finalEntitydimensions = entitydimensions1;
          this.level.findFreePosition(this, voxelshape, vec3, (double)entitydimensions1.width, (double)entitydimensions1.height, (double)entitydimensions1.width).ifPresent((p_185956_) -> {
-            this.setPos(p_185956_.add(0.0D, (double)(-entitydimensions1.height) / 2.0D, 0.0D));
+            this.setPos(p_185956_.add(0.0D, (double)(-finalEntitydimensions.height) / 2.0D, 0.0D));
          });
       }
 
@@ -2512,7 +_,24 @@
    }
 
    public final void setBoundingBox(AABB p_20012_) {
-      this.bb = p_20012_;
+      // CraftBukkit start - block invalid bounding boxes
+      double minX = p_20012_.minX,
+              minY = p_20012_.minY,
+              minZ = p_20012_.minZ,
+              maxX = p_20012_.maxX,
+              maxY = p_20012_.maxY,
+              maxZ = p_20012_.maxZ;
+      double len = p_20012_.maxX - p_20012_.minX;
+      if (len < 0) maxX = minX;
+      if (len > 64) maxX = minX + 64.0;
+      len = p_20012_.maxY - p_20012_.minY;
+      if (len < 0) maxY = minY;
+      if (len > 64) maxY = minY + 64.0;
+      len = p_20012_.maxZ - p_20012_.minZ;
+      if (len < 0) maxZ = minZ;
+      if (len > 64) maxZ = minZ + 64.0;
+      this.bb = new AABB(minX, minY, minZ, maxX, maxY, maxZ);
+      // CraftBukkit end
    }
 
    protected float getEyeHeight(Pose p_19976_, EntityDimensions p_19977_) {
@@ -2781,6 +_,11 @@
                            vec3 = vec3.add(vec31);
                            ++k1;
                         }
+                        // CraftBukkit start - store last lava contact location
+                        if (p_204032_ == FluidTags.LAVA) {
+                           this.lastLavaContact = blockpos$mutableblockpos.immutable();
+                        }
+                        // CraftBukkit end
                      }
                   }
                }
@@ -2950,6 +_,7 @@
             gameeventlistenerregistrar.onListenerMove(this.level);
          }
       }
+      if (this.isAddedToWorld() && !this.level.isClientSide && !this.isRemoved()) this.level.getChunk((int) Math.floor(p_20344_) >> 4, (int) Math.floor(p_20346_) >> 4); // Forge - ensure target chunk is loaded.
 
    }
 
@@ -3062,11 +_,84 @@
       return true;
    }
 
+   /* ================================== Forge Start =====================================*/
+
+   private boolean canUpdate = true;
+   @Override
+   public void canUpdate(boolean value) {
+      this.canUpdate = value;
+   }
+   @Override
+   public boolean canUpdate() {
+      return this.canUpdate;
+   }
+   private @Nullable java.util.Collection<ItemEntity> captureDrops = null;
+   @Override
+   @Nullable
+   public java.util.Collection<ItemEntity> captureDrops() {
+      return captureDrops;
+   }
+   @Override
+   @Nullable
+   public java.util.Collection<ItemEntity> captureDrops(@Nullable java.util.Collection<ItemEntity> value) {
+      java.util.Collection<ItemEntity> ret = captureDrops;
+      this.captureDrops = value;
+      return ret;
+   }
+   private CompoundTag persistentData;
+   @Override
+   public CompoundTag getPersistentData() {
+      if (persistentData == null)
+         persistentData = new CompoundTag();
+      return persistentData;
+   }
+   @Override
+   public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+      return level.random.nextFloat() < fallDistance - 0.5F
+          && this instanceof LivingEntity
+          && (this instanceof Player || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(level, this))
+          && this.getBbWidth() * this.getBbWidth() * this.getBbHeight() > 0.512F;
+   }
+
+   /**
+    * Internal use for keeping track of entities that are tracked by a world, to
+    * allow guarantees that entity position changes will force a chunk load, avoiding
+    * potential issues with entity desyncing and bad chunk data.
+    */
+   private boolean isAddedToWorld;
+
+   @Override
+   public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+   @Override
+   public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+   @Override
+   public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+   @Override
+   public void revive() {
+      this.unsetRemoved();
+      this.reviveCaps();
+   }
+
+   // no AT because of overrides
+   /**
+    * Accessor method for {@link #getEyeHeight(Pose, EntityDimensions)}
+    */
+   public float getEyeHeightAccess(Pose pose, EntityDimensions size) {
+      return this.getEyeHeight(pose, size);
+   }
+
+   /* ================================== Forge End =====================================*/
+
+
    public Level getLevel() {
       return this.level;
    }
 
-   @FunctionalInterface
+
+    @FunctionalInterface
    public interface MoveFunction {
       void accept(Entity p_20373_, double p_20374_, double p_20375_, double p_20376_);
    }
