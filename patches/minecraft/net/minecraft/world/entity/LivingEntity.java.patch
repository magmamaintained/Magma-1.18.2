--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -122,7 +_,9 @@
    private static final UUID SPEED_MODIFIER_SPRINTING_UUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
    private static final UUID SPEED_MODIFIER_SOUL_SPEED_UUID = UUID.fromString("87f46a96-686f-4796-b035-22e16ee9e038");
    private static final UUID SPEED_MODIFIER_POWDER_SNOW_UUID = UUID.fromString("1eaf83ff-7207-4596-b37a-d7a07b3ec4ce");
+   private static final UUID SLOW_FALLING_ID = UUID.fromString("A5B6CF2A-2F7C-31EF-9022-7C3E7D5E6ABA");
    private static final AttributeModifier SPEED_MODIFIER_SPRINTING = new AttributeModifier(SPEED_MODIFIER_SPRINTING_UUID, "Sprinting speed boost", (double)0.3F, AttributeModifier.Operation.MULTIPLY_TOTAL);
+   private static final AttributeModifier SLOW_FALLING = new AttributeModifier(SLOW_FALLING_ID, "Slow falling acceleration reduction", -0.07, AttributeModifier.Operation.ADDITION); // Add -0.07 to 0.08 so we get the vanilla default of 0.01
    public static final int HAND_SLOTS = 2;
    public static final int ARMOR_SLOTS = 4;
    public static final int EQUIPMENT_SLOT_OFFSET = 98;
@@ -226,10 +_,29 @@
    private float swimAmountO;
    protected Brain<?> brain;
 
+   // CraftBukkit start
+   public int expToDrop;
+   public boolean forceDrops;
+   public java.util.ArrayList<org.bukkit.inventory.ItemStack> drops = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+   public org.bukkit.craftbukkit.v1_18_R2.attribute.CraftAttributeMap craftAttributes;
+   public boolean collides = true;
+   public java.util.Set<UUID> collidableExemptions = new java.util.HashSet<>();
+   public boolean bukkitPickUpLoot;
+
+   @Override
+   public float getBukkitYaw() {
+      return getYHeadRot();
+   }
+   // CraftBukkit end
+
+   protected boolean cancelDamage = false; //Magma
+
    protected LivingEntity(EntityType<? extends LivingEntity> p_20966_, Level p_20967_) {
       super(p_20966_, p_20967_);
       this.attributes = new AttributeMap(DefaultAttributes.getSupplier(p_20966_));
-      this.setHealth(this.getMaxHealth());
+      this.craftAttributes = new org.bukkit.craftbukkit.v1_18_R2.attribute.CraftAttributeMap(attributes); // CraftBukkit
+      // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+      this.entityData.set(LivingEntity.DATA_HEALTH_ID, (float) this.getAttribute(Attributes.MAX_HEALTH).getValue());
       this.blocksBuilding = true;
       this.rotA = (float)((Math.random() + 1.0D) * (double)0.01F);
       this.reapplyPosition();
@@ -272,7 +_,7 @@
    }
 
    public static AttributeSupplier.Builder createLivingAttributes() {
-      return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS);
+      return AttributeSupplier.builder().add(Attributes.MAX_HEALTH).add(Attributes.KNOCKBACK_RESISTANCE).add(Attributes.MOVEMENT_SPEED).add(Attributes.ARMOR).add(Attributes.ARMOR_TOUGHNESS).add(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).add(net.minecraftforge.common.ForgeMod.NAMETAG_DISTANCE.get()).add(net.minecraftforge.common.ForgeMod.ENTITY_GRAVITY.get()).add(net.minecraftforge.common.ForgeMod.STEP_HEIGHT_ADDITION.get());
    }
 
    protected void checkFallDamage(double p_20990_, boolean p_20991_, BlockState p_20992_, BlockPos p_20993_) {
@@ -290,7 +_,14 @@
          if (!p_20992_.isAir()) {
             double d0 = Math.min((double)(0.2F + f / 15.0F), 2.5D);
             int i = (int)(150.0D * d0);
-            ((ServerLevel)this.level).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, p_20992_), this.getX(), this.getY(), this.getZ(), i, 0.0D, 0.0D, 0.0D, (double)0.15F);
+            if (!p_20992_.addLandingEffects((ServerLevel)this.level, p_20993_, p_20992_, this, i))
+               // CraftBukkit start - visiblity api
+               if (this instanceof ServerPlayer) {
+                  ((ServerLevel) this.level).sendParticles((ServerPlayer) this, new BlockParticleOption(ParticleTypes.BLOCK, p_20992_), this.getX(), this.getY(), this.getZ(), i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, false);
+               } else {
+                  ((ServerLevel) this.level).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, p_20992_), this.getX(), this.getY(), this.getZ(), i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D);
+               }
+            // CraftBukkit end
          }
       }
 
@@ -354,7 +_,7 @@
                }
             }
 
-            if (!this.level.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().rideableUnderWater()) {
+            if (!this.level.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().canBeRiddenInWater(this)) {
                this.stopRiding();
             }
          } else if (this.getAirSupply() < this.getMaxAirSupply()) {
@@ -618,13 +_,29 @@
       this.discardFriction = p_147245_;
    }
 
+   //Magma start - add function for silencing equip sounds
+
+   private boolean silentEquipSound = false;
+   protected void silenceEquipSound(boolean silent) {
+      silentEquipSound = silent;
+   }
+
    protected void equipEventAndSound(ItemStack p_147219_) {
       SoundEvent soundevent = p_147219_.getEquipSound();
-      if (!p_147219_.isEmpty() && soundevent != null && !this.isSpectator()) {
+      if (!p_147219_.isEmpty() && soundevent != null && !this.isSpectator() && !silentEquipSound) {
+         // CraftBukkit end
          this.gameEvent(GameEvent.EQUIP);
          this.playSound(soundevent, 1.0F, 1.0F);
       }
-   }
+      silenceEquipSound(false);
+   }
+
+   protected void equipEventAndSound(ItemStack p_147219_, boolean silent) {
+      silenceEquipSound(silent);
+      equipEventAndSound(p_147219_);
+      silenceEquipSound(false); //reset
+   }
+   //Magma end
 
    public void addAdditionalSaveData(CompoundTag p_21145_) {
       p_21145_.putFloat("Health", this.getHealth());
@@ -673,6 +_,17 @@
          }
       }
 
+      // CraftBukkit start
+      if (p_21096_.contains("Bukkit.MaxHealth")) {
+         net.minecraft.nbt.Tag nbtbase = p_21096_.get("Bukkit.MaxHealth");
+         if (nbtbase.getId() == 5) {
+            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((net.minecraft.nbt.FloatTag) nbtbase).getAsDouble());
+         } else if (nbtbase.getId() == 3) {
+            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((net.minecraft.nbt.IntTag) nbtbase).getAsDouble());
+         }
+      }
+      // CraftBukkit end
+
       if (p_21096_.contains("Health", 99)) {
          this.setHealth(p_21096_.getFloat("Health"));
       }
@@ -708,9 +_,32 @@
 
    }
 
+   // CraftBukkit start
+   private boolean isTickingEffects = false;
+   private List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
+
+   private static class ProcessableEffect {
+
+      private MobEffect type;
+      private MobEffectInstance effect;
+      private final org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause;
+
+      private ProcessableEffect(MobEffectInstance effect, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+         this.effect = effect;
+         this.cause = cause;
+      }
+
+      private ProcessableEffect(MobEffect type, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+         this.type = type;
+         this.cause = cause;
+      }
+   }
+   // CraftBukkit end
+
    protected void tickEffects() {
       Iterator<MobEffect> iterator = this.activeEffects.keySet().iterator();
 
+      isTickingEffects = true; // CraftBukkit
       try {
          while(iterator.hasNext()) {
             MobEffect mobeffect = iterator.next();
@@ -718,7 +_,13 @@
             if (!mobeffectinstance.tick(this, () -> {
                this.onEffectUpdated(mobeffectinstance, true, (Entity)null);
             })) {
-               if (!this.level.isClientSide) {
+               if (!this.level.isClientSide && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionExpiryEvent(this, mobeffectinstance))) {
+                  // CraftBukkit start
+                  org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffectinstance, null, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.EXPIRATION);
+                  if (event.isCancelled()) {
+                     continue;
+                  }
+                  // CraftBukkit end
                   iterator.remove();
                   this.onEffectRemoved(mobeffectinstance);
                }
@@ -729,6 +_,18 @@
       } catch (ConcurrentModificationException concurrentmodificationexception) {
       }
 
+      // CraftBukkit start
+      isTickingEffects = false;
+      for (ProcessableEffect e : effectsToProcess) {
+         if (e.effect != null) {
+            addEffect(e.effect, e.cause);
+         } else {
+            removeEffect(e.type, e.cause);
+         }
+      }
+      effectsToProcess.clear();
+      // CraftBukkit end
+
       if (this.effectsDirty) {
          if (!this.level.isClientSide) {
             this.updateInvisibilityStatus();
@@ -768,8 +_,10 @@
          this.setInvisible(false);
       } else {
          Collection<MobEffectInstance> collection = this.activeEffects.values();
-         this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(collection));
-         this.entityData.set(DATA_EFFECT_COLOR_ID, PotionUtils.getColor(collection));
+         net.minecraftforge.event.entity.living.PotionColorCalculationEvent event = new net.minecraftforge.event.entity.living.PotionColorCalculationEvent(this, PotionUtils.getColor(collection), areAllEffectsAmbient(collection), collection);
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+         this.entityData.set(DATA_EFFECT_AMBIENCE_ID, event.areParticlesHidden());
+         this.entityData.set(DATA_EFFECT_COLOR_ID, event.getColor());
          this.setInvisible(this.hasEffect(MobEffects.INVISIBILITY));
       }
 
@@ -805,7 +_,7 @@
             d0 *= 0.5D;
          }
       }
-
+      d0 = net.minecraftforge.common.ForgeHooks.getEntityVisibilityMultiplier(this, p_20969_, d0);
       return d0;
    }
 
@@ -840,7 +_,13 @@
       this.entityData.set(DATA_EFFECT_COLOR_ID, 0);
    }
 
+   // CraftBukkit start
    public boolean removeAllEffects() {
+      return removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+   }
+
+   public boolean removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+      // CraftBukkit end
       if (this.level.isClientSide) {
          return false;
       } else {
@@ -848,7 +_,15 @@
 
          boolean flag;
          for(flag = false; iterator.hasNext(); flag = true) {
-            this.onEffectRemoved(iterator.next());
+            MobEffectInstance effect = iterator.next();
+            if(net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, effect))) continue;
+            // CraftBukkit start
+            org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause, org.bukkit.event.entity.EntityPotionEffectEvent.Action.CLEARED);
+            if (event.isCancelled()) {
+               continue;
+            }
+            this.onEffectRemoved(effect);
+            // CraftBukkit end
             iterator.remove();
          }
 
@@ -877,17 +_,58 @@
       return this.addEffect(p_21165_, (Entity)null);
    }
 
+   // CraftBukkit start
+   public boolean addEffect(MobEffectInstance mobEffectInstance, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+      return this.addEffect(mobEffectInstance, (Entity) null, cause);
+   }
+
+   //Magma start - move cause to a different constructor
+   private org.bukkit.event.entity.EntityPotionEffectEvent.Cause effectCause = org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN;
+   public void prepare(org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+      this.effectCause = cause;
+   }
+
    public boolean addEffect(MobEffectInstance p_147208_, @Nullable Entity p_147209_) {
+      org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause = effectCause;
+      effectCause = org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN; //reset
+      return this.addEffect(p_147208_, p_147209_, cause);
+   }
+   // Magma end
+
+   public boolean addEffect(MobEffectInstance p_147208_, @Nullable Entity p_147209_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+      org.spigotmc.AsyncCatcher.catchOp("effect add"); // Spigot
+      if (isTickingEffects) {
+         effectsToProcess.add(new ProcessableEffect(p_147208_, cause));
+         return true;
+      }
+      // CraftBukkit end
       if (!this.canBeAffected(p_147208_)) {
          return false;
       } else {
          MobEffectInstance mobeffectinstance = this.activeEffects.get(p_147208_.getEffect());
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionAddedEvent(this, mobeffectinstance, p_147208_, p_147209_));
+
+         // CraftBukkit start
+         boolean override = false;
+         if (mobeffectinstance != null) {
+            override = new MobEffectInstance(mobeffectinstance).update(p_147208_);
+         }
+
+         org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffectinstance, p_147208_, cause, override);
+         if (event.isCancelled()) {
+            return false;
+         }
+         // CraftBukkit end
+
          if (mobeffectinstance == null) {
             this.activeEffects.put(p_147208_.getEffect(), p_147208_);
             this.onEffectAdded(p_147208_, p_147209_);
             return true;
-         } else if (mobeffectinstance.update(p_147208_)) {
+            // CraftBukkit start
+         } else if (event.isOverride()) {
+            mobeffectinstance.update(p_147208_);
             this.onEffectUpdated(mobeffectinstance, true, p_147209_);
+            // CraftBukkit end
             return true;
          } else {
             return false;
@@ -896,6 +_,9 @@
    }
 
    public boolean canBeAffected(MobEffectInstance p_21197_) {
+      net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent event = new net.minecraftforge.event.entity.living.PotionEvent.PotionApplicableEvent(this, p_21197_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+      if (event.getResult() != net.minecraftforge.eventbus.api.Event.Result.DEFAULT) return event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW;
       if (this.getMobType() == MobType.UNDEAD) {
          MobEffect mobeffect = p_21197_.getEffect();
          if (mobeffect == MobEffects.REGENERATION || mobeffect == MobEffects.POISON) {
@@ -922,13 +_,39 @@
       return this.getMobType() == MobType.UNDEAD;
    }
 
+   // CraftBukkit start
    @Nullable
    public MobEffectInstance removeEffectNoUpdate(@Nullable MobEffect p_21164_) {
+
+      return removeEffectNoUpdate(p_21164_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+   }
+
+   @Nullable
+   public MobEffectInstance removeEffectNoUpdate(@Nullable MobEffect p_21164_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+      if (isTickingEffects) {
+         effectsToProcess.add(new ProcessableEffect(p_21164_, cause));
+         return null;
+      }
+      MobEffectInstance effect = this.activeEffects.get(p_21164_);
+      if (effect == null) {
+         return null;
+      }
+      org.bukkit.event.entity.EntityPotionEffectEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+      if (event.isCancelled()) {
+         return null;
+      }
+
       return this.activeEffects.remove(p_21164_);
    }
 
    public boolean removeEffect(MobEffect p_21196_) {
-      MobEffectInstance mobeffectinstance = this.removeEffectNoUpdate(p_21196_);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, p_21196_))) return false;
+      return removeEffect(p_21196_, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+   }
+
+   public boolean removeEffect(MobEffect mobeffectlist, org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause) {
+      MobEffectInstance mobeffectinstance = this.removeEffectNoUpdate(mobeffectlist, cause);
+      // CraftBukkit end
       if (mobeffectinstance != null) {
          this.onEffectRemoved(mobeffectinstance);
          return true;
@@ -963,19 +_,63 @@
 
    }
 
+   //Magma start - move reason to a variable
+   // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
+   private org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason regainReason = org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.CUSTOM;
+
+   public void setRegainReason(org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason reason) {
+      this.regainReason = reason;
+   }
    public void heal(float p_21116_) {
+      heal(p_21116_, regainReason);
+      this.regainReason = org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.CUSTOM; //Reset
+   }
+
+   public void heal(float p_21116_, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason regainReason) {
+
+      p_21116_ = net.minecraftforge.event.ForgeEventFactory.onLivingHeal(this, p_21116_);
+      if (p_21116_ <= 0) return;
       float f = this.getHealth();
       if (f > 0.0F) {
-         this.setHealth(f + p_21116_);
+         org.bukkit.event.entity.EntityRegainHealthEvent event = new org.bukkit.event.entity.EntityRegainHealthEvent(this.getBukkitEntity(), p_21116_, regainReason);
+         // Suppress during worldgen
+         if (this.valid) {
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+         }
+         if (!event.isCancelled()) {
+            this.setHealth((float) (this.getHealth() + event.getAmount()));
+         }
+         // CraftBukkit end
       }
 
    }
+   //Magma end
 
    public float getHealth() {
+      // CraftBukkit start - Use unscaled health
+      if (this instanceof ServerPlayer) {
+         return (float) ((ServerPlayer) this).getBukkitEntity().getHealth();
+      }
+      // CraftBukkit end
       return this.entityData.get(DATA_HEALTH_ID);
    }
 
    public void setHealth(float p_21154_) {
+      // CraftBukkit start - Handle scaled health
+      if (this instanceof ServerPlayer) {
+         org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer player = ((ServerPlayer) this).getBukkitEntity();
+         // Squeeze
+         if (p_21154_ < 0.0F) {
+            player.setRealHealth(0.0D);
+         } else if (p_21154_ > player.getMaxHealth()) {
+            player.setRealHealth(player.getMaxHealth());
+         } else {
+            player.setRealHealth(p_21154_);
+         }
+         player.updateScaledHealth(false);
+         return;
+      }
+      // CraftBukkit end
       this.entityData.set(DATA_HEALTH_ID, Mth.clamp(p_21154_, 0.0F, this.getMaxHealth()));
    }
 
@@ -984,11 +_,12 @@
    }
 
    public boolean hurt(DamageSource p_21016_, float p_21017_) {
+      if (!net.minecraftforge.common.ForgeHooks.onLivingAttack(this, p_21016_, p_21017_)) return false;
       if (this.isInvulnerableTo(p_21016_)) {
          return false;
       } else if (this.level.isClientSide) {
          return false;
-      } else if (this.isDeadOrDying()) {
+      } else if (this.isRemoved() || this.dead || this.getHealth() <= 0.0F) { // CraftBukkit - Don't allow entities that got set to dead/killed elsewhere to get damaged and die
          return false;
       } else if (p_21016_.isFire() && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
          return false;
@@ -999,12 +_,15 @@
 
          this.noActionTime = 0;
          float f = p_21017_;
-         boolean flag = false;
+         boolean flag = f > 0.0F && this.isDamageSourceBlocked(p_21016_); // Copied from below
          float f1 = 0.0F;
-         if (p_21017_ > 0.0F && this.isDamageSourceBlocked(p_21016_)) {
-            this.hurtCurrentlyUsedShield(p_21017_);
-            f1 = p_21017_;
-            p_21017_ = 0.0F;
+         // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+         if (false && f > 0.0F && this.isDamageSourceBlocked(p_21016_)) {
+            net.minecraftforge.event.entity.living.ShieldBlockEvent ev = net.minecraftforge.common.ForgeHooks.onShieldBlock(this, p_21016_, p_21017_);
+            if(!ev.isCanceled()) {
+            if(ev.shieldTakesDamage()) this.hurtCurrentlyUsedShield(p_21017_);
+            f1 = ev.getBlockedDamage();
+            p_21017_ -= ev.getBlockedDamage();
             if (!p_21016_.isProjectile()) {
                Entity entity = p_21016_.getDirectEntity();
                if (entity instanceof LivingEntity) {
@@ -1014,30 +_,71 @@
 
             flag = true;
          }
+         }
 
          this.animationSpeed = 1.5F;
          boolean flag1 = true;
-         if ((float)this.invulnerableTime > 10.0F) {
+         if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F) { // CraftBukkit - restore use of maxNoDamageTicks
             if (p_21017_ <= this.lastHurt) {
                return false;
             }
 
-            this.actuallyHurt(p_21016_, p_21017_ - this.lastHurt);
+            //Magma start - calculate player hurt damage in their class
+            if (this instanceof Player) {
+               this.actuallyHurt(p_21016_, p_21017_ - this.lastHurt);
+               if (cancelDamage){
+                  cancelDamage = false;
+                  return false;
+               }
+            } else {
+               // CraftBukkit start
+               this.actuallyHurt(p_21016_, p_21017_ - this.lastHurt);
+               if (!damageEntity0)
+                  return false;
+               // CraftBukkit end
+            }
+            //Magma end
             this.lastHurt = p_21017_;
             flag1 = false;
          } else {
+            //Magma start - calculate player hurt damage in their class
+            if (this instanceof Player) {
+               this.actuallyHurt(p_21016_, f);
+               if (cancelDamage){
+                  cancelDamage = false;
+                  return false;
+               }
+            } else {
+               // CraftBukkit start
+               this.actuallyHurt(p_21016_, f);
+               if (!damageEntity0)
+                  return false;
+               // CraftBukkit end
+            }
+            //Magma end
+
+            // CraftBukkit start
             this.lastHurt = p_21017_;
-            this.invulnerableTime = 20;
-            this.actuallyHurt(p_21016_, p_21017_);
+            this.invulnerableTime = this.invulnerableDuration; // CraftBukkit - restore use of maxNoDamageTicks
             this.hurtDuration = 10;
             this.hurtTime = this.hurtDuration;
          }
 
-         if (p_21016_.isDamageHelmet() && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+         // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+         if (false && p_21016_.isDamageHelmet() && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
             this.hurtHelmet(p_21016_, p_21017_);
             p_21017_ *= 0.75F;
          }
 
+         // CraftBukkit start
+         if (this instanceof net.minecraft.world.entity.animal.Animal) {
+            ((net.minecraft.world.entity.animal.Animal) this).resetLove();
+            if (this instanceof TamableAnimal) {
+               ((TamableAnimal) this).setOrderedToSit(false);
+            }
+         }
+         // CraftBukkit end
+
          this.hurtDir = 0.0F;
          Entity entity1 = p_21016_.getEntity();
          if (entity1 != null) {
@@ -1048,11 +_,11 @@
             if (entity1 instanceof Player) {
                this.lastHurtByPlayerTime = 100;
                this.lastHurtByPlayer = (Player)entity1;
-            } else if (entity1 instanceof Wolf) {
-               Wolf wolf = (Wolf)entity1;
-               if (wolf.isTame()) {
+            } else if (entity1 instanceof net.minecraft.world.entity.TamableAnimal) {
+               net.minecraft.world.entity.TamableAnimal tamableEntity = (net.minecraft.world.entity.TamableAnimal)entity1;
+               if (tamableEntity.isTame()) {
                   this.lastHurtByPlayerTime = 100;
-                  LivingEntity livingentity = wolf.getOwner();
+                  LivingEntity livingentity = tamableEntity.getOwner();
                   if (livingentity != null && livingentity.getType() == EntityType.PLAYER) {
                      this.lastHurtByPlayer = (Player)livingentity;
                   } else {
@@ -1125,7 +_,7 @@
          if (this instanceof ServerPlayer) {
             CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer)this, p_21016_, f, p_21017_, flag);
             if (f1 > 0.0F && f1 < 3.4028235E37F) {
-               ((ServerPlayer)this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f1 * 10.0F));
+               ((ServerPlayer)this).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_BLOCKED_BY_SHIELD), Math.round(f1 * 10.0F));
             }
          }
 
@@ -1151,31 +_,43 @@
       } else {
          ItemStack itemstack = null;
 
+         // CraftBukkit start
+         ItemStack itemstack1 = ItemStack.EMPTY;
          for(InteractionHand interactionhand : InteractionHand.values()) {
-            ItemStack itemstack1 = this.getItemInHand(interactionhand);
+            itemstack1 = this.getItemInHand(interactionhand);
             if (itemstack1.is(Items.TOTEM_OF_UNDYING)) {
                itemstack = itemstack1.copy();
+               // itemstack1.shrink(1); // CraftBukkit
+               break;
+            }
+         }
+
+         org.bukkit.event.entity.EntityResurrectEvent event = new org.bukkit.event.entity.EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity());
+         event.setCancelled(itemstack == null);
+         this.level.getCraftServer().getPluginManager().callEvent(event);
+
+         if (!event.isCancelled()) {
+            if (!itemstack1.isEmpty()) {
                itemstack1.shrink(1);
-               break;
             }
-         }
-
-         if (itemstack != null) {
-            if (this instanceof ServerPlayer) {
+            if (itemstack != null && this instanceof ServerPlayer) {
+               // CraftBukkit end
                ServerPlayer serverplayer = (ServerPlayer)this;
-               serverplayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING));
+               serverplayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING), 1);
                CriteriaTriggers.USED_TOTEM.trigger(serverplayer, itemstack);
             }
 
             this.setHealth(1.0F);
-            this.removeAllEffects();
-            this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1));
-            this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1));
-            this.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0));
+            // CraftBukkit start
+            this.removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+            this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+            this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+            this.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+            // CraftBukkit end
             this.level.broadcastEntityEvent(this, (byte)35);
          }
 
-         return itemstack != null;
+         return !event.isCancelled();
       }
    }
 
@@ -1233,6 +_,7 @@
    }
 
    public void die(DamageSource p_21014_) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, p_21014_)) return;
       if (!this.isRemoved() && !this.dead) {
          Entity entity = p_21014_.getEntity();
          LivingEntity livingentity = this.getKillCredit();
@@ -1245,7 +_,7 @@
          }
 
          if (!this.level.isClientSide && this.hasCustomName()) {
-            LOGGER.info("Named entity {} died: {}", this, this.getCombatTracker().getDeathMessage().getString());
+            if (org.spigotmc.SpigotConfig.logNamedDeaths) LOGGER.info("Named entity {} died: {}", this, this.getCombatTracker().getDeathMessage().getString()); // Spigot
          }
 
          this.dead = true;
@@ -1268,17 +_,27 @@
       if (!this.level.isClientSide) {
          boolean flag = false;
          if (p_21269_ instanceof WitherBoss) {
-            if (this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+            if (net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level, p_21269_)) {
                BlockPos blockpos = this.blockPosition();
                BlockState blockstate = Blocks.WITHER_ROSE.defaultBlockState();
-               if (this.level.getBlockState(blockpos).isAir() && blockstate.canSurvive(this.level, blockpos)) {
-                  this.level.setBlock(blockpos, blockstate, 3);
-                  flag = true;
+               if (this.level.isEmptyBlock(blockpos) && blockstate.canSurvive(this.level, blockpos)) {
+                  // CraftBukkit start - call EntityBlockFormEvent for Wither Rose
+                  flag = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.handleBlockFormEvent(this.level, blockpos, blockstate, 3, this);
+                  // CraftBukkit end
                }
             }
 
             if (!flag) {
                ItemEntity itementity = new ItemEntity(this.level, this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
+
+               // CraftBukkit start
+               org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+               org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callEvent(event);
+               if (event.isCancelled()) {
+                  return;
+               }
+               // CraftBukkit end
+
                this.level.addFreshEntity(itementity);
             }
          }
@@ -1286,32 +_,89 @@
       }
    }
 
+   //Magma start - rewrite
+   private @Nullable net.minecraft.world.entity.player.Inventory forgeCaptures = null;
+
+   protected @Nullable net.minecraft.world.entity.player.Inventory getForgeCaptures() {
+      return forgeCaptures;
+   }
+
+   protected @Nullable net.minecraft.world.entity.player.Inventory getForgeCapturesAndClear() {
+      net.minecraft.world.entity.player.Inventory temp = forgeCaptures;
+      forgeCaptures = null;
+      return temp;
+   }
+
+   protected void setForgeCaptures(ServerPlayer player, ListTag tag) {
+      if (forgeCaptures == null) forgeCaptures = new net.minecraft.world.entity.player.Inventory(player);
+      else forgeCaptures.clearContent();
+      forgeCaptures.load(tag);
+   }
+
    protected void dropAllDeathLoot(DamageSource p_21192_) {
       Entity entity = p_21192_.getEntity();
-      int i;
-      if (entity instanceof Player) {
-         i = EnchantmentHelper.getMobLooting((LivingEntity)entity);
-      } else {
-         i = 0;
-      }
+
+      int i = net.minecraftforge.common.ForgeHooks.getLootingLevel(this, entity, p_21192_);
+      this.captureDrops(Lists.newArrayList());
 
       boolean flag = this.lastHurtByPlayerTime > 0;
+      this.dropEquipment(); // CraftBukkit - from below
       if (this.shouldDropLoot() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
          this.dropFromLootTable(p_21192_, flag);
          this.dropCustomDeathLoot(p_21192_, i, flag);
       }
+      Collection<ItemEntity> drops = captureDrops(null);
+      this.expToDrop = this.getExpReward();
 
-      this.dropEquipment();
-      this.dropExperience();
+      //Magma - ForgeCaptures will store the inventory temporarily, until the after the death event
+      if (this instanceof ServerPlayer player){
+         forgeCaptures = new net.minecraft.world.entity.player.Inventory(player);
+         forgeCaptures.replaceWith(player.getInventory());
+         player.getInventory().clearContent();
+      }
+      if (!net.minecraftforge.common.ForgeHooks.onLivingDrops(this, p_21192_, drops, i, lastHurtByPlayerTime > 0)) {
+         drops.forEach(drop -> this.drops.add(org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(drop.getItem())));
+         if (!(this instanceof ServerPlayer))//Magma - in this situation the org.bukkit.event.entity.EntityDeathEvent would be called twice, because org.bukkit.event.entity.PlayerDeathEvent also inherits from EntityDeathEvent
+            org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callEntityDeathEvent(this, this.drops);
+      }
+      //Magma - swap the player inventory with forge Captures
+      if(this instanceof ServerPlayer player){
+         //Magma - get player inventory
+         net.minecraft.world.entity.player.Inventory temp = new net.minecraft.world.entity.player.Inventory(player);
+         temp.replaceWith(player.getInventory());
+         //Magma - restore player inventory to the state before the capture
+         player.getInventory().clearContent();
+         player.getInventory().replaceWith(forgeCaptures);
+         //Magma - set the captures to the added items during the death event
+         forgeCaptures.clearContent();
+         forgeCaptures.replaceWith(temp);
+      }
    }
+   //Magma end
 
    protected void dropEquipment() {
    }
 
-   protected void dropExperience() {
+   // CraftBukkit start
+   public int getExpReward() {
       if (this.level instanceof ServerLevel && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
-         ExperienceOrb.award((ServerLevel)this.level, this.position(), this.getExperienceReward(this.lastHurtByPlayer));
-      }
+         int reward = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.lastHurtByPlayer, this.getExperienceReward(this.lastHurtByPlayer));
+         int i = this.getExperienceReward(this.lastHurtByPlayer);
+         return i;
+      } else {
+         return 0;
+      }
+   }
+
+   // CraftBukkit end
+   public void dropExperience() { //Magma - protected -> public
+      // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+      if (true) {
+         int i = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.lastHurtByPlayer, this.expToDrop);
+         ExperienceOrb.award((ServerLevel) this.level, this.position(), i); //Magma - revert to award, fixes mixin inject
+         this.expToDrop = 0;
+      }
+      // CraftBukkit end
 
    }
 
@@ -1326,7 +_,8 @@
       ResourceLocation resourcelocation = this.getLootTable();
       LootTable loottable = this.level.getServer().getLootTables().get(resourcelocation);
       LootContext.Builder lootcontext$builder = this.createLootContext(p_21022_, p_21021_);
-      loottable.getRandomItems(lootcontext$builder.create(LootContextParamSets.ENTITY), this::spawnAtLocation);
+      LootContext ctx = lootcontext$builder.create(LootContextParamSets.ENTITY);
+      loottable.getRandomItems(ctx).forEach(this::spawnAtLocation);
    }
 
    protected LootContext.Builder createLootContext(boolean p_21105_, DamageSource p_21106_) {
@@ -1339,6 +_,11 @@
    }
 
    public void knockback(double p_147241_, double p_147242_, double p_147243_) {
+      net.minecraftforge.event.entity.living.LivingKnockBackEvent event = net.minecraftforge.common.ForgeHooks.onLivingKnockBack(this, (float) p_147241_, p_147242_, p_147243_);
+      if(event.isCanceled()) return;
+      p_147241_ = event.getStrength();
+      p_147242_ = event.getRatioX();
+      p_147243_ = event.getRatioZ();
       p_147241_ *= 1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
       if (!(p_147241_ <= 0.0D)) {
          this.hasImpulse = true;
@@ -1392,15 +_,9 @@
       } else {
          BlockPos blockpos = this.blockPosition();
          BlockState blockstate = this.getFeetBlockState();
-         if (blockstate.is(BlockTags.CLIMBABLE)) {
-            this.lastClimbablePos = Optional.of(blockpos);
-            return true;
-         } else if (blockstate.getBlock() instanceof TrapDoorBlock && this.trapdoorUsableAsLadder(blockpos, blockstate)) {
-            this.lastClimbablePos = Optional.of(blockpos);
-            return true;
-         } else {
-            return false;
-         }
+         Optional<BlockPos> ladderPos = net.minecraftforge.common.ForgeHooks.isLivingOnLadder(blockstate, level, blockpos, this);
+         if (ladderPos.isPresent()) this.lastClimbablePos = ladderPos;
+         return ladderPos.isPresent();
       }
    }
 
@@ -1420,12 +_,22 @@
    }
 
    public boolean causeFallDamage(float p_147187_, float p_147188_, DamageSource p_147189_) {
+      float[] ret = net.minecraftforge.common.ForgeHooks.onLivingFall(this, p_147187_, p_147188_);
+      if (ret == null) return false;
+      p_147187_ = ret[0];
+      p_147188_ = ret[1];
+
       boolean flag = super.causeFallDamage(p_147187_, p_147188_, p_147189_);
       int i = this.calculateFallDamage(p_147187_, p_147188_);
       if (i > 0) {
+         // CraftBukkit start
+         if (!this.hurt(p_147189_, (float) i)) {
+            return true;
+         }
+         // CraftBukkit end
          this.playSound(this.getFallDamageSound(i), 1.0F, 1.0F);
          this.playBlockFallSound();
-         this.hurt(p_147189_, (float)i);
+         // this.hurt(p_147189_, (float)i); // CraftBukkit - moved up
          return true;
       } else {
          return flag;
@@ -1443,9 +_,10 @@
          int i = Mth.floor(this.getX());
          int j = Mth.floor(this.getY() - (double)0.2F);
          int k = Mth.floor(this.getZ());
-         BlockState blockstate = this.level.getBlockState(new BlockPos(i, j, k));
+         BlockPos pos = new BlockPos(i, j, k);
+         BlockState blockstate = this.level.getBlockState(pos);
          if (!blockstate.isAir()) {
-            SoundType soundtype = blockstate.getSoundType();
+            SoundType soundtype = blockstate.getSoundType(level, pos, this);
             this.playSound(soundtype.getFallSound(), soundtype.getVolume() * 0.5F, soundtype.getPitch() * 0.75F);
          }
 
@@ -1471,9 +_,17 @@
    protected void hurtCurrentlyUsedShield(float p_21316_) {
    }
 
+   public boolean isDamageAfterArmorabsorbHurt = false; // Magma
    protected float getDamageAfterArmorAbsorb(DamageSource p_21162_, float p_21163_) {
       if (!p_21162_.isBypassArmor()) {
-         this.hurtArmor(p_21162_, p_21163_);
+         if (net.minecraftforge.fml.ModList.get().isLoaded("the_vault")) //Magma - prevent mixin inject, just don't use the bukkit hurt event if the_vault is loaded
+            // Magma start - Fix mixin issues
+            if (isDamageAfterArmorabsorbHurt) {
+               this.hurtArmor(p_21162_, p_21163_);
+               isDamageAfterArmorabsorbHurt = false;
+               return 0.0F;
+            }
+            // Magma end
          p_21163_ = CombatRules.getDamageAfterAbsorb(p_21163_, (float)this.getArmorValue(), (float)this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
       }
 
@@ -1484,7 +_,8 @@
       if (p_21193_.isBypassMagic()) {
          return p_21194_;
       } else {
-         if (this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && p_21193_ != DamageSource.OUT_OF_WORLD) {
+         // CraftBukkit - Moved to damageEntity0(DamageSource, float)
+         if (false && this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && p_21193_ != DamageSource.OUT_OF_WORLD) {
             int i = (this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
             int j = 25 - i;
             float f = p_21194_ * (float)j;
@@ -1493,9 +_,9 @@
             float f2 = f1 - p_21194_;
             if (f2 > 0.0F && f2 < 3.4028235E37F) {
                if (this instanceof ServerPlayer) {
-                  ((ServerPlayer)this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f2 * 10.0F));
+                  ((ServerPlayer)this).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_RESISTED), Math.round(f2 * 10.0F));
                } else if (p_21193_.getEntity() instanceof ServerPlayer) {
-                  ((ServerPlayer)p_21193_.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f2 * 10.0F));
+                  ((ServerPlayer)p_21193_.getEntity()).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_DEALT_RESISTED), Math.round(f2 * 10.0F));
                }
             }
          }
@@ -1513,25 +_,170 @@
       }
    }
 
+   public boolean damageEntity0;
    protected void actuallyHurt(DamageSource p_21240_, float p_21241_) {
       if (!this.isInvulnerableTo(p_21240_)) {
-         p_21241_ = this.getDamageAfterArmorAbsorb(p_21240_, p_21241_);
-         p_21241_ = this.getDamageAfterMagicAbsorb(p_21240_, p_21241_);
-         float f2 = Math.max(p_21241_ - this.getAbsorptionAmount(), 0.0F);
-         this.setAbsorptionAmount(this.getAbsorptionAmount() - (p_21241_ - f2));
-         float f = p_21241_ - f2;
-         if (f > 0.0F && f < 3.4028235E37F && p_21240_.getEntity() instanceof ServerPlayer) {
-            ((ServerPlayer)p_21240_.getEntity()).awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f * 10.0F));
-         }
-
-         if (f2 != 0.0F) {
+         // Check if entity is a "human" aka player
+         final boolean human = this instanceof Player;
+         final float originalDamage = p_21241_;
+         // Cauldron start - apply forge damage hook
+         p_21241_ = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, p_21240_, p_21241_);
+         // If the damage is negative return true
+         if (p_21241_ < 0) {
+            damageEntity0 = true;
+            return;
+         }
+         //Magma - Infinity check
+         if (Float.isInfinite(p_21241_))
+            p_21241_ = originalDamage; // Restore original damage to prevent issues with damage calculation
+         // Thermos detect null damage
+         final boolean nulldmg = p_21241_ == 0;
+         // Cauldron end
+
+         com.google.common.base.Function<Double, Double> hardHat = f -> {
+            if (p_21240_.isDamageHelmet() && !LivingEntity.this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+               return -(f - (f * 0.75F));
+            }
+            return -0.0;
+         };
+         float hardHatModifier = hardHat.apply((double) p_21241_).floatValue();
+         p_21241_ += hardHatModifier;
+
+         com.google.common.base.Function<Double, Double> blocking = f -> -((LivingEntity.this.isDamageSourceBlocked(p_21240_)) ? f : 0.0);
+         float blockingModifier = blocking.apply((double) p_21241_).floatValue();
+         p_21241_ += blockingModifier;
+
+         com.google.common.base.Function<Double, Double> armor = f -> -(f - LivingEntity.this.getDamageAfterArmorAbsorb(p_21240_, f.floatValue()));
+         float armorModifier = armor.apply((double) p_21241_).floatValue();
+         p_21241_ += armorModifier;
+
+         com.google.common.base.Function<Double, Double> resistance = f -> {
+            if (!p_21240_.isBypassMagic() && LivingEntity.this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && p_21240_ != DamageSource.OUT_OF_WORLD) {
+               int i = (LivingEntity.this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
+               int j = 25 - i;
+               float f1 = f.floatValue() * (float) j;
+               return -(f - (f1 / 25.0F));
+            }
+            return -0.0;
+         };
+         float resistanceModifier = resistance.apply((double) p_21241_).floatValue();
+         p_21241_ += resistanceModifier;
+
+         com.google.common.base.Function<Double, Double> magic = f -> -(f - LivingEntity.this.getDamageAfterMagicAbsorb(p_21240_, f.floatValue()));
+         float magicModifier = magic.apply((double) p_21241_).floatValue();
+         p_21241_ += magicModifier;
+
+         com.google.common.base.Function<Double, Double> absorption = f -> -(Math.max(f - Math.max(f - LivingEntity.this.getAbsorptionAmount(), 0.0F), 0.0F));
+         float absorptionModifier = absorption.apply((double) p_21241_).floatValue();
+
+         org.bukkit.event.entity.EntityDamageEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.handleLivingEntityDamageEvent(this, p_21240_, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+         if (p_21240_.getEntity() instanceof Player) {
+            ((Player) p_21240_.getEntity()).resetAttackStrengthTicker(); // Moved from Player in order to make the cooldown reset get called after the damage event is fired
+         }
+         if (event.isCancelled()) {
+            cancelDamage = true;
+            damageEntity0 = false;
+            return;
+         }
+
+         p_21241_ = (float) event.getFinalDamage();
+
+         if (nulldmg) { // Preclude any stupidity with null head items
+            damageEntity0 = true;
+            return;
+         }
+
+         // Resistance
+         if (event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.RESISTANCE) < 0) {
+            float f3 = (float) -event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.RESISTANCE);
+            if (f3 > 0.0F && f3 < 3.4028235E37F) {
+               if (this instanceof ServerPlayer) {
+                  ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+               } else if (p_21240_.getEntity() instanceof ServerPlayer) {
+                  ((ServerPlayer) p_21240_.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+               }
+            }
+         }
+
+         // Apply damage to helmet
+         if (p_21240_.isDamageHelmet() && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+            this.hurtHelmet(p_21240_, p_21241_);
+         }
+
+         // Apply damage to armor
+         if (!p_21240_.isBypassArmor() && !net.minecraftforge.fml.ModList.get().isLoaded("the_vault")) { //Magma - skip armor damage if the_vault is loaded
+            float armorDamage = (float) (event.getDamage() + event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING) + event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.HARD_HAT));
+            this.isDamageAfterArmorabsorbHurt = true; // Magma
+            this.getDamageAfterArmorAbsorb(p_21240_, armorDamage); // Magma
+         }
+
+         // Apply blocking code // PAIL: steal from above
+         if (event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING) < 0) {
+            this.level.broadcastEntityEvent(this, (byte) 29); // SPIGOT-4635 - shield damage sound
+            this.hurtCurrentlyUsedShield((float) -event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING));
+            Entity entity = p_21240_.getDirectEntity();
+            if (entity instanceof LivingEntity) {
+               this.blockUsingShield((LivingEntity) entity);
+            }
+         }
+
+         absorptionModifier = (float) -event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.ABSORPTION);
+         this.setAbsorptionAmount(Math.max(this.getAbsorptionAmount() - absorptionModifier, 0.0F));
+         float f2 = absorptionModifier;
+
+         if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof Player) {
+            ((Player) this).awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+         }
+         if (f2 > 0.0F && f2 < 3.4028235E37F && p_21240_.getEntity() instanceof ServerPlayer) {
+            ((ServerPlayer) p_21240_.getEntity()).awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
+         }
+
+         p_21241_ = net.minecraftforge.common.ForgeHooks.onLivingDamage(this, p_21240_, p_21241_);
+
+         if (p_21241_ > 0 || !human) {
+            if (human) {
+               // PAIL: Be sure to drag all this code from the Player subclass each update.
+               ((Player) this).setExhaustionReason(org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED);
+               ((Player) this).causeFoodExhaustion(p_21240_.getFoodExhaustion());
+               if (p_21241_ < 3.4028235E37F) {
+                  ((Player) this).awardStat(Stats.DAMAGE_TAKEN, Math.round(p_21241_ * 10.0F));
+               }
+            }
+            // CraftBukkit end
             float f1 = this.getHealth();
-            this.setHealth(f1 - f2);
-            this.getCombatTracker().recordDamage(p_21240_, f1, f2);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - f2);
+            this.getCombatTracker().recordDamage(p_21240_, f1, p_21241_);
+            this.setHealth(f1 - p_21241_); // Forge: moved to fix MC-121048
+            // CraftBukkit start
+            if (!human) {
+               this.setAbsorptionAmount(this.getAbsorptionAmount() - p_21241_);
+            }
             this.gameEvent(GameEvent.ENTITY_DAMAGED, p_21240_.getEntity());
+
+            damageEntity0 = true;
+            return;
+         } else {
+            // Duplicate triggers if blocking
+            if (event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING) < 0) {
+               if (this instanceof ServerPlayer) {
+                  CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, p_21240_, p_21241_, originalDamage, true);
+                  f2 = (float) -event.getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier.BLOCKING);
+                  if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                     ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                  }
+               }
+               if (p_21240_.getEntity() instanceof ServerPlayer) {
+                  CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer) p_21240_.getEntity(), this, p_21240_, p_21241_, originalDamage, true);
+               }
+               damageEntity0 = false;
+               return;
+            } else {
+               damageEntity0 = originalDamage > 0;
+               return;
+            }
+            // CraftBukkit end
          }
       }
+      damageEntity0 = false;
    }
 
    public CombatTracker getCombatTracker() {
@@ -1558,8 +_,19 @@
    }
 
    public final void setArrowCount(int p_21318_) {
-      this.entityData.set(DATA_ARROW_COUNT_ID, p_21318_);
-   }
+      // CraftBukkit start
+      setArrowCount( p_21318_, false );
+   }
+
+   public final void setArrowCount(int p_21318_, boolean flag){
+      org.bukkit.event.entity.ArrowBodyCountChangeEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callArrowBodyCountChangeEvent( this, getArrowCount(), p_21318_, flag );
+      if(event.isCancelled()){
+         return;
+      }
+
+      this.entityData.set(DATA_ARROW_COUNT_ID, event.getNewAmount());
+   }
+   // CraftBukkit end
 
    public final int getStingerCount() {
       return this.entityData.get(DATA_STINGER_COUNT_ID);
@@ -1582,6 +_,8 @@
    }
 
    public void swing(InteractionHand p_21012_, boolean p_21013_) {
+      ItemStack stack = this.getItemInHand(p_21012_);
+      if (!stack.isEmpty() && stack.onEntitySwing(this)) return;
       if (!this.swinging || this.swingTime >= this.getCurrentSwingDuration() / 2 || this.swingTime < 0) {
          this.swingTime = -1;
          this.swinging = true;
@@ -1847,6 +_,12 @@
 
    public abstract ItemStack getItemBySlot(EquipmentSlot p_21127_);
 
+   // CraftBukkit start
+   public void setItemSlot(EquipmentSlot equipmentSlot, ItemStack itemstack, boolean silent) {
+      this.setItemSlot(equipmentSlot, itemstack);
+   }
+   // CraftBukkit end
+
    public abstract void setItemSlot(EquipmentSlot p_21036_, ItemStack p_21037_);
 
    protected void verifyEquippedItem(ItemStack p_181123_) {
@@ -1941,14 +_,15 @@
       }
 
       this.hasImpulse = true;
+      net.minecraftforge.common.ForgeHooks.onLivingJump(this);
    }
 
    protected void goDownInWater() {
-      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)-0.04F, 0.0D));
+      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)-0.04F * this.getAttribute(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).getValue(), 0.0D));
    }
 
    protected void jumpInLiquid(TagKey<Fluid> p_204043_) {
-      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)0.04F, 0.0D));
+      this.setDeltaMovement(this.getDeltaMovement().add(0.0D, (double)0.04F * this.getAttribute(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).getValue(), 0.0D));
    }
 
    protected float getWaterSlowDown() {
@@ -1962,11 +_,15 @@
    public void travel(Vec3 p_21280_) {
       if (this.isEffectiveAi() || this.isControlledByLocalInstance()) {
          double d0 = 0.08D;
+         AttributeInstance gravity = this.getAttribute(net.minecraftforge.common.ForgeMod.ENTITY_GRAVITY.get());
          boolean flag = this.getDeltaMovement().y <= 0.0D;
          if (flag && this.hasEffect(MobEffects.SLOW_FALLING)) {
-            d0 = 0.01D;
+            if (!gravity.hasModifier(SLOW_FALLING)) gravity.addTransientModifier(SLOW_FALLING);
             this.resetFallDistance();
+         } else if (gravity.hasModifier(SLOW_FALLING)) {
+            gravity.removeModifier(SLOW_FALLING);
          }
+         d0 = gravity.getValue();
 
          FluidState fluidstate = this.level.getFluidState(this.blockPosition());
          if (this.isInWater() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate)) {
@@ -1991,6 +_,7 @@
                f4 = 0.96F;
             }
 
+            f5 *= (float)this.getAttribute(net.minecraftforge.common.ForgeMod.SWIM_SPEED.get()).getValue();
             this.moveRelative(f5, p_21280_);
             this.move(MoverType.SELF, this.getDeltaMovement());
             Vec3 vec36 = this.getDeltaMovement();
@@ -2065,11 +_,12 @@
             }
 
             if (this.onGround && !this.level.isClientSide) {
+               if (getSharedFlag(7) && !org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                this.setSharedFlag(7, false);
             }
          } else {
             BlockPos blockpos = this.getBlockPosBelowThatAffectsMyMovement();
-            float f2 = this.level.getBlockState(blockpos).getBlock().getFriction();
+            float f2 = this.level.getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getFriction(level, this.getBlockPosBelowThatAffectsMyMovement(), this);
             float f3 = this.onGround ? f2 * 0.91F : 0.91F;
             Vec3 vec35 = this.handleRelativeFrictionAndCalculateMovement(p_21280_, f2);
             double d2 = vec35.y;
@@ -2145,7 +_,7 @@
          double d0 = Mth.clamp(p_21298_.x, (double)-0.15F, (double)0.15F);
          double d1 = Mth.clamp(p_21298_.z, (double)-0.15F, (double)0.15F);
          double d2 = Math.max(p_21298_.y, (double)-0.15F);
-         if (d2 < 0.0D && !this.getFeetBlockState().is(Blocks.SCAFFOLDING) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
+         if (d2 < 0.0D && !this.getFeetBlockState().isScaffolding(this) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
             d2 = 0.0D;
          }
 
@@ -2173,6 +_,7 @@
    }
 
    public void tick() {
+      if (net.minecraftforge.common.ForgeHooks.onLivingUpdate(this)) return;
       super.tick();
       this.updatingUsingItem();
       this.updateSwimAmount();
@@ -2321,6 +_,7 @@
 
          ItemStack itemstack1 = this.getItemBySlot(equipmentslot);
          if (!ItemStack.matches(itemstack1, itemstack)) {
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.LivingEquipmentChangeEvent(this, equipmentslot, itemstack, itemstack1));
             if (map == null) {
                map = Maps.newEnumMap(EquipmentSlot.class);
             }
@@ -2501,7 +_,9 @@
       this.zza *= 0.98F;
       this.updateFallFlying();
       AABB aabb = this.getBoundingBox();
+      // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
       this.travel(new Vec3((double)this.xxa, (double)this.yya, (double)this.zza));
+      // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
       this.level.getProfiler().pop();
       this.level.getProfiler().push("freezing");
       boolean flag = this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES);
@@ -2544,6 +_,8 @@
       boolean flag = this.getSharedFlag(7);
       if (flag && !this.onGround && !this.isPassenger() && !this.hasEffect(MobEffects.LEVITATION)) {
          ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
+         flag = itemstack.canElytraFly(this) && itemstack.elytraFlightTick(this, this.fallFlyTicks);
+         if (false) //Forge: Moved to ElytraItem
          if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack)) {
             flag = true;
             int i = this.fallFlyTicks + 1;
@@ -2565,6 +_,7 @@
       }
 
       if (!this.level.isClientSide) {
+         if (flag != this.getSharedFlag(7) && !org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
          this.setSharedFlag(7, flag);
       }
 
@@ -2714,12 +_,19 @@
    }
 
    public boolean isPickable() {
-      return !this.isRemoved();
+      return !this.isRemoved() && this.collides; // CraftBukkit
    }
 
    public boolean isPushable() {
-      return this.isAlive() && !this.isSpectator() && !this.onClimbable();
-   }
+      return this.isAlive() && !this.isSpectator() && !this.onClimbable() && this.collides; // CraftBukkit
+   }
+
+   // CraftBukkit start - collidable API
+   @Override
+   public boolean canCollideWithBukkit(Entity entity) {
+      return isPushable() && this.collides != this.collidableExemptions.contains(entity.getUUID());
+   }
+   // CraftBukkit end
 
    public float getYHeadRot() {
       return this.yHeadRot;
@@ -2775,8 +_,16 @@
 
    private void updatingUsingItem() {
       if (this.isUsingItem()) {
-         if (ItemStack.isSameIgnoreDurability(this.getItemInHand(this.getUsedItemHand()), this.useItem)) {
-            this.useItem = this.getItemInHand(this.getUsedItemHand());
+         ItemStack itemStack = this.getItemInHand(this.getUsedItemHand());
+         if (net.minecraftforge.common.ForgeHooks.canContinueUsing(this.useItem, itemStack)) this.useItem = itemStack;
+         if (itemStack == this.useItem) {
+
+            if (!this.useItem.isEmpty()) {
+              useItemRemaining = net.minecraftforge.event.ForgeEventFactory.onItemUseTick(this, useItem, useItemRemaining);
+              if (useItemRemaining > 0)
+                 useItem.onUsingTick(this, useItemRemaining);
+            }
+
             this.updateUsingItem(this.useItem);
          } else {
             this.stopUsingItem();
@@ -2799,7 +_,7 @@
 
    private boolean shouldTriggerItemUseEffects() {
       int i = this.getUseItemRemainingTicks();
-      FoodProperties foodproperties = this.useItem.getItem().getFoodProperties();
+      FoodProperties foodproperties = this.useItem.getFoodProperties(this);
       boolean flag = foodproperties != null && foodproperties.isFastFood();
       flag |= i <= this.useItem.getUseDuration() - 7;
       return flag && i % 4 == 0;
@@ -2829,8 +_,10 @@
    public void startUsingItem(InteractionHand p_21159_) {
       ItemStack itemstack = this.getItemInHand(p_21159_);
       if (!itemstack.isEmpty() && !this.isUsingItem()) {
+         int duration = net.minecraftforge.event.ForgeEventFactory.onItemUseStart(this, itemstack, itemstack.getUseDuration());
+         if (duration <= 0) return;
          this.useItem = itemstack;
-         this.useItemRemaining = itemstack.getUseDuration();
+         this.useItemRemaining = duration;
          if (!this.level.isClientSide) {
             this.setLivingEntityFlag(1, true);
             this.setLivingEntityFlag(2, p_21159_ == InteractionHand.OFF_HAND);
@@ -2890,6 +_,9 @@
          vec31 = vec31.xRot(-this.getXRot() * ((float)Math.PI / 180F));
          vec31 = vec31.yRot(-this.getYRot() * ((float)Math.PI / 180F));
          vec31 = vec31.add(this.getX(), this.getEyeY(), this.getZ());
+         if (this.level instanceof ServerLevel) //Forge: Fix MC-2518 spawnParticle is nooped on server, need to use server specific variant
+             ((ServerLevel)this.level).sendParticles(new ItemParticleOption(ParticleTypes.ITEM, p_21061_), vec31.x, vec31.y, vec31.z, 1, vec3.x, vec3.y + 0.05D, vec3.z, 0.0D);
+         else
          this.level.addParticle(new ItemParticleOption(ParticleTypes.ITEM, p_21061_), vec31.x, vec31.y, vec31.z, vec3.x, vec3.y + 0.05D, vec3.z);
       }
 
@@ -2902,8 +_,28 @@
             this.releaseUsingItem();
          } else {
             if (!this.useItem.isEmpty() && this.isUsingItem()) {
+               ItemStack copy = this.useItem.copy();
                this.triggerItemUseEffects(this.useItem, 16);
-               ItemStack itemstack = this.useItem.finishUsingItem(this.level, this);
+               ItemStack stack = net.minecraftforge.event.ForgeEventFactory.onItemUseFinish(this, copy, getUseItemRemainingTicks(), this.useItem.finishUsingItem(this.level, this));
+
+               // CraftBukkit start - fire PlayerItemConsumeEvent
+               ItemStack itemstack;
+               if (this instanceof ServerPlayer) {
+                  org.bukkit.inventory.ItemStack craftItem = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asBukkitCopy(copy);
+                  org.bukkit.event.player.PlayerItemConsumeEvent event = new org.bukkit.event.player.PlayerItemConsumeEvent((org.bukkit.entity.Player) this.getBukkitEntity(), craftItem);
+                  level.getCraftServer().getPluginManager().callEvent(event);
+                  if (event.isCancelled()) {
+                     // Update client
+                     ((ServerPlayer) this).getBukkitEntity().updateInventory();
+                     ((ServerPlayer) this).getBukkitEntity().updateScaledHealth();
+                     return;
+                  }
+                  itemstack = (craftItem.equals(event.getItem())) ? stack : org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asNMSCopy(event.getItem()).finishUsingItem(level, this);
+               } else {
+                  itemstack = this.useItem.finishUsingItem(this.level, this);
+               }
+               // CraftBukkit end
+
                if (itemstack != this.useItem) {
                   this.setItemInHand(interactionhand, itemstack);
                }
@@ -2929,7 +_,11 @@
 
    public void releaseUsingItem() {
       if (!this.useItem.isEmpty()) {
+         if (!net.minecraftforge.event.ForgeEventFactory.onUseItemStop(this, useItem, this.getUseItemRemainingTicks())) {
+            ItemStack copy = this instanceof Player ? useItem.copy() : null;
          this.useItem.releaseUsing(this.level, this, this.getUseItemRemainingTicks());
+           if (copy != null && useItem.isEmpty()) net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem((Player)this, copy, getUsedItemHand());
+         }
          if (this.useItem.useOnRelease()) {
             this.updatingUsingItem();
          }
@@ -2977,6 +_,12 @@
    }
 
    public boolean randomTeleport(double p_20985_, double p_20986_, double p_20987_, boolean p_20988_) {
+      // CraftBukkit start
+      return this.randomTeleport(p_20985_, p_20986_, p_20987_, p_20988_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(false);
+   }
+
+   public Optional<Boolean> randomTeleport(double p_20985_, double p_20986_, double p_20987_, boolean p_20988_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      // CraftBukkit end
       double d0 = this.getX();
       double d1 = this.getY();
       double d2 = this.getZ();
@@ -2999,16 +_,40 @@
          }
 
          if (flag1) {
-            this.teleportTo(p_20985_, d3, p_20987_);
+            // CraftBukkit start - Teleport event
+            // this.teleportTo(p_20985_, d3, p_20987_);
+            // first set position, to check if the place to teleport is valid
+            this.setPos(p_20985_, d3, p_20987_);
             if (level.noCollision(this) && !level.containsAnyLiquid(this.getBoundingBox())) {
                flag = true;
             }
+
+            // now revert and call event if the teleport place is valid
+            this.setPos(d0, d1, d2);
+            if (flag1) {
+               if (!(this instanceof ServerPlayer)) {
+                  org.bukkit.event.entity.EntityTeleportEvent teleport = new org.bukkit.event.entity.EntityTeleportEvent(this.getBukkitEntity(), new org.bukkit.Location(this.level.getWorld(), d0, d1, d2), new org.bukkit.Location(this.level.getWorld(), p_20985_, d3, p_20987_));
+                  this.level.getCraftServer().getPluginManager().callEvent(teleport);
+                  if (!teleport.isCancelled()) {
+                     org.bukkit.Location to = teleport.getTo();
+                     this.teleportTo(to.getX(), to.getY(), to.getZ());
+                  } else {
+                     return Optional.empty();
+                  }
+               } else {
+                  // player teleport event is called in the underlining code
+                  if (((ServerPlayer) this).connection.teleport(d0, d3, d2, this.getYRot(), this.getXRot(), java.util.Collections.emptySet(), false, cause)) {                     return Optional.empty();
+                  }
+               }
+            }
+            // CraftBukkit end
+
          }
       }
 
       if (!flag) {
-         this.teleportTo(d0, d1, d2);
-         return false;
+         // this.teleportTo(d0, d1, d2); // CraftBukkit - already set the location back
+         return Optional.of(false); // CraftBukkit
       } else {
          if (p_20988_) {
             level.broadcastEntityEvent(this, (byte)46);
@@ -3018,7 +_,7 @@
             ((PathfinderMob)this).getNavigation().stop();
          }
 
-         return true;
+         return Optional.of(true); // CraftBukkit
       }
    }
 
@@ -3076,8 +_,8 @@
       }
 
       BlockState blockstate = this.level.getBlockState(p_21141_);
-      if (blockstate.getBlock() instanceof BedBlock) {
-         this.level.setBlock(p_21141_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(true)), 3);
+      if (blockstate.isBed(level, p_21141_, this)) {
+         blockstate.setBedOccupied(level, p_21141_, this, true);
       }
 
       this.setPose(Pose.SLEEPING);
@@ -3093,15 +_,15 @@
 
    private boolean checkBedExists() {
       return this.getSleepingPos().map((p_147236_) -> {
-         return this.level.getBlockState(p_147236_).getBlock() instanceof BedBlock;
+         return net.minecraftforge.event.ForgeEventFactory.fireSleepingLocationCheck(this, p_147236_);
       }).orElse(false);
    }
 
    public void stopSleeping() {
       this.getSleepingPos().filter(this.level::hasChunkAt).ifPresent((p_147228_) -> {
          BlockState blockstate = this.level.getBlockState(p_147228_);
-         if (blockstate.getBlock() instanceof BedBlock) {
-            this.level.setBlock(p_147228_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(false)), 3);
+         if (blockstate.isBed(level, p_147228_, this)) {
+            blockstate.setBedOccupied(level, p_147228_, this, false);
             Vec3 vec31 = BedBlock.findStandUpPosition(this.getType(), this.level, p_147228_, this.getYRot()).orElseGet(() -> {
                BlockPos blockpos = p_147228_.above();
                return new Vec3((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.1D, (double)blockpos.getZ() + 0.5D);
@@ -3123,7 +_,9 @@
    @Nullable
    public Direction getBedOrientation() {
       BlockPos blockpos = this.getSleepingPos().orElse((BlockPos)null);
-      return blockpos != null ? BedBlock.getBedOrientation(this.level, blockpos) : null;
+      if (blockpos == null) return Direction.UP;
+      BlockState state = this.level.getBlockState(blockpos);
+      return !state.isBed(level, blockpos, this) ? Direction.UP : state.getBedDirection(level, blockpos);
    }
 
    public boolean isInWall() {
@@ -3139,7 +_,7 @@
    }
 
    public ItemStack getProjectile(ItemStack p_21272_) {
-      return ItemStack.EMPTY;
+      return net.minecraftforge.common.ForgeHooks.getProjectile(this, p_21272_, ItemStack.EMPTY);
    }
 
    public ItemStack eat(Level p_21067_, ItemStack p_21068_) {
@@ -3160,8 +_,9 @@
    private void addEatEffect(ItemStack p_21064_, Level p_21065_, LivingEntity p_21066_) {
       Item item = p_21064_.getItem();
       if (item.isEdible()) {
-         for(Pair<MobEffectInstance, Float> pair : item.getFoodProperties().getEffects()) {
+         for(Pair<MobEffectInstance, Float> pair : p_21064_.getFoodProperties(this).getEffects()) {
             if (!p_21065_.isClientSide && pair.getFirst() != null && p_21065_.random.nextFloat() < pair.getSecond()) {
+               p_21066_.prepare(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
                p_21066_.addEffect(new MobEffectInstance(pair.getFirst()));
             }
          }
@@ -3196,6 +_,64 @@
       this.broadcastBreakEvent(p_21191_ == InteractionHand.MAIN_HAND ? EquipmentSlot.MAINHAND : EquipmentSlot.OFFHAND);
    }
 
+   /* ==== FORGE START ==== */
+   /***
+    * Removes all potion effects that have curativeItem as a curative item for its effect
+    * @param curativeItem The itemstack we are using to cure potion effects
+    */
+   public boolean curePotionEffects(ItemStack curativeItem) {
+      if (this.level.isClientSide)
+         return false;
+      boolean ret = false;
+      Iterator<MobEffectInstance> itr = this.activeEffects.values().iterator();
+      while (itr.hasNext()) {
+         MobEffectInstance effect = itr.next();
+         if (effect.isCurativeItem(curativeItem) && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.PotionEvent.PotionRemoveEvent(this, effect))) {
+            this.onEffectRemoved(effect);
+            itr.remove();
+            ret = true;
+            this.effectsDirty = true;
+         }
+      }
+      return ret;
+   }
+
+   /**
+    * Returns true if the entity's rider (EntityPlayer) should face forward when mounted.
+    * currently only used in vanilla code by pigs.
+    *
+    * @param player The player who is riding the entity.
+    * @return If the player should orient the same direction as this entity.
+    */
+   public boolean shouldRiderFaceForward(Player player) {
+      return this instanceof net.minecraft.world.entity.animal.Pig;
+   }
+
+   private net.minecraftforge.common.util.LazyOptional<?>[] handlers = net.minecraftforge.items.wrapper.EntityEquipmentInvWrapper.create(this);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (this.isAlive() && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == null) return handlers[2].cast();
+         else if (facing.getAxis().isVertical()) return handlers[0].cast();
+         else if (facing.getAxis().isHorizontal()) return handlers[1].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   public void invalidateCaps() {
+      super.invalidateCaps();
+      for (int x = 0; x < handlers.length; x++)
+         handlers[x].invalidate();
+   }
+
+   @Override
+   public void reviveCaps() {
+      super.reviveCaps();
+      handlers = net.minecraftforge.items.wrapper.EntityEquipmentInvWrapper.create(this);
+   }
+
    public AABB getBoundingBoxForCulling() {
       if (this.getItemBySlot(EquipmentSlot.HEAD).is(Items.DRAGON_HEAD)) {
          float f = 0.5F;
@@ -3206,6 +_,8 @@
    }
 
    public static EquipmentSlot getEquipmentSlotForItem(ItemStack p_147234_) {
+      final EquipmentSlot slot = p_147234_.getEquipmentSlot();
+      if (slot != null) return slot; // FORGE: Allow modders to set a non-default equipment slot for a stack; e.g. a non-armor chestplate-slot item
       Item item = p_147234_.getItem();
       if (!p_147234_.is(Items.CARVED_PUMPKIN) && (!(item instanceof BlockItem) || !(((BlockItem)item).getBlock() instanceof AbstractSkullBlock))) {
          if (item instanceof ArmorItem) {
@@ -3213,7 +_,7 @@
          } else if (p_147234_.is(Items.ELYTRA)) {
             return EquipmentSlot.CHEST;
          } else {
-            return p_147234_.is(Items.SHIELD) ? EquipmentSlot.OFFHAND : EquipmentSlot.MAINHAND;
+            return p_147234_.canPerformAction(net.minecraftforge.common.ToolActions.SHIELD_BLOCK) ? EquipmentSlot.OFFHAND : EquipmentSlot.MAINHAND;
          }
       } else {
          return EquipmentSlot.HEAD;
@@ -3278,6 +_,8 @@
       this.setDeltaMovement((double)((float)p_147206_.getXd() / 8000.0F), (double)((float)p_147206_.getYd() / 8000.0F), (double)((float)p_147206_.getZd() / 8000.0F));
    }
 
-   public static record Fallsounds(SoundEvent small, SoundEvent big) {
+
+
+    public static record Fallsounds(SoundEvent small, SoundEvent big) {
    }
 }
