--- a/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -85,6 +_,7 @@
    private final Node[] nodes = new Node[24];
    private final int[] nodeAdjacency = new int[24];
    private final BinaryHeap openSet = new BinaryHeap();
+   private net.minecraft.world.level.Explosion explosionSource;
 
    public EnderDragon(EntityType<? extends EnderDragon> p_31096_, Level p_31097_) {
       super(EntityType.ENDER_DRAGON, p_31097_);
@@ -107,6 +_,15 @@
       }
 
       this.phaseManager = new EnderDragonPhaseManager(this);
+      this.setId(ENTITY_COUNTER.getAndAdd(this.subEntities.length + 1) + 1); // Forge: Fix MC-158205: Make sure part ids are successors of parent mob id
+      this.explosionSource = new net.minecraft.world.level.Explosion(p_31097_, this, null, null, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, net.minecraft.world.level.Explosion.BlockInteraction.DESTROY); // CraftBukkit - reusable source for CraftTNTPrimed.getSource() //Magma - moved to constructor and added level
+   }
+
+   @Override
+   public void setId(int p_20235_) {
+      super.setId(p_20235_);
+      for (int i = 0; i < this.subEntities.length; i++) // Forge: Fix MC-158205: Set part ids to successors of parent mob id
+         this.subEntities[i].setId(p_20235_ + i + 1);
    }
 
    public static AttributeSupplier.Builder createAttributes() {
@@ -150,7 +_,11 @@
       return adouble;
    }
 
+   @javax.annotation.Nullable private Player unlimitedLastHurtByPlayer = null;
    public void aiStep() {
+      // lastHurtByPlayer is cleared after 100 ticks, capture it indefinitely in unlimitedLastHurtByPlayer for LivingExperienceDropEvent
+      if (this.lastHurtByPlayer != null) this.unlimitedLastHurtByPlayer = lastHurtByPlayer;
+      if (this.unlimitedLastHurtByPlayer != null && this.unlimitedLastHurtByPlayer.isRemoved()) this.unlimitedLastHurtByPlayer = null;
       this.processFlappingMovement();
       if (this.level.isClientSide) {
          this.setHealth(this.getHealth());
@@ -219,7 +_,7 @@
                }
 
                Vec3 vec31 = dragonphaseinstance.getFlyTargetLocation();
-               if (vec31 != null) {
+               if (vec31 != null && dragonphaseinstance.getPhase() != EnderDragonPhase.HOVERING) { // CraftBukkit - Don't move when hovering
                   double d7 = vec31.x - this.getX();
                   double d8 = vec31.y - this.getY();
                   double d9 = vec31.z - this.getZ();
@@ -349,7 +_,14 @@
          if (this.nearestCrystal.isRemoved()) {
             this.nearestCrystal = null;
          } else if (this.tickCount % 10 == 0 && this.getHealth() < this.getMaxHealth()) {
-            this.setHealth(this.getHealth() + 1.0F);
+            // CraftBukkit start
+            org.bukkit.event.entity.EntityRegainHealthEvent event = new org.bukkit.event.entity.EntityRegainHealthEvent(this.getBukkitEntity(), 1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+               this.setHealth((float) (this.getHealth() + event.getAmount()));
+            }
+            // CraftBukkit end
          }
       }
 
@@ -413,6 +_,9 @@
       int j1 = Mth.floor(p_31140_.maxZ);
       boolean flag = false;
       boolean flag1 = false;
+      // CraftBukkit start - Create a list to hold all the destroyed blocks
+      List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<org.bukkit.block.Block>();
+      // CraftBukkit end
 
       for(int k1 = i; k1 <= l; ++k1) {
          for(int l1 = j; l1 <= i1; ++l1) {
@@ -420,8 +_,12 @@
                BlockPos blockpos = new BlockPos(k1, l1, i2);
                BlockState blockstate = this.level.getBlockState(blockpos);
                if (!blockstate.isAir() && blockstate.getMaterial() != Material.FIRE) {
-                  if (this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && !blockstate.is(BlockTags.DRAGON_IMMUNE)) {
-                     flag1 = this.level.removeBlock(blockpos, false) || flag1;
+                  if (net.minecraftforge.common.ForgeHooks.canEntityDestroy(this.level, blockpos, this) && !blockstate.is(BlockTags.DRAGON_IMMUNE)) {
+                     // CraftBukkit start - Add blocks to list rather than destroying them
+                     // flag1 = this.level.removeBlock(blockpos, false) || flag1;
+                     flag1 = true;
+                     destroyedBlocks.add(org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(level, blockpos));
+                     // CraftBukkit end
                   } else {
                      flag = true;
                   }
@@ -430,6 +_,51 @@
          }
       }
 
+      // CraftBukkit start - Set off an org.bukkit.event.entity.EntityExplodeEvent for the dragon exploding all these blocks
+      // SPIGOT-4882: don't fire event if nothing hit
+      if (!flag1) {
+         return flag;
+      }
+
+      org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
+      org.bukkit.event.entity.EntityExplodeEvent event = new org.bukkit.event.entity.EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
+      bukkitEntity.getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
+         // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
+         return flag;
+      } else if (event.getYield() == 0F) {
+         // Yield zero ==> no drops
+         for (org.bukkit.block.Block block : event.blockList()) {
+            this.level.removeBlock(new BlockPos(block.getX(), block.getY(), block.getZ()), false);
+         }
+      } else {
+         for (org.bukkit.block.Block block : event.blockList()) {
+            org.bukkit.Material blockId = block.getType();
+            if (blockId.isAir()) {
+               continue;
+            }
+
+            org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock craftBlock = ((org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock) block);
+            BlockPos blockposition = craftBlock.getPosition();
+
+            net.minecraft.world.level.block.Block nmsBlock = craftBlock.getNMS().getBlock();
+            if (nmsBlock.dropFromExplosion(explosionSource)) {
+               net.minecraft.world.level.block.entity.BlockEntity tileentity = craftBlock.getNMS().hasBlockEntity() ? this.level.getBlockEntity(blockposition) : null;
+               net.minecraft.world.level.storage.loot.LootContext.Builder loottableinfo_builder = (new net.minecraft.world.level.storage.loot.LootContext.Builder((ServerLevel) this.level)).withRandom(this.level.random).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.TOOL, net.minecraft.world.item.ItemStack.EMPTY).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.EXPLOSION_RADIUS, 1.0F / event.getYield()).withOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.BLOCK_ENTITY, tileentity);
+
+               craftBlock.getNMS().getDrops(loottableinfo_builder).forEach((itemstack) -> {
+                  net.minecraft.world.level.block.Block.popResource(level, blockposition, itemstack);
+               });
+               craftBlock.getNMS().spawnAfterBreak((ServerLevel) level, blockposition, net.minecraft.world.item.ItemStack.EMPTY);
+            }
+            nmsBlock.wasExploded(level, blockposition, explosionSource);
+
+            this.level.removeBlock(blockposition, false);
+         }
+      }
+      // CraftBukkit end
+
       if (flag1) {
          BlockPos blockpos1 = new BlockPos(i + this.random.nextInt(l - i + 1), j + this.random.nextInt(i1 - j + 1), k + this.random.nextInt(j1 - k + 1));
          this.level.levelEvent(2008, blockpos1, 0);
@@ -514,11 +_,29 @@
 
       if (this.level instanceof ServerLevel) {
          if (this.dragonDeathTime > 150 && this.dragonDeathTime % 5 == 0 && flag) {
-            ExperienceOrb.award((ServerLevel)this.level, this.position(), Mth.floor((float)i * 0.08F));
+            int award = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.unlimitedLastHurtByPlayer, Mth.floor((float)i * 0.08F));
+            ExperienceOrb.award((ServerLevel)this.level, this.position(), award);
          }
 
          if (this.dragonDeathTime == 1 && !this.isSilent()) {
-            this.level.globalLevelEvent(1028, this.blockPosition(), 0);
+            // CraftBukkit start - Use relative location for far away sounds
+            // this.level.globalLevelEvent(1028, this.blockPosition(), 0);
+            int viewDistance = ((ServerLevel) this.level).getCraftServer().getViewDistance() * 16;
+            for (net.minecraft.server.level.ServerPlayer player : this.level.getServer().getPlayerList().players) {
+               double deltaX = this.getX() - player.getX();
+               double deltaZ = this.getZ() - player.getZ();
+               double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+               if ( level.spigotConfig.dragonDeathSoundRadius > 0 && distanceSquared > level.spigotConfig.dragonDeathSoundRadius * level.spigotConfig.dragonDeathSoundRadius ) continue; // Spigot
+               if (distanceSquared > viewDistance * viewDistance) {
+                  double deltaLength = Math.sqrt(distanceSquared);
+                  double relativeX = player.getX() + (deltaX / deltaLength) * viewDistance;
+                  double relativeZ = player.getZ() + (deltaZ / deltaLength) * viewDistance;
+                  player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelEventPacket(1028, new BlockPos((int) relativeX, (int) this.getY(), (int) relativeZ), 0, true));
+               } else {
+                  player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelEventPacket(1028, new BlockPos((int) this.getX(), (int) this.getY(), (int) this.getZ()), 0, true));
+               }
+            }
+            // CraftBukkit end
          }
       }
 
@@ -527,7 +_,8 @@
       this.yBodyRot = this.getYRot();
       if (this.dragonDeathTime == 200 && this.level instanceof ServerLevel) {
          if (flag) {
-            ExperienceOrb.award((ServerLevel)this.level, this.position(), Mth.floor((float)i * 0.2F));
+            int award = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.unlimitedLastHurtByPlayer, Mth.floor((float)i * 0.2F));
+            ExperienceOrb.award((ServerLevel)this.level, this.position(), award);
          }
 
          if (this.dragonFight != null) {
@@ -849,8 +_,19 @@
       return false;
    }
 
+   @Override
+   public boolean isMultipartEntity() {
+      return true;
+   }
+
+   @Override
+   public net.minecraftforge.entity.PartEntity<?>[] getParts() {
+      return this.subEntities;
+   }
+
    public void recreateFromPacket(ClientboundAddMobPacket p_149572_) {
       super.recreateFromPacket(p_149572_);
+      if (true) return; // Forge: Fix MC-158205: Moved into setId()
       EnderDragonPart[] aenderdragonpart = this.getSubEntities();
 
       for(int i = 0; i < aenderdragonpart.length; ++i) {
