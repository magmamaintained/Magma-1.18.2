--- a/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -123,13 +_,13 @@
          if (this.sections[l].hasOnlyAir() && p_63218_.is(Blocks.AIR)) {
             return p_63218_;
          } else {
-            if (p_63218_.getLightEmission() > 0) {
+            if (p_63218_.getLightEmission(this, p_63217_) > 0) {
                this.lights.add(new BlockPos((i & 15) + this.getPos().getMinBlockX(), j, (k & 15) + this.getPos().getMinBlockZ()));
             }
 
             LevelChunkSection levelchunksection = this.getSection(l);
             BlockState blockstate = levelchunksection.setBlockState(i & 15, j & 15, k & 15, p_63218_);
-            if (this.status.isOrAfter(ChunkStatus.FEATURES) && p_63218_ != blockstate && (p_63218_.getLightBlock(this, p_63217_) != blockstate.getLightBlock(this, p_63217_) || p_63218_.getLightEmission() != blockstate.getLightEmission() || p_63218_.useShapeForLightOcclusion() || blockstate.useShapeForLightOcclusion())) {
+            if (this.status.isOrAfter(ChunkStatus.FEATURES) && p_63218_ != blockstate && (p_63218_.getLightBlock(this, p_63217_) != blockstate.getLightBlock(this, p_63217_) || p_63218_.getLightEmission(this, p_63217_) != blockstate.getLightEmission(this, p_63217_) || p_63218_.useShapeForLightOcclusion() || blockstate.useShapeForLightOcclusion())) {
                this.lightEngine.checkBlock(p_63217_);
             }
 
