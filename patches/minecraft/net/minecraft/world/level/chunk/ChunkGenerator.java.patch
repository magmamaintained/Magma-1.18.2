--- a/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -13,35 +_,8 @@
 import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArraySet;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Random;
-import java.util.Set;
-import java.util.Map.Entry;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
-import java.util.concurrent.TimeUnit;
-import java.util.function.Function;
-import java.util.function.Predicate;
-import java.util.function.Supplier;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import javax.annotation.Nullable;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
-import net.minecraft.SharedConstants;
-import net.minecraft.Util;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Holder;
-import net.minecraft.core.HolderSet;
-import net.minecraft.core.Registry;
-import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.SectionPos;
+import net.minecraft.*;
+import net.minecraft.core.*;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.resources.RegistryOps;
 import net.minecraft.resources.ResourceKey;
@@ -49,663 +_,745 @@
 import net.minecraft.server.level.WorldGenRegion;
 import net.minecraft.util.random.WeightedRandomList;
 import net.minecraft.world.entity.MobCategory;
-import net.minecraft.world.level.ChunkPos;
-import net.minecraft.world.level.LevelHeightAccessor;
-import net.minecraft.world.level.LevelReader;
-import net.minecraft.world.level.NoiseColumn;
-import net.minecraft.world.level.StructureFeatureManager;
-import net.minecraft.world.level.WorldGenLevel;
-import net.minecraft.world.level.biome.Biome;
-import net.minecraft.world.level.biome.BiomeManager;
-import net.minecraft.world.level.biome.BiomeSource;
-import net.minecraft.world.level.biome.Climate;
-import net.minecraft.world.level.biome.MobSpawnSettings;
-import net.minecraft.world.level.levelgen.DebugLevelSource;
-import net.minecraft.world.level.levelgen.FlatLevelSource;
-import net.minecraft.world.level.levelgen.GenerationStep;
-import net.minecraft.world.level.levelgen.Heightmap;
-import net.minecraft.world.level.levelgen.LegacyRandomSource;
-import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
-import net.minecraft.world.level.levelgen.RandomSupport;
-import net.minecraft.world.level.levelgen.WorldgenRandom;
-import net.minecraft.world.level.levelgen.XoroshiroRandomSource;
+import net.minecraft.world.level.*;
+import net.minecraft.world.level.biome.*;
+import net.minecraft.world.level.levelgen.*;
 import net.minecraft.world.level.levelgen.blending.Blender;
 import net.minecraft.world.level.levelgen.feature.ConfiguredStructureFeature;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.placement.PlacedFeature;
-import net.minecraft.world.level.levelgen.structure.BoundingBox;
-import net.minecraft.world.level.levelgen.structure.StructureCheckResult;
-import net.minecraft.world.level.levelgen.structure.StructureSet;
-import net.minecraft.world.level.levelgen.structure.StructureSpawnOverride;
-import net.minecraft.world.level.levelgen.structure.StructureStart;
+import net.minecraft.world.level.levelgen.structure.*;
 import net.minecraft.world.level.levelgen.structure.placement.ConcentricRingsStructurePlacement;
 import net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStructurePlacement;
 import net.minecraft.world.level.levelgen.structure.placement.StructurePlacement;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager;
 import org.apache.commons.lang3.mutable.MutableBoolean;
+import org.bukkit.craftbukkit.v1_18_R2.generator.CraftLimitedRegion;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Function;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
 public abstract class ChunkGenerator implements BiomeManager.NoiseBiomeSource {
-   private static final Logger f_211627_;
-   public static final Codec<ChunkGenerator> f_62136_;
-   public final Registry<StructureSet> f_207955_;
-   protected final BiomeSource f_62137_;
-   protected final BiomeSource f_62138_;
-   public final Optional<HolderSet<StructureSet>> f_207956_;
-   private final Map<ConfiguredStructureFeature<?, ?>, List<StructurePlacement>> f_207957_ = new Object2ObjectOpenHashMap<>();
-   private final Map<ConcentricRingsStructurePlacement, CompletableFuture<List<ChunkPos>>> f_204350_ = new Object2ObjectArrayMap<>();
-   private boolean f_207958_;
-   /** @deprecated */
-   @Deprecated
-   public final long f_212255_;
-
-   protected static final <T extends ChunkGenerator> P1<Mu<T>, Registry<StructureSet>> m_208005_(Instance<T> p_208006_) {
-      return p_208006_.group(RegistryOps.m_206832_(Registry.f_211073_).forGetter((p_208008_) -> {
-         return p_208008_.f_207955_;
-      }));
-   }
-
-   public ChunkGenerator(Registry<StructureSet> p_207960_, Optional<HolderSet<StructureSet>> p_207961_, BiomeSource p_207962_) {
-      this(p_207960_, p_207961_, p_207962_, p_207962_, 0L);
-   }
-
-   public ChunkGenerator(Registry<StructureSet> p_207964_, Optional<HolderSet<StructureSet>> p_207965_, BiomeSource p_207966_, BiomeSource p_207967_, long p_207968_) {
-      this.f_207955_ = p_207964_;
-      this.f_62137_ = p_207966_;
-      this.f_62138_ = p_207967_;
-      this.f_207956_ = p_207965_;
-      this.f_212255_ = p_207968_;
-   }
-
-   public Stream<Holder<StructureSet>> m_207969_() {
-      return this.f_207956_.isPresent() ? this.f_207956_.get().m_203614_() : this.f_207955_.m_203611_().map(Holder::m_205706_);
-   }
-
-   private void m_208097_() {
-      Set<Holder<Biome>> set = this.f_62138_.m_207840_();
-      this.m_207969_().forEach((p_208094_) -> {
-         StructureSet structureset = p_208094_.m_203334_();
-
-         for(StructureSet.StructureSelectionEntry structureset$structureselectionentry : structureset.f_210003_()) {
-            this.f_207957_.computeIfAbsent(structureset$structureselectionentry.f_210026_().m_203334_(), (p_208087_) -> {
-               return new ArrayList();
-            }).add(structureset.f_210004_());
-         }
-
-         StructurePlacement structureplacement = structureset.f_210004_();
-         if (structureplacement instanceof ConcentricRingsStructurePlacement) {
-            ConcentricRingsStructurePlacement concentricringsstructureplacement = (ConcentricRingsStructurePlacement)structureplacement;
-            if (structureset.f_210003_().stream().anyMatch((p_208071_) -> {
-               return p_208071_.m_210035_(set::contains);
-            })) {
-               this.f_204350_.put(concentricringsstructureplacement, this.m_211667_(p_208094_, concentricringsstructureplacement));
-            }
-         }
-
-      });
-   }
-
-   private CompletableFuture<List<ChunkPos>> m_211667_(Holder<StructureSet> p_211668_, ConcentricRingsStructurePlacement p_211669_) {
-      return p_211669_.f_204952_() == 0 ? CompletableFuture.completedFuture(List.of()) : CompletableFuture.supplyAsync(Util.m_183946_("placement calculation", () -> {
-         Stopwatch stopwatch = Stopwatch.createStarted(Util.f_211544_);
-         List<ChunkPos> list = new ArrayList<>();
-         Set<Holder<Biome>> set = p_211668_.m_203334_().f_210003_().stream().flatMap((p_208015_) -> {
-            return p_208015_.f_210026_().m_203334_().m_209752_().m_203614_();
-         }).collect(Collectors.toSet());
-         int i = p_211669_.f_204950_();
-         int j = p_211669_.f_204952_();
-         int k = p_211669_.f_204951_();
-         Random random = new Random();
-         random.setSeed(this.f_212255_);
-         double d0 = random.nextDouble() * Math.PI * 2.0D;
-         int l = 0;
-         int i1 = 0;
-
-         for(int j1 = 0; j1 < j; ++j1) {
-            double d1 = (double)(4 * i + i * i1 * 6) + (random.nextDouble() - 0.5D) * (double)i * 2.5D;
-            int k1 = (int)Math.round(Math.cos(d0) * d1);
-            int l1 = (int)Math.round(Math.sin(d0) * d1);
-            Pair<BlockPos, Holder<Biome>> pair = this.f_62137_.m_207829_(SectionPos.m_175554_(k1, 8), 0, SectionPos.m_175554_(l1, 8), 112, set::contains, random, this.m_183403_());
-            if (pair != null) {
-               BlockPos blockpos = pair.getFirst();
-               k1 = SectionPos.m_123171_(blockpos.m_123341_());
-               l1 = SectionPos.m_123171_(blockpos.m_123343_());
-            }
-
-            list.add(new ChunkPos(k1, l1));
-            d0 += (Math.PI * 2D) / (double)k;
-            ++l;
-            if (l == k) {
-               ++i1;
-               l = 0;
-               k += 2 * k / (i1 + 1);
-               k = Math.min(k, j - j1);
-               d0 += random.nextDouble() * Math.PI * 2.0D;
-            }
-         }
-
-         double d2 = (double)stopwatch.stop().elapsed(TimeUnit.MILLISECONDS) / 1000.0D;
-         f_211627_.debug("Calculation for {} took {}s", p_211668_, d2);
-         return list;
-      }), Util.m_183991_());
-   }
-
-   protected abstract Codec<? extends ChunkGenerator> m_6909_();
-
-   public Optional<ResourceKey<Codec<? extends ChunkGenerator>>> m_187743_() {
-      return Registry.f_122890_.m_7854_(this.m_6909_());
-   }
-
-   public abstract ChunkGenerator m_6819_(long p_62156_);
-
-   public CompletableFuture<ChunkAccess> m_196423_(Registry<Biome> p_196743_, Executor p_196744_, Blender p_196745_, StructureFeatureManager p_196746_, ChunkAccess p_196747_) {
-      return CompletableFuture.supplyAsync(Util.m_183946_("init_biomes", () -> {
-         p_196747_.m_183442_(this.f_62138_::m_203407_, this.m_183403_());
-         return p_196747_;
-      }), Util.m_183991_());
-   }
-
-   public abstract Climate.Sampler m_183403_();
-
-   public Holder<Biome> m_203495_(int p_204416_, int p_204417_, int p_204418_) {
-      return this.m_62218_().m_203407_(p_204416_, p_204417_, p_204418_, this.m_183403_());
-   }
-
-   public abstract void m_183516_(WorldGenRegion p_187691_, long p_187692_, BiomeManager p_187693_, StructureFeatureManager p_187694_, ChunkAccess p_187695_, GenerationStep.Carving p_187696_);
-
-   @Nullable
-   public Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> m_207970_(ServerLevel p_207971_, HolderSet<ConfiguredStructureFeature<?, ?>> p_207972_, BlockPos p_207973_, int p_207974_, boolean p_207975_) {
-      Set<Holder<Biome>> set = p_207972_.m_203614_().flatMap((p_211699_) -> {
-         return p_211699_.m_203334_().m_209752_().m_203614_();
-      }).collect(Collectors.toSet());
-      if (set.isEmpty()) {
-         return null;
-      } else {
-         Set<Holder<Biome>> set1 = this.f_62138_.m_207840_();
-         if (Collections.disjoint(set1, set)) {
+    private static final Logger f_211627_;
+    public static final Codec<ChunkGenerator> f_62136_;
+    public final Registry<StructureSet> f_207955_;
+    protected final BiomeSource f_62137_;
+    protected final BiomeSource f_62138_;
+    public final Optional<HolderSet<StructureSet>> f_207956_;
+    private final Map<ConfiguredStructureFeature<?, ?>, List<StructurePlacement>> f_207957_ = new Object2ObjectOpenHashMap<>();
+    private final Map<ConcentricRingsStructurePlacement, CompletableFuture<List<ChunkPos>>> f_204350_ = new Object2ObjectArrayMap<>();
+    private boolean f_207958_;
+    /**
+     * @deprecated
+     */
+    @Deprecated
+    public final long f_212255_;
+    public org.spigotmc.SpigotWorldConfig conf; // Spigot
+
+    protected static final <T extends ChunkGenerator> P1<Mu<T>, Registry<StructureSet>> m_208005_(Instance<T> p_208006_) {
+        return p_208006_.group( RegistryOps.m_206832_( Registry.f_211073_ ).forGetter( (p_208008_) -> {
+            return p_208008_.f_207955_;
+        } ) );
+    }
+
+    public ChunkGenerator(Registry<StructureSet> p_207960_, Optional<HolderSet<StructureSet>> p_207961_, BiomeSource p_207962_) {
+        this( p_207960_, p_207961_, p_207962_, p_207962_, 0L );
+    }
+
+    public ChunkGenerator(Registry<StructureSet> p_207964_, Optional<HolderSet<StructureSet>> p_207965_, BiomeSource p_207966_, BiomeSource p_207967_, long p_207968_) {
+        this.f_207955_ = p_207964_;
+        this.f_62137_ = p_207966_;
+        this.f_62138_ = p_207967_;
+        this.f_207956_ = p_207965_;
+        this.f_212255_ = p_207968_;
+    }
+
+    public Stream<Holder<StructureSet>> m_207969_() {
+        return this.f_207956_.isPresent() ? this.f_207956_.get().m_203614_() : this.f_207955_.m_203611_().map( Holder::m_205706_ );
+    }
+
+    // Spigot start
+    private Stream<StructureSet> possibleStructureSetsSpigot() {
+        return m_207969_().map( Holder::m_203334_ ).map( (structureset) -> {
+            if (structureset.f_210004_() instanceof RandomSpreadStructurePlacement randomConfig) {
+                String name = f_207955_.m_7981_( structureset ).m_135815_();
+                int seed = randomConfig.f_204976_();
+
+                switch (name) {
+                    case "desert_pyramids":
+                        seed = conf.desertSeed;
+                        break;
+                    case "end_cities":
+                        seed = conf.endCitySeed;
+                        break;
+                    case "nether_complexes":
+                        seed = conf.netherSeed;
+                        break;
+                    case "igloos":
+                        seed = conf.iglooSeed;
+                        break;
+                    case "jungle_temples":
+                        seed = conf.jungleSeed;
+                        break;
+                    case "woodland_mansions":
+                        seed = conf.mansionSeed;
+                        break;
+                    case "ocean_monuments":
+                        seed = conf.monumentSeed;
+                        break;
+                    case "nether_fossils":
+                        seed = conf.fossilSeed;
+                        break;
+                    case "ocean_ruins":
+                        seed = conf.oceanSeed;
+                        break;
+                    case "pillager_outposts":
+                        seed = conf.outpostSeed;
+                        break;
+                    case "ruined_portals":
+                        seed = conf.portalSeed;
+                        break;
+                    case "shipwrecks":
+                        seed = conf.shipwreckSeed;
+                        break;
+                    case "swamp_huts":
+                        seed = conf.swampSeed;
+                        break;
+                    case "villages":
+                        seed = conf.villageSeed;
+                        break;
+                }
+
+                structureset = new StructureSet( structureset.f_210003_(), new RandomSpreadStructurePlacement( randomConfig.f_204973_(), randomConfig.f_204974_(), randomConfig.f_204975_(), seed, randomConfig.f_204977_() ) );
+            }
+            return structureset;
+        } );
+    }
+    // Spigot end
+
+
+    private void m_208097_() {
+        Set<Holder<Biome>> set = this.f_62138_.m_207840_();
+        // Spigot start
+        this.possibleStructureSetsSpigot().forEach( (p_208094_) -> {
+            StructureSet structureset = (StructureSet) p_208094_;
+            // Spigot end
+            for (StructureSet.StructureSelectionEntry structureset$structureselectionentry : structureset.f_210003_()) {
+                this.f_207957_.computeIfAbsent( structureset$structureselectionentry.f_210026_().m_203334_(), (p_208087_) -> {
+                    return new ArrayList();
+                } ).add( structureset.f_210004_() );
+            }
+
+            StructurePlacement structureplacement = structureset.f_210004_();
+            if (structureplacement instanceof ConcentricRingsStructurePlacement) {
+                ConcentricRingsStructurePlacement concentricringsstructureplacement = (ConcentricRingsStructurePlacement) structureplacement;
+                if (structureset.f_210003_().stream().anyMatch( (p_208071_) -> {
+                    return p_208071_.m_210035_( set::contains );
+                } )) {
+                    this.f_204350_.put( concentricringsstructureplacement, this.generateRingPositions( p_208094_, concentricringsstructureplacement ) );
+                }
+            }
+
+        } );
+    }
+
+    private CompletableFuture<List<ChunkPos>> generateRingPositions(StructureSet p_211668_, ConcentricRingsStructurePlacement p_211669_) { // Spigot
+        return p_211669_.f_204952_() == 0 ? CompletableFuture.completedFuture( List.of() ) : CompletableFuture.supplyAsync( Util.m_183946_( "placement calculation", () -> {
+            Stopwatch stopwatch = Stopwatch.createStarted( Util.f_211544_ );
+            List<ChunkPos> list = new ArrayList<>();
+            Set<Holder<Biome>> set = (Set) ((StructureSet) p_211668_).f_210003_().stream().flatMap( (p_208015_) -> { // Spigot
+                return p_208015_.f_210026_().m_203334_().m_209752_().m_203614_();
+            } ).collect( Collectors.toSet() );
+            int i = p_211669_.f_204950_();
+            int j = p_211669_.f_204952_();
+            int k = p_211669_.f_204951_();
+            Random random = new Random();
+            random.setSeed( this.f_212255_ );
+            double d0 = random.nextDouble() * Math.PI * 2.0D;
+            int l = 0;
+            int i1 = 0;
+
+            for (int j1 = 0; j1 < j; ++j1) {
+                double d1 = (double) (4 * i + i * i1 * 6) + (random.nextDouble() - 0.5D) * (double) i * 2.5D;
+                int k1 = (int) Math.round( Math.cos( d0 ) * d1 );
+                int l1 = (int) Math.round( Math.sin( d0 ) * d1 );
+                Pair<BlockPos, Holder<Biome>> pair = this.f_62137_.m_207829_( SectionPos.m_175554_( k1, 8 ), 0, SectionPos.m_175554_( l1, 8 ), 112, set::contains, random, this.m_183403_() );
+                if (pair != null) {
+                    BlockPos blockpos = pair.getFirst();
+                    k1 = SectionPos.m_123171_( blockpos.m_123341_() );
+                    l1 = SectionPos.m_123171_( blockpos.m_123343_() );
+                }
+
+                list.add( new ChunkPos( k1, l1 ) );
+                d0 += (Math.PI * 2D) / (double) k;
+                ++l;
+                if (l == k) {
+                    ++i1;
+                    l = 0;
+                    k += 2 * k / (i1 + 1);
+                    k = Math.min( k, j - j1 );
+                    d0 += random.nextDouble() * Math.PI * 2.0D;
+                }
+            }
+
+            double d2 = (double) stopwatch.stop().elapsed( TimeUnit.MILLISECONDS ) / 1000.0D;
+            f_211627_.debug( "Calculation for {} took {}s", p_211668_, d2 );
+            return list;
+        } ), Util.m_183991_() );
+    }
+
+    protected abstract Codec<? extends ChunkGenerator> m_6909_();
+
+    public Optional<ResourceKey<Codec<? extends ChunkGenerator>>> m_187743_() {
+        return Registry.f_122890_.m_7854_( this.m_6909_() );
+    }
+
+    public abstract ChunkGenerator m_6819_(long p_62156_);
+
+    public CompletableFuture<ChunkAccess> m_196423_(Registry<Biome> p_196743_, Executor p_196744_, Blender p_196745_, StructureFeatureManager p_196746_, ChunkAccess p_196747_) {
+        return CompletableFuture.supplyAsync( Util.m_183946_( "init_biomes", () -> {
+            p_196747_.m_183442_( this.f_62138_::m_203407_, this.m_183403_() );
+            return p_196747_;
+        } ), Util.m_183991_() );
+    }
+
+    public abstract Climate.Sampler m_183403_();
+
+    public Holder<Biome> m_203495_(int p_204416_, int p_204417_, int p_204418_) {
+        return this.m_62218_().m_203407_( p_204416_, p_204417_, p_204418_, this.m_183403_() );
+    }
+
+    public abstract void m_183516_(WorldGenRegion p_187691_, long p_187692_, BiomeManager p_187693_, StructureFeatureManager p_187694_, ChunkAccess p_187695_, GenerationStep.Carving p_187696_);
+
+    @Nullable
+    public Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> m_207970_(ServerLevel p_207971_, HolderSet<ConfiguredStructureFeature<?, ?>> p_207972_, BlockPos p_207973_, int p_207974_, boolean p_207975_) {
+        Set<Holder<Biome>> set = p_207972_.m_203614_().flatMap( (p_211699_) -> {
+            return p_211699_.m_203334_().m_209752_().m_203614_();
+        } ).collect( Collectors.toSet() );
+        if (set.isEmpty()) {
             return null;
-         } else {
-            Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> pair = null;
+        } else {
+            Set<Holder<Biome>> set1 = this.f_62138_.m_207840_();
+            if (Collections.disjoint( set1, set )) {
+                return null;
+            } else {
+                Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> pair = null;
+                double d0 = Double.MAX_VALUE;
+                Map<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>> map = new Object2ObjectArrayMap<>();
+
+                for (Holder<ConfiguredStructureFeature<?, ?>> holder : p_207972_) {
+                    if (!set1.stream().noneMatch( holder.m_203334_().m_209752_()::m_203333_ )) {
+                        for (StructurePlacement structureplacement : this.m_208090_( holder )) {
+                            map.computeIfAbsent( structureplacement, (p_211663_) -> {
+                                return new ObjectArraySet();
+                            } ).add( holder );
+                        }
+                    }
+                }
+
+                List<Entry<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>>> list = new ArrayList<>( map.size() );
+
+                for (Entry<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>> entry : map.entrySet()) {
+                    StructurePlacement structureplacement1 = entry.getKey();
+                    if (structureplacement1 instanceof ConcentricRingsStructurePlacement) {
+                        ConcentricRingsStructurePlacement concentricringsstructureplacement = (ConcentricRingsStructurePlacement) structureplacement1;
+                        BlockPos blockpos = this.m_204382_( p_207973_, concentricringsstructureplacement );
+                        double d1 = p_207973_.m_123331_( blockpos );
+                        if (d1 < d0) {
+                            d0 = d1;
+                            pair = Pair.of( blockpos, entry.getValue().iterator().next() );
+                        }
+                    } else if (structureplacement1 instanceof RandomSpreadStructurePlacement) {
+                        list.add( entry );
+                    }
+                }
+
+                if (!list.isEmpty()) {
+                    int i = SectionPos.m_123171_( p_207973_.m_123341_() );
+                    int j = SectionPos.m_123171_( p_207973_.m_123343_() );
+
+                    for (int k = 0; k <= p_207974_; ++k) {
+                        boolean flag = false;
+
+                        for (Entry<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>> entry1 : list) {
+                            RandomSpreadStructurePlacement randomspreadstructureplacement = (RandomSpreadStructurePlacement) entry1.getKey();
+                            Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> pair1 = m_208059_( entry1.getValue(), p_207971_, p_207971_.m_8595_(), i, j, k, p_207975_, p_207971_.m_7328_(), randomspreadstructureplacement );
+                            if (pair1 != null) {
+                                flag = true;
+                                double d2 = p_207973_.m_123331_( pair1.getFirst() );
+                                if (d2 < d0) {
+                                    d0 = d2;
+                                    pair = pair1;
+                                }
+                            }
+                        }
+
+                        if (flag) {
+                            return pair;
+                        }
+                    }
+                }
+
+                return pair;
+            }
+        }
+    }
+
+    @Nullable
+    private BlockPos m_204382_(BlockPos p_204383_, ConcentricRingsStructurePlacement p_204384_) {
+        List<ChunkPos> list = this.m_204380_( p_204384_ );
+        if (list == null) {
+            throw new IllegalStateException( "Somehow tried to find structures for a placement that doesn't exist" );
+        } else {
+            BlockPos blockpos = null;
             double d0 = Double.MAX_VALUE;
-            Map<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>> map = new Object2ObjectArrayMap<>();
-
-            for(Holder<ConfiguredStructureFeature<?, ?>> holder : p_207972_) {
-               if (!set1.stream().noneMatch(holder.m_203334_().m_209752_()::m_203333_)) {
-                  for(StructurePlacement structureplacement : this.m_208090_(holder)) {
-                     map.computeIfAbsent(structureplacement, (p_211663_) -> {
-                        return new ObjectArraySet();
-                     }).add(holder);
-                  }
-               }
-            }
-
-            List<Entry<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>>> list = new ArrayList<>(map.size());
-
-            for(Entry<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>> entry : map.entrySet()) {
-               StructurePlacement structureplacement1 = entry.getKey();
-               if (structureplacement1 instanceof ConcentricRingsStructurePlacement) {
-                  ConcentricRingsStructurePlacement concentricringsstructureplacement = (ConcentricRingsStructurePlacement)structureplacement1;
-                  BlockPos blockpos = this.m_204382_(p_207973_, concentricringsstructureplacement);
-                  double d1 = p_207973_.m_123331_(blockpos);
-                  if (d1 < d0) {
-                     d0 = d1;
-                     pair = Pair.of(blockpos, entry.getValue().iterator().next());
-                  }
-               } else if (structureplacement1 instanceof RandomSpreadStructurePlacement) {
-                  list.add(entry);
-               }
-            }
-
-            if (!list.isEmpty()) {
-               int i = SectionPos.m_123171_(p_207973_.m_123341_());
-               int j = SectionPos.m_123171_(p_207973_.m_123343_());
-
-               for(int k = 0; k <= p_207974_; ++k) {
-                  boolean flag = false;
-
-                  for(Entry<StructurePlacement, Set<Holder<ConfiguredStructureFeature<?, ?>>>> entry1 : list) {
-                     RandomSpreadStructurePlacement randomspreadstructureplacement = (RandomSpreadStructurePlacement)entry1.getKey();
-                     Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> pair1 = m_208059_(entry1.getValue(), p_207971_, p_207971_.m_8595_(), i, j, k, p_207975_, p_207971_.m_7328_(), randomspreadstructureplacement);
-                     if (pair1 != null) {
-                        flag = true;
-                        double d2 = p_207973_.m_123331_(pair1.getFirst());
-                        if (d2 < d0) {
-                           d0 = d2;
-                           pair = pair1;
-                        }
-                     }
-                  }
-
-                  if (flag) {
-                     return pair;
-                  }
-               }
-            }
-
-            return pair;
-         }
-      }
-   }
-
-   @Nullable
-   private BlockPos m_204382_(BlockPos p_204383_, ConcentricRingsStructurePlacement p_204384_) {
-      List<ChunkPos> list = this.m_204380_(p_204384_);
-      if (list == null) {
-         throw new IllegalStateException("Somehow tried to find structures for a placement that doesn't exist");
-      } else {
-         BlockPos blockpos = null;
-         double d0 = Double.MAX_VALUE;
-         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
-
-         for(ChunkPos chunkpos : list) {
-            blockpos$mutableblockpos.m_122178_(SectionPos.m_175554_(chunkpos.f_45578_, 8), 32, SectionPos.m_175554_(chunkpos.f_45579_, 8));
-            double d1 = blockpos$mutableblockpos.m_123331_(p_204383_);
-            if (blockpos == null) {
-               blockpos = new BlockPos(blockpos$mutableblockpos);
-               d0 = d1;
-            } else if (d1 < d0) {
-               blockpos = new BlockPos(blockpos$mutableblockpos);
-               d0 = d1;
-            }
-         }
-
-         return blockpos;
-      }
-   }
-
-   @Nullable
-   private static Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> m_208059_(Set<Holder<ConfiguredStructureFeature<?, ?>>> p_208060_, LevelReader p_208061_, StructureFeatureManager p_208062_, int p_208063_, int p_208064_, int p_208065_, boolean p_208066_, long p_208067_, RandomSpreadStructurePlacement p_208068_) {
-      int i = p_208068_.f_204973_();
-
-      for(int j = -p_208065_; j <= p_208065_; ++j) {
-         boolean flag = j == -p_208065_ || j == p_208065_;
-
-         for(int k = -p_208065_; k <= p_208065_; ++k) {
-            boolean flag1 = k == -p_208065_ || k == p_208065_;
-            if (flag || flag1) {
-               int l = p_208063_ + i * j;
-               int i1 = p_208064_ + i * k;
-               ChunkPos chunkpos = p_208068_.m_204991_(p_208067_, l, i1);
-
-               for(Holder<ConfiguredStructureFeature<?, ?>> holder : p_208060_) {
-                  StructureCheckResult structurecheckresult = p_208062_.m_207777_(chunkpos, holder.m_203334_(), p_208066_);
-                  if (structurecheckresult != StructureCheckResult.START_NOT_PRESENT) {
-                     if (!p_208066_ && structurecheckresult == StructureCheckResult.START_PRESENT) {
-                        return Pair.of(StructureFeature.m_204766_(p_208068_, chunkpos), holder);
-                     }
-
-                     ChunkAccess chunkaccess = p_208061_.m_46819_(chunkpos.f_45578_, chunkpos.f_45579_, ChunkStatus.f_62315_);
-                     StructureStart structurestart = p_208062_.m_207802_(SectionPos.m_175562_(chunkaccess), holder.m_203334_(), chunkaccess);
-                     if (structurestart != null && structurestart.m_73603_()) {
-                        if (p_208066_ && structurestart.m_73606_()) {
-                           p_208062_.m_196674_(structurestart);
-                           return Pair.of(StructureFeature.m_204766_(p_208068_, structurestart.m_163625_()), holder);
-                        }
-
-                        if (!p_208066_) {
-                           return Pair.of(StructureFeature.m_204766_(p_208068_, structurestart.m_163625_()), holder);
-                        }
-                     }
-                  }
-               }
-            }
-         }
-      }
-
-      return null;
-   }
-
-   public void m_183372_(WorldGenLevel p_187712_, ChunkAccess p_187713_, StructureFeatureManager p_187714_) {
-      ChunkPos chunkpos = p_187713_.m_7697_();
-      if (!SharedConstants.m_183707_(chunkpos)) {
-         SectionPos sectionpos = SectionPos.m_123196_(chunkpos, p_187712_.m_151560_());
-         BlockPos blockpos = sectionpos.m_123249_();
-         Registry<ConfiguredStructureFeature<?, ?>> registry = p_187712_.m_5962_().m_175515_(Registry.f_122882_);
-         Map<Integer, List<ConfiguredStructureFeature<?, ?>>> map = registry.m_123024_().collect(Collectors.groupingBy((p_211653_) -> {
-            return p_211653_.f_65403_.m_67095_().ordinal();
-         }));
-         List<BiomeSource.StepFeatureData> list = this.f_62137_.m_186733_();
-         WorldgenRandom worldgenrandom = new WorldgenRandom(new XoroshiroRandomSource(RandomSupport.m_189328_()));
-         long i = worldgenrandom.m_64690_(p_187712_.m_7328_(), blockpos.m_123341_(), blockpos.m_123343_());
-         Set<Biome> set = new ObjectArraySet<>();
-         if (this instanceof FlatLevelSource) {
-            this.f_62137_.m_207840_().stream().map(Holder::m_203334_).forEach(set::add);
-         } else {
-            ChunkPos.m_45596_(sectionpos.m_123251_(), 1).forEach((p_211651_) -> {
-               ChunkAccess chunkaccess = p_187712_.m_6325_(p_211651_.f_45578_, p_211651_.f_45579_);
-
-               for(LevelChunkSection levelchunksection : chunkaccess.m_7103_()) {
-                  levelchunksection.m_188013_().m_196879_((p_211688_) -> {
-                     set.add(p_211688_.m_203334_());
-                  });
-               }
-
-            });
-            set.retainAll(this.f_62137_.m_207840_().stream().map(Holder::m_203334_).collect(Collectors.toSet()));
-         }
-
-         int j = list.size();
-
-         try {
-            Registry<PlacedFeature> registry1 = p_187712_.m_5962_().m_175515_(Registry.f_194567_);
-            int i1 = Math.max(GenerationStep.Decoration.values().length, j);
-
-            for(int k = 0; k < i1; ++k) {
-               int l = 0;
-               if (p_187714_.m_47271_()) {
-                  for(ConfiguredStructureFeature<?, ?> configuredstructurefeature : map.getOrDefault(k, Collections.emptyList())) {
-                     worldgenrandom.m_190064_(i, l, k);
-                     Supplier<String> supplier = () -> {
-                        return registry.m_7854_(configuredstructurefeature).map(Object::toString).orElseGet(configuredstructurefeature::toString);
-                     };
-
-                     try {
-                        p_187712_.m_183406_(supplier);
-                        p_187714_.m_207794_(sectionpos, configuredstructurefeature).forEach((p_211647_) -> {
-                           p_211647_.m_7129_(p_187712_, p_187714_, this, worldgenrandom, m_187717_(p_187713_), chunkpos);
-                        });
-                     } catch (Exception exception) {
-                        CrashReport crashreport1 = CrashReport.m_127521_(exception, "Feature placement");
-                        crashreport1.m_127514_("Feature").m_128165_("Description", supplier::get);
-                        throw new ReportedException(crashreport1);
-                     }
-
-                     ++l;
-                  }
-               }
-
-               if (k < j) {
-                  IntSet intset = new IntArraySet();
-
-                  for(Biome biome : set) {
-                     List<HolderSet<PlacedFeature>> list1 = biome.m_47536_().m_47818_();
-                     if (k < list1.size()) {
-                        HolderSet<PlacedFeature> holderset = list1.get(k);
-                        BiomeSource.StepFeatureData biomesource$stepfeaturedata1 = list.get(k);
-                        holderset.m_203614_().map(Holder::m_203334_).forEach((p_211682_) -> {
-                           intset.add(biomesource$stepfeaturedata1.f_196678_().applyAsInt(p_211682_));
-                        });
-                     }
-                  }
-
-                  int j1 = intset.size();
-                  int[] aint = intset.toIntArray();
-                  Arrays.sort(aint);
-                  BiomeSource.StepFeatureData biomesource$stepfeaturedata = list.get(k);
-
-                  for(int k1 = 0; k1 < j1; ++k1) {
-                     int l1 = aint[k1];
-                     PlacedFeature placedfeature = biomesource$stepfeaturedata.f_196677_().get(l1);
-                     Supplier<String> supplier1 = () -> {
-                        return registry1.m_7854_(placedfeature).map(Object::toString).orElseGet(placedfeature::toString);
-                     };
-                     worldgenrandom.m_190064_(i, l1, k);
-
-                     try {
-                        p_187712_.m_183406_(supplier1);
-                        placedfeature.m_191806_(p_187712_, this, worldgenrandom, blockpos);
-                     } catch (Exception exception1) {
-                        CrashReport crashreport2 = CrashReport.m_127521_(exception1, "Feature placement");
-                        crashreport2.m_127514_("Feature").m_128165_("Description", supplier1::get);
-                        throw new ReportedException(crashreport2);
-                     }
-                  }
-               }
-            }
-
-            p_187712_.m_183406_((Supplier<String>)null);
-         } catch (Exception exception2) {
-            CrashReport crashreport = CrashReport.m_127521_(exception2, "Biome decoration");
-            crashreport.m_127514_("Generation").m_128159_("CenterX", chunkpos.f_45578_).m_128159_("CenterZ", chunkpos.f_45579_).m_128159_("Seed", i);
-            throw new ReportedException(crashreport);
-         }
-      }
-   }
-
-   public boolean m_212265_(ResourceKey<StructureSet> p_212266_, long p_212267_, int p_212268_, int p_212269_, int p_212270_) {
-      StructureSet structureset = this.f_207955_.m_6246_(p_212266_);
-      if (structureset == null) {
-         return false;
-      } else {
-         StructurePlacement structureplacement = structureset.f_210004_();
-
-         for(int i = p_212268_ - p_212270_; i <= p_212268_ + p_212270_; ++i) {
-            for(int j = p_212269_ - p_212270_; j <= p_212269_ + p_212270_; ++j) {
-               if (structureplacement.m_212129_(this, p_212267_, i, j)) {
-                  return true;
-               }
-            }
-         }
-
-         return false;
-      }
-   }
-
-   private static BoundingBox m_187717_(ChunkAccess p_187718_) {
-      ChunkPos chunkpos = p_187718_.m_7697_();
-      int i = chunkpos.m_45604_();
-      int j = chunkpos.m_45605_();
-      LevelHeightAccessor levelheightaccessor = p_187718_.m_183618_();
-      int k = levelheightaccessor.m_141937_() + 1;
-      int l = levelheightaccessor.m_151558_() - 1;
-      return new BoundingBox(i, k, j, i + 15, l, j + 15);
-   }
-
-   public abstract void m_183621_(WorldGenRegion p_187697_, StructureFeatureManager p_187698_, ChunkAccess p_187699_);
-
-   public abstract void m_6929_(WorldGenRegion p_62167_);
-
-   public int m_142051_(LevelHeightAccessor p_156157_) {
-      return 64;
-   }
-
-   public BiomeSource m_62218_() {
-      return this.f_62138_;
-   }
-
-   public abstract int m_6331_();
-
-   public WeightedRandomList<MobSpawnSettings.SpawnerData> m_203315_(Holder<Biome> p_204386_, StructureFeatureManager p_204387_, MobCategory p_204388_, BlockPos p_204389_) {
-      Map<ConfiguredStructureFeature<?, ?>, LongSet> map = p_204387_.m_207815_(p_204389_);
-
-      for(Entry<ConfiguredStructureFeature<?, ?>, LongSet> entry : map.entrySet()) {
-         ConfiguredStructureFeature<?, ?> configuredstructurefeature = entry.getKey();
-         StructureSpawnOverride structurespawnoverride = configuredstructurefeature.f_209744_.get(p_204388_);
-         if (structurespawnoverride != null) {
-            MutableBoolean mutableboolean = new MutableBoolean(false);
-            Predicate<StructureStart> predicate = structurespawnoverride.f_210043_() == StructureSpawnOverride.BoundingBoxType.PIECE ? (p_211631_) -> {
-               return p_204387_.m_207788_(p_204389_, p_211631_);
-            } : (p_211666_) -> {
-               return p_211666_.m_73601_().m_71051_(p_204389_);
-            };
-            p_204387_.m_207781_(configuredstructurefeature, entry.getValue(), (p_211692_) -> {
-               if (mutableboolean.isFalse() && predicate.test(p_211692_)) {
-                  mutableboolean.setTrue();
-               }
-
-            });
-            if (mutableboolean.isTrue()) {
-               return structurespawnoverride.f_210044_();
-            }
-         }
-      }
-
-      return p_204386_.m_203334_().m_47518_().m_151798_(p_204388_);
-   }
-
-   public static Stream<ConfiguredStructureFeature<?, ?>> m_208044_(Registry<ConfiguredStructureFeature<?, ?>> p_208045_, StructureFeature<?> p_208046_) {
-      return p_208045_.m_123024_().filter((p_211656_) -> {
-         return p_211656_.f_65403_ == p_208046_;
-      });
-   }
-
-   public void m_62199_(RegistryAccess p_62200_, StructureFeatureManager p_62201_, ChunkAccess p_62202_, StructureManager p_62203_, long p_62204_) {
-      ChunkPos chunkpos = p_62202_.m_7697_();
-      SectionPos sectionpos = SectionPos.m_175562_(p_62202_);
-      this.m_207969_().forEach((p_212264_) -> {
-         StructurePlacement structureplacement = p_212264_.m_203334_().f_210004_();
-         List<StructureSet.StructureSelectionEntry> list = p_212264_.m_203334_().f_210003_();
-
-         for(StructureSet.StructureSelectionEntry structureset$structureselectionentry : list) {
-            StructureStart structurestart = p_62201_.m_207802_(sectionpos, structureset$structureselectionentry.f_210026_().m_203334_(), p_62202_);
-            if (structurestart != null && structurestart.m_73603_()) {
-               return;
-            }
-         }
-
-         if (structureplacement.m_212129_(this, p_62204_, chunkpos.f_45578_, chunkpos.f_45579_)) {
-            if (list.size() == 1) {
-               this.m_208016_(list.get(0), p_62201_, p_62200_, p_62203_, p_62204_, p_62202_, chunkpos, sectionpos);
+            BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+
+            for (ChunkPos chunkpos : list) {
+                blockpos$mutableblockpos.m_122178_( SectionPos.m_175554_( chunkpos.f_45578_, 8 ), 32, SectionPos.m_175554_( chunkpos.f_45579_, 8 ) );
+                double d1 = blockpos$mutableblockpos.m_123331_( p_204383_ );
+                if (blockpos == null) {
+                    blockpos = new BlockPos( blockpos$mutableblockpos );
+                    d0 = d1;
+                } else if (d1 < d0) {
+                    blockpos = new BlockPos( blockpos$mutableblockpos );
+                    d0 = d1;
+                }
+            }
+
+            return blockpos;
+        }
+    }
+
+    @Nullable
+    private static Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> m_208059_(Set<Holder<ConfiguredStructureFeature<?, ?>>> p_208060_, LevelReader p_208061_, StructureFeatureManager p_208062_, int p_208063_, int p_208064_, int p_208065_, boolean p_208066_, long p_208067_, RandomSpreadStructurePlacement p_208068_) {
+        int i = p_208068_.f_204973_();
+
+        for (int j = -p_208065_; j <= p_208065_; ++j) {
+            boolean flag = j == -p_208065_ || j == p_208065_;
+
+            for (int k = -p_208065_; k <= p_208065_; ++k) {
+                boolean flag1 = k == -p_208065_ || k == p_208065_;
+                if (flag || flag1) {
+                    int l = p_208063_ + i * j;
+                    int i1 = p_208064_ + i * k;
+                    ChunkPos chunkpos = p_208068_.m_204991_( p_208067_, l, i1 );
+
+                    for (Holder<ConfiguredStructureFeature<?, ?>> holder : p_208060_) {
+                        StructureCheckResult structurecheckresult = p_208062_.m_207777_( chunkpos, holder.m_203334_(), p_208066_ );
+                        if (structurecheckresult != StructureCheckResult.START_NOT_PRESENT) {
+                            if (!p_208066_ && structurecheckresult == StructureCheckResult.START_PRESENT) {
+                                return Pair.of( StructureFeature.m_204766_( p_208068_, chunkpos ), holder );
+                            }
+
+                            ChunkAccess chunkaccess = p_208061_.m_46819_( chunkpos.f_45578_, chunkpos.f_45579_, ChunkStatus.f_62315_ );
+                            StructureStart structurestart = p_208062_.m_207802_( SectionPos.m_175562_( chunkaccess ), holder.m_203334_(), chunkaccess );
+                            if (structurestart != null && structurestart.m_73603_()) {
+                                if (p_208066_ && structurestart.m_73606_()) {
+                                    p_208062_.m_196674_( structurestart );
+                                    return Pair.of( StructureFeature.m_204766_( p_208068_, structurestart.m_163625_() ), holder );
+                                }
+
+                                if (!p_208066_) {
+                                    return Pair.of( StructureFeature.m_204766_( p_208068_, structurestart.m_163625_() ), holder );
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return null;
+    }
+
+    // CraftBukkit start
+    public void applyBiomeDecoration(WorldGenLevel generatoraccessseed, ChunkAccess ichunkaccess, StructureFeatureManager structuremanager, boolean vanilla) {
+        if (vanilla) {
+            m_183372_( generatoraccessseed, ichunkaccess, structuremanager );
+        }
+
+        org.bukkit.World world = generatoraccessseed.getMinecraftWorld().getWorld();
+        // only call when a populator is present (prevents unnecessary entity conversion)
+        if (!world.getPopulators().isEmpty()) {
+            CraftLimitedRegion limitedRegion = new CraftLimitedRegion( generatoraccessseed, ichunkaccess.m_7697_() );
+            int x = ichunkaccess.m_7697_().f_45578_;
+            int z = ichunkaccess.m_7697_().f_45579_;
+            for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                WorldgenRandom seededrandom = new WorldgenRandom( new LegacyRandomSource( generatoraccessseed.m_7328_() ) );
+                seededrandom.m_64690_( generatoraccessseed.m_7328_(), x, z );
+                populator.populate( world, seededrandom, x, z, limitedRegion );
+            }
+            limitedRegion.saveEntities();
+            limitedRegion.breakLink();
+        }
+        // CraftBukkit end
+    }
+
+
+    public void m_183372_(WorldGenLevel p_187712_, ChunkAccess p_187713_, StructureFeatureManager p_187714_) {
+        ChunkPos chunkpos = p_187713_.m_7697_();
+        if (!SharedConstants.m_183707_( chunkpos )) {
+            SectionPos sectionpos = SectionPos.m_123196_( chunkpos, p_187712_.m_151560_() );
+            BlockPos blockpos = sectionpos.m_123249_();
+            Registry<ConfiguredStructureFeature<?, ?>> registry = p_187712_.m_5962_().m_175515_( Registry.f_122882_ );
+            Map<Integer, List<ConfiguredStructureFeature<?, ?>>> map = registry.m_123024_().collect( Collectors.groupingBy( (p_211653_) -> {
+                return p_211653_.f_65403_.m_67095_().ordinal();
+            } ) );
+            List<BiomeSource.StepFeatureData> list = this.f_62137_.m_186733_();
+            WorldgenRandom worldgenrandom = new WorldgenRandom( new XoroshiroRandomSource( RandomSupport.m_189328_() ) );
+            long i = worldgenrandom.m_64690_( p_187712_.m_7328_(), blockpos.m_123341_(), blockpos.m_123343_() );
+            Set<Biome> set = new ObjectArraySet<>();
+            if (this instanceof FlatLevelSource) {
+                this.f_62137_.m_207840_().stream().map( Holder::m_203334_ ).forEach( set::add );
             } else {
-               ArrayList<StructureSet.StructureSelectionEntry> arraylist = new ArrayList<>(list.size());
-               arraylist.addAll(list);
-               WorldgenRandom worldgenrandom = new WorldgenRandom(new LegacyRandomSource(0L));
-               worldgenrandom.m_190068_(p_62204_, chunkpos.f_45578_, chunkpos.f_45579_);
-               int i = 0;
-
-               for(StructureSet.StructureSelectionEntry structureset$structureselectionentry1 : arraylist) {
-                  i += structureset$structureselectionentry1.f_210027_();
-               }
-
-               while(!arraylist.isEmpty()) {
-                  int j = worldgenrandom.nextInt(i);
-                  int k = 0;
-
-                  for(StructureSet.StructureSelectionEntry structureset$structureselectionentry2 : arraylist) {
-                     j -= structureset$structureselectionentry2.f_210027_();
-                     if (j < 0) {
-                        break;
-                     }
-
-                     ++k;
-                  }
-
-                  StructureSet.StructureSelectionEntry structureset$structureselectionentry3 = arraylist.get(k);
-                  if (this.m_208016_(structureset$structureselectionentry3, p_62201_, p_62200_, p_62203_, p_62204_, p_62202_, chunkpos, sectionpos)) {
-                     return;
-                  }
-
-                  arraylist.remove(k);
-                  i -= structureset$structureselectionentry3.f_210027_();
-               }
-
-            }
-         }
-      });
-   }
-
-   private boolean m_208016_(StructureSet.StructureSelectionEntry p_208017_, StructureFeatureManager p_208018_, RegistryAccess p_208019_, StructureManager p_208020_, long p_208021_, ChunkAccess p_208022_, ChunkPos p_208023_, SectionPos p_208024_) {
-      ConfiguredStructureFeature<?, ?> configuredstructurefeature = p_208017_.f_210026_().m_203334_();
-      int i = m_207976_(p_208018_, p_208022_, p_208024_, configuredstructurefeature);
-      HolderSet<Biome> holderset = configuredstructurefeature.m_209752_();
-      Predicate<Holder<Biome>> predicate = (p_211672_) -> {
-         return holderset.m_203333_(this.m_203427_(p_211672_));
-      };
-      StructureStart structurestart = configuredstructurefeature.m_204707_(p_208019_, this, this.f_62137_, p_208020_, p_208021_, p_208023_, i, p_208022_, predicate);
-      if (structurestart.m_73603_()) {
-         p_208018_.m_207806_(p_208024_, configuredstructurefeature, structurestart, p_208022_);
-         return true;
-      } else {
-         return false;
-      }
-   }
-
-   private static int m_207976_(StructureFeatureManager p_207977_, ChunkAccess p_207978_, SectionPos p_207979_, ConfiguredStructureFeature<?, ?> p_207980_) {
-      StructureStart structurestart = p_207977_.m_207802_(p_207979_, p_207980_, p_207978_);
-      return structurestart != null ? structurestart.m_73608_() : 0;
-   }
-
-   protected Holder<Biome> m_203427_(Holder<Biome> p_204385_) {
-      return p_204385_;
-   }
-
-   public void m_62177_(WorldGenLevel p_62178_, StructureFeatureManager p_62179_, ChunkAccess p_62180_) {
-      int i = 8;
-      ChunkPos chunkpos = p_62180_.m_7697_();
-      int j = chunkpos.f_45578_;
-      int k = chunkpos.f_45579_;
-      int l = chunkpos.m_45604_();
-      int i1 = chunkpos.m_45605_();
-      SectionPos sectionpos = SectionPos.m_175562_(p_62180_);
-
-      for(int j1 = j - 8; j1 <= j + 8; ++j1) {
-         for(int k1 = k - 8; k1 <= k + 8; ++k1) {
-            long l1 = ChunkPos.m_45589_(j1, k1);
-
-            for(StructureStart structurestart : p_62178_.m_6325_(j1, k1).m_6633_().values()) {
-               try {
-                  if (structurestart.m_73603_() && structurestart.m_73601_().m_71019_(l, i1, l + 15, i1 + 15)) {
-                     p_62179_.m_207797_(sectionpos, structurestart.m_210081_(), l1, p_62180_);
-                     DebugPackets.m_133711_(p_62178_, structurestart);
-                  }
-               } catch (Exception exception) {
-                  CrashReport crashreport = CrashReport.m_127521_(exception, "Generating structure reference");
-                  CrashReportCategory crashreportcategory = crashreport.m_127514_("Structure");
-                  Optional<? extends Registry<ConfiguredStructureFeature<?, ?>>> optional = p_62178_.m_5962_().m_6632_(Registry.f_122882_);
-                  crashreportcategory.m_128165_("Id", () -> {
-                     return optional.map((p_211661_) -> {
-                        return p_211661_.m_7981_(structurestart.m_210081_()).toString();
-                     }).orElse("UNKNOWN");
-                  });
-                  crashreportcategory.m_128165_("Name", () -> {
-                     return Registry.f_122841_.m_7981_(structurestart.m_210081_().f_65403_).toString();
-                  });
-                  crashreportcategory.m_128165_("Class", () -> {
-                     return structurestart.m_210081_().getClass().getCanonicalName();
-                  });
-                  throw new ReportedException(crashreport);
-               }
-            }
-         }
-      }
-
-   }
-
-   public abstract CompletableFuture<ChunkAccess> m_183489_(Executor p_187748_, Blender p_187749_, StructureFeatureManager p_187750_, ChunkAccess p_187751_);
-
-   public abstract int m_6337_();
-
-   public abstract int m_142062_();
-
-   public abstract int m_142647_(int p_156153_, int p_156154_, Heightmap.Types p_156155_, LevelHeightAccessor p_156156_);
-
-   public abstract NoiseColumn m_141914_(int p_156150_, int p_156151_, LevelHeightAccessor p_156152_);
-
-   public int m_156174_(int p_156175_, int p_156176_, Heightmap.Types p_156177_, LevelHeightAccessor p_156178_) {
-      return this.m_142647_(p_156175_, p_156176_, p_156177_, p_156178_);
-   }
-
-   public int m_156179_(int p_156180_, int p_156181_, Heightmap.Types p_156182_, LevelHeightAccessor p_156183_) {
-      return this.m_142647_(p_156180_, p_156181_, p_156182_, p_156183_) - 1;
-   }
-
-   public void m_211700_() {
-      if (!this.f_207958_) {
-         this.m_208097_();
-         this.f_207958_ = true;
-      }
-
-   }
-
-   @Nullable
-   public List<ChunkPos> m_204380_(ConcentricRingsStructurePlacement p_204381_) {
-      this.m_211700_();
-      CompletableFuture<List<ChunkPos>> completablefuture = this.f_204350_.get(p_204381_);
-      return completablefuture != null ? completablefuture.join() : null;
-   }
-
-   private List<StructurePlacement> m_208090_(Holder<ConfiguredStructureFeature<?, ?>> p_208091_) {
-      this.m_211700_();
-      return this.f_207957_.getOrDefault(p_208091_.m_203334_(), List.of());
-   }
-
-   public abstract void m_207076_(List<String> p_208054_, BlockPos p_208055_);
-
-   static {
-      Registry.m_122961_(Registry.f_122890_, "noise", NoiseBasedChunkGenerator.f_64314_);
-      Registry.m_122961_(Registry.f_122890_, "flat", FlatLevelSource.f_64164_);
-      Registry.m_122961_(Registry.f_122890_, "debug", DebugLevelSource.f_64111_);
-      f_211627_ = LogUtils.getLogger();
-      f_62136_ = Registry.f_122890_.m_194605_().dispatchStable(ChunkGenerator::m_6909_, Function.identity());
-   }
+                ChunkPos.m_45596_( sectionpos.m_123251_(), 1 ).forEach( (p_211651_) -> {
+                    ChunkAccess chunkaccess = p_187712_.m_6325_( p_211651_.f_45578_, p_211651_.f_45579_ );
+
+                    for (LevelChunkSection levelchunksection : chunkaccess.m_7103_()) {
+                        levelchunksection.m_188013_().m_196879_( (p_211688_) -> {
+                            set.add( p_211688_.m_203334_() );
+                        } );
+                    }
+
+                } );
+                set.retainAll( this.f_62137_.m_207840_().stream().map( Holder::m_203334_ ).collect( Collectors.toSet() ) );
+            }
+
+            int j = list.size();
+
+            try {
+                Registry<PlacedFeature> registry1 = p_187712_.m_5962_().m_175515_( Registry.f_194567_ );
+                int i1 = Math.max( GenerationStep.Decoration.values().length, j );
+
+                for (int k = 0; k < i1; ++k) {
+                    int l = 0;
+                    if (p_187714_.m_47271_()) {
+                        for (ConfiguredStructureFeature<?, ?> configuredstructurefeature : map.getOrDefault( k, Collections.emptyList() )) {
+                            worldgenrandom.m_190064_( i, l, k );
+                            Supplier<String> supplier = () -> {
+                                return registry.m_7854_( configuredstructurefeature ).map( Object::toString ).orElseGet( configuredstructurefeature::toString );
+                            };
+
+                            try {
+                                p_187712_.m_183406_( supplier );
+                                p_187714_.m_207794_( sectionpos, configuredstructurefeature ).forEach( (p_211647_) -> {
+                                    p_211647_.m_7129_( p_187712_, p_187714_, this, worldgenrandom, m_187717_( p_187713_ ), chunkpos );
+                                } );
+                            } catch (Exception exception) {
+                                CrashReport crashreport1 = CrashReport.m_127521_( exception, "Feature placement" );
+                                crashreport1.m_127514_( "Feature" ).m_128165_( "Description", supplier::get );
+                                throw new ReportedException( crashreport1 );
+                            }
+
+                            ++l;
+                        }
+                    }
+
+                    if (k < j) {
+                        IntSet intset = new IntArraySet();
+
+                        for (Biome biome : set) {
+                            List<HolderSet<PlacedFeature>> list1 = biome.m_47536_().m_47818_();
+                            if (k < list1.size()) {
+                                HolderSet<PlacedFeature> holderset = list1.get( k );
+                                BiomeSource.StepFeatureData biomesource$stepfeaturedata1 = list.get( k );
+                                holderset.m_203614_().map( Holder::m_203334_ ).forEach( (p_211682_) -> {
+                                    intset.add( biomesource$stepfeaturedata1.f_196678_().applyAsInt( p_211682_ ) );
+                                } );
+                            }
+                        }
+
+                        int j1 = intset.size();
+                        int[] aint = intset.toIntArray();
+                        Arrays.sort( aint );
+                        BiomeSource.StepFeatureData biomesource$stepfeaturedata = list.get( k );
+
+                        for (int k1 = 0; k1 < j1; ++k1) {
+                            int l1 = aint[k1];
+                            PlacedFeature placedfeature = biomesource$stepfeaturedata.f_196677_().get( l1 );
+                            Supplier<String> supplier1 = () -> {
+                                return registry1.m_7854_( placedfeature ).map( Object::toString ).orElseGet( placedfeature::toString );
+                            };
+                            worldgenrandom.m_190064_( i, l1, k );
+
+                            try {
+                                p_187712_.m_183406_( supplier1 );
+                                placedfeature.m_191806_( p_187712_, this, worldgenrandom, blockpos );
+                            } catch (Exception exception1) {
+                                CrashReport crashreport2 = CrashReport.m_127521_( exception1, "Feature placement" );
+                                crashreport2.m_127514_( "Feature" ).m_128165_( "Description", supplier1::get );
+                                throw new ReportedException( crashreport2 );
+                            }
+                        }
+                    }
+                }
+
+                p_187712_.m_183406_( (Supplier<String>) null );
+            } catch (Exception exception2) {
+                CrashReport crashreport = CrashReport.m_127521_( exception2, "Biome decoration" );
+                crashreport.m_127514_( "Generation" ).m_128159_( "CenterX", chunkpos.f_45578_ ).m_128159_( "CenterZ", chunkpos.f_45579_ ).m_128159_( "Seed", i );
+                throw new ReportedException( crashreport );
+            }
+        }
+    }
+
+    public boolean m_212265_(ResourceKey<StructureSet> p_212266_, long p_212267_, int p_212268_, int p_212269_, int p_212270_) {
+        StructureSet structureset = this.f_207955_.m_6246_( p_212266_ );
+        if (structureset == null) {
+            return false;
+        } else {
+            StructurePlacement structureplacement = structureset.f_210004_();
+
+            for (int i = p_212268_ - p_212270_; i <= p_212268_ + p_212270_; ++i) {
+                for (int j = p_212269_ - p_212270_; j <= p_212269_ + p_212270_; ++j) {
+                    if (structureplacement.m_212129_( this, p_212267_, i, j )) {
+                        return true;
+                    }
+                }
+            }
+
+            return false;
+        }
+    }
+
+    private static BoundingBox m_187717_(ChunkAccess p_187718_) {
+        ChunkPos chunkpos = p_187718_.m_7697_();
+        int i = chunkpos.m_45604_();
+        int j = chunkpos.m_45605_();
+        LevelHeightAccessor levelheightaccessor = p_187718_.m_183618_();
+        int k = levelheightaccessor.m_141937_() + 1;
+        int l = levelheightaccessor.m_151558_() - 1;
+        return new BoundingBox( i, k, j, i + 15, l, j + 15 );
+    }
+
+    public abstract void m_183621_(WorldGenRegion p_187697_, StructureFeatureManager p_187698_, ChunkAccess p_187699_);
+
+    public abstract void m_6929_(WorldGenRegion p_62167_);
+
+    public int m_142051_(LevelHeightAccessor p_156157_) {
+        return 64;
+    }
+
+    public BiomeSource m_62218_() {
+        return this.f_62138_;
+    }
+
+    public abstract int m_6331_();
+
+    public WeightedRandomList<MobSpawnSettings.SpawnerData> m_203315_(Holder<Biome> p_204386_, StructureFeatureManager p_204387_, MobCategory p_204388_, BlockPos p_204389_) {
+        Map<ConfiguredStructureFeature<?, ?>, LongSet> map = p_204387_.m_207815_( p_204389_ );
+
+        for (Entry<ConfiguredStructureFeature<?, ?>, LongSet> entry : map.entrySet()) {
+            ConfiguredStructureFeature<?, ?> configuredstructurefeature = entry.getKey();
+            StructureSpawnOverride structurespawnoverride = configuredstructurefeature.f_209744_.get( p_204388_ );
+            if (structurespawnoverride != null) {
+                MutableBoolean mutableboolean = new MutableBoolean( false );
+                Predicate<StructureStart> predicate = structurespawnoverride.f_210043_() == StructureSpawnOverride.BoundingBoxType.PIECE ? (p_211631_) -> {
+                    return p_204387_.m_207788_( p_204389_, p_211631_ );
+                } : (p_211666_) -> {
+                    return p_211666_.m_73601_().m_71051_( p_204389_ );
+                };
+                p_204387_.m_207781_( configuredstructurefeature, entry.getValue(), (p_211692_) -> {
+                    if (mutableboolean.isFalse() && predicate.test( p_211692_ )) {
+                        mutableboolean.setTrue();
+                    }
+
+                } );
+                if (mutableboolean.isTrue()) {
+                    return structurespawnoverride.f_210044_();
+                }
+            }
+        }
+
+        return p_204386_.m_203334_().m_47518_().m_151798_( p_204388_ );
+    }
+
+    public static Stream<ConfiguredStructureFeature<?, ?>> m_208044_(Registry<ConfiguredStructureFeature<?, ?>> p_208045_, StructureFeature<?> p_208046_) {
+        return p_208045_.m_123024_().filter( (p_211656_) -> {
+            return p_211656_.f_65403_ == p_208046_;
+        } );
+    }
+
+    public void m_62199_(RegistryAccess p_62200_, StructureFeatureManager p_62201_, ChunkAccess p_62202_, StructureManager p_62203_, long p_62204_) {
+        ChunkPos chunkpos = p_62202_.m_7697_();
+        SectionPos sectionpos = SectionPos.m_175562_( p_62202_ );
+        // Spigot start
+        this.possibleStructureSetsSpigot().forEach( (p_212264_) -> {
+            StructurePlacement structureplacement = ((StructureSet) p_212264_).f_210004_();
+            List<StructureSet.StructureSelectionEntry> list = ((StructureSet) p_212264_).f_210003_();
+            // Spigot end
+
+            for (StructureSet.StructureSelectionEntry structureset$structureselectionentry : list) {
+                StructureStart structurestart = p_62201_.m_207802_( sectionpos, structureset$structureselectionentry.f_210026_().m_203334_(), p_62202_ );
+                if (structurestart != null && structurestart.m_73603_()) {
+                    return;
+                }
+            }
+
+            if (structureplacement.m_212129_( this, p_62204_, chunkpos.f_45578_, chunkpos.f_45579_ )) {
+                if (list.size() == 1) {
+                    this.m_208016_( list.get( 0 ), p_62201_, p_62200_, p_62203_, p_62204_, p_62202_, chunkpos, sectionpos );
+                } else {
+                    ArrayList<StructureSet.StructureSelectionEntry> arraylist = new ArrayList<>( list.size() );
+                    arraylist.addAll( list );
+                    WorldgenRandom worldgenrandom = new WorldgenRandom( new LegacyRandomSource( 0L ) );
+                    worldgenrandom.m_190068_( p_62204_, chunkpos.f_45578_, chunkpos.f_45579_ );
+                    int i = 0;
+
+                    for (StructureSet.StructureSelectionEntry structureset$structureselectionentry1 : arraylist) {
+                        i += structureset$structureselectionentry1.f_210027_();
+                    }
+
+                    while (!arraylist.isEmpty()) {
+                        int j = worldgenrandom.nextInt( i );
+                        int k = 0;
+
+                        for (StructureSet.StructureSelectionEntry structureset$structureselectionentry2 : arraylist) {
+                            j -= structureset$structureselectionentry2.f_210027_();
+                            if (j < 0) {
+                                break;
+                            }
+
+                            ++k;
+                        }
+
+                        StructureSet.StructureSelectionEntry structureset$structureselectionentry3 = arraylist.get( k );
+                        if (this.m_208016_( structureset$structureselectionentry3, p_62201_, p_62200_, p_62203_, p_62204_, p_62202_, chunkpos, sectionpos )) {
+                            return;
+                        }
+
+                        arraylist.remove( k );
+                        i -= structureset$structureselectionentry3.f_210027_();
+                    }
+
+                }
+            }
+        } );
+    }
+
+    private boolean m_208016_(StructureSet.StructureSelectionEntry p_208017_, StructureFeatureManager p_208018_, RegistryAccess p_208019_, StructureManager p_208020_, long p_208021_, ChunkAccess p_208022_, ChunkPos p_208023_, SectionPos p_208024_) {
+        ConfiguredStructureFeature<?, ?> configuredstructurefeature = p_208017_.f_210026_().m_203334_();
+        int i = m_207976_( p_208018_, p_208022_, p_208024_, configuredstructurefeature );
+        HolderSet<Biome> holderset = configuredstructurefeature.m_209752_();
+        Predicate<Holder<Biome>> predicate = (p_211672_) -> {
+            return holderset.m_203333_( this.m_203427_( p_211672_ ) );
+        };
+        StructureStart structurestart = configuredstructurefeature.m_204707_( p_208019_, this, this.f_62137_, p_208020_, p_208021_, p_208023_, i, p_208022_, predicate );
+        if (structurestart.m_73603_()) {
+            p_208018_.m_207806_( p_208024_, configuredstructurefeature, structurestart, p_208022_ );
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    private static int m_207976_(StructureFeatureManager p_207977_, ChunkAccess p_207978_, SectionPos p_207979_, ConfiguredStructureFeature<?, ?> p_207980_) {
+        StructureStart structurestart = p_207977_.m_207802_( p_207979_, p_207980_, p_207978_ );
+        return structurestart != null ? structurestart.m_73608_() : 0;
+    }
+
+    protected Holder<Biome> m_203427_(Holder<Biome> p_204385_) {
+        return p_204385_;
+    }
+
+    public void m_62177_(WorldGenLevel p_62178_, StructureFeatureManager p_62179_, ChunkAccess p_62180_) {
+        int i = 8;
+        ChunkPos chunkpos = p_62180_.m_7697_();
+        int j = chunkpos.f_45578_;
+        int k = chunkpos.f_45579_;
+        int l = chunkpos.m_45604_();
+        int i1 = chunkpos.m_45605_();
+        SectionPos sectionpos = SectionPos.m_175562_( p_62180_ );
+
+        for (int j1 = j - 8; j1 <= j + 8; ++j1) {
+            for (int k1 = k - 8; k1 <= k + 8; ++k1) {
+                long l1 = ChunkPos.m_45589_( j1, k1 );
+
+                for (StructureStart structurestart : p_62178_.m_6325_( j1, k1 ).m_6633_().values()) {
+                    try {
+                        if (structurestart.m_73603_() && structurestart.m_73601_().m_71019_( l, i1, l + 15, i1 + 15 )) {
+                            p_62179_.m_207797_( sectionpos, structurestart.m_210081_(), l1, p_62180_ );
+                            DebugPackets.m_133711_( p_62178_, structurestart );
+                        }
+                    } catch (Exception exception) {
+                        CrashReport crashreport = CrashReport.m_127521_( exception, "Generating structure reference" );
+                        CrashReportCategory crashreportcategory = crashreport.m_127514_( "Structure" );
+                        Optional<? extends Registry<ConfiguredStructureFeature<?, ?>>> optional = p_62178_.m_5962_().m_6632_( Registry.f_122882_ );
+                        crashreportcategory.m_128165_( "Id", () -> {
+                            return optional.map( (p_211661_) -> {
+                                return p_211661_.m_7981_( structurestart.m_210081_() ).toString();
+                            } ).orElse( "UNKNOWN" );
+                        } );
+                        crashreportcategory.m_128165_( "Name", () -> {
+                            return Registry.f_122841_.m_7981_( structurestart.m_210081_().f_65403_ ).toString();
+                        } );
+                        crashreportcategory.m_128165_( "Class", () -> {
+                            return structurestart.m_210081_().getClass().getCanonicalName();
+                        } );
+                        throw new ReportedException( crashreport );
+                    }
+                }
+            }
+        }
+
+    }
+
+    public abstract CompletableFuture<ChunkAccess> m_183489_(Executor p_187748_, Blender p_187749_, StructureFeatureManager p_187750_, ChunkAccess p_187751_);
+
+    public abstract int m_6337_();
+
+    public abstract int m_142062_();
+
+    public abstract int m_142647_(int p_156153_, int p_156154_, Heightmap.Types p_156155_, LevelHeightAccessor p_156156_);
+
+    public abstract NoiseColumn m_141914_(int p_156150_, int p_156151_, LevelHeightAccessor p_156152_);
+
+    public int m_156174_(int p_156175_, int p_156176_, Heightmap.Types p_156177_, LevelHeightAccessor p_156178_) {
+        return this.m_142647_( p_156175_, p_156176_, p_156177_, p_156178_ );
+    }
+
+    public int m_156179_(int p_156180_, int p_156181_, Heightmap.Types p_156182_, LevelHeightAccessor p_156183_) {
+        return this.m_142647_( p_156180_, p_156181_, p_156182_, p_156183_ ) - 1;
+    }
+
+    public void m_211700_() {
+        if (!this.f_207958_) {
+            this.m_208097_();
+            this.f_207958_ = true;
+        }
+
+    }
+
+    @Nullable
+    public List<ChunkPos> m_204380_(ConcentricRingsStructurePlacement p_204381_) {
+        this.m_211700_();
+        CompletableFuture<List<ChunkPos>> completablefuture = this.f_204350_.get( p_204381_ );
+        return completablefuture != null ? completablefuture.join() : null;
+    }
+
+    private List<StructurePlacement> m_208090_(Holder<ConfiguredStructureFeature<?, ?>> p_208091_) {
+        this.m_211700_();
+        return this.f_207957_.getOrDefault( p_208091_.m_203334_(), List.of() );
+    }
+
+    public abstract void m_207076_(List<String> p_208054_, BlockPos p_208055_);
+
+    static {
+        Registry.m_122961_( Registry.f_122890_, "noise", NoiseBasedChunkGenerator.f_64314_ );
+        Registry.m_122961_( Registry.f_122890_, "flat", FlatLevelSource.f_64164_ );
+        Registry.m_122961_( Registry.f_122890_, "debug", DebugLevelSource.f_64111_ );
+        f_211627_ = LogUtils.getLogger();
+        f_62136_ = Registry.f_122890_.m_194605_().dispatchStable( ChunkGenerator::m_6909_, Function.identity() );
+    }
 }
