--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -146,6 +_,7 @@
             return Registry.FLUID.getOptional(ResourceLocation.tryParse(p_188285_));
          }, p_188233_);
          chunkaccess = new LevelChunk(p_188231_.getLevel(), p_188233_, upgradedata, levelchunkticks, levelchunkticks1, j1, alevelchunksection, postLoadChunk(p_188231_, p_188234_), blendingdata);
+         if (p_188234_.contains("ForgeCaps")) ((LevelChunk)chunkaccess).readCapsFromNBT(p_188234_.getCompound("ForgeCaps"));
       } else {
          ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.load(p_188234_.getList("block_ticks", 10), (p_196906_) -> {
             return Registry.BLOCK.getOptional(ResourceLocation.tryParse(p_196906_));
@@ -170,13 +_,20 @@
          boolean flag2 = chunkstatus.isOrAfter(ChunkStatus.LIGHT) || belowzeroretrogen != null && belowzeroretrogen.targetStatus().isOrAfter(ChunkStatus.LIGHT);
          if (!flag && flag2) {
             for(BlockPos blockpos : BlockPos.betweenClosed(p_188233_.getMinBlockX(), p_188231_.getMinBuildHeight(), p_188233_.getMinBlockZ(), p_188233_.getMaxBlockX(), p_188231_.getMaxBuildHeight() - 1, p_188233_.getMaxBlockZ())) {
-               if (chunkaccess.getBlockState(blockpos).getLightEmission() != 0) {
+               if (chunkaccess.getBlockState(blockpos).getLightEmission(chunkaccess, blockpos) != 0) {
                   protochunk.addLight(blockpos);
                }
             }
          }
       }
 
+      // CraftBukkit start - load chunk persistent data from nbt - SPIGOT-6814: Already load PDC here to account for 1.17 to 1.18 chunk upgrading.
+      net.minecraft.nbt.Tag persistentBase = p_188234_.get("ChunkBukkitValues");
+      if (persistentBase instanceof CompoundTag) {
+         ((ChunkAccess) chunkaccess).persistentDataContainer.putAll((CompoundTag) persistentBase);
+      }
+      // CraftBukkit end
+
       chunkaccess.setLightCorrect(flag);
       CompoundTag compoundtag2 = p_188234_.getCompound("Heightmaps");
       EnumSet<Heightmap.Types> enumset = EnumSet.noneOf(Heightmap.Types.class);
@@ -193,7 +_,7 @@
       Heightmap.primeHeightmaps(chunkaccess, enumset);
       CompoundTag compoundtag3 = p_188234_.getCompound("structures");
       chunkaccess.setAllStarts(unpackStructureStart(StructurePieceSerializationContext.fromLevel(p_188231_), compoundtag3, p_188231_.getSeed()));
-      chunkaccess.setAllReferences(unpackStructureReferences(p_188231_.registryAccess(), p_188233_, compoundtag3));
+      net.minecraftforge.common.ForgeHooks.fixNullStructureReferences(chunkaccess, unpackStructureReferences(p_188231_.registryAccess(), p_188233_, compoundtag3));
       if (p_188234_.getBoolean("shouldSave")) {
          chunkaccess.setUnsaved(true);
       }
@@ -209,6 +_,7 @@
       }
 
       if (chunkstatus$chunktype == ChunkStatus.ChunkType.LEVELCHUNK) {
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
       } else {
          ProtoChunk protochunk1 = (ProtoChunk)chunkaccess;
@@ -242,6 +_,7 @@
             protochunk1.setCarvingMask(generationstep$carving, new CarvingMask(compoundtag4.getLongArray(s1), chunkaccess.getMinBuildHeight()));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return protochunk1;
       }
    }
@@ -350,6 +_,15 @@
 
          compoundtag.put("CarvingMasks", compoundtag4);
       }
+      else {
+          LevelChunk levelChunk = (LevelChunk) p_63456_;
+          try {
+              final CompoundTag capTag = levelChunk.writeCapsToNBT();
+              if (capTag != null) compoundtag.put("ForgeCaps", capTag);
+          } catch (Exception exception) {
+              LOGGER.error("A capability provider has thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+          }
+      }
 
       saveTicks(p_63455_, compoundtag, p_63456_.getTicksForSerialization());
       compoundtag.put("PostProcessing", packOffsets(p_63456_.getPostProcessing()));
@@ -363,6 +_,11 @@
 
       compoundtag.put("Heightmaps", compoundtag2);
       compoundtag.put("structures", packStructureData(StructurePieceSerializationContext.fromLevel(p_63455_), chunkpos, p_63456_.getAllStarts(), p_63456_.getAllReferences()));
+      // CraftBukkit start - store chunk persistent data in nbt
+      if (!p_63456_.persistentDataContainer.isEmpty()) { // SPIGOT-6814: Always save PDC to account for 1.17 to 1.18 chunk upgrading.
+         compoundtag.put("ChunkBukkitValues", p_63456_.persistentDataContainer.toTagCompound());
+      }
+      // CraftBukkit end
       return compoundtag;
    }
 
