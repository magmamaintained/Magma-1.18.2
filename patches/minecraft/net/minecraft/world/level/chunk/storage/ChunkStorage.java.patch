--- a/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -11,10 +_,14 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ServerChunkCache;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 
@@ -30,8 +_,45 @@
       this.f_63495_ = new IOWorker(p_196912_, p_196914_, "chunk");
    }
 
-   public CompoundTag m_188288_(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_) {
+   // CraftBukkit start
+   private boolean check(ServerChunkCache cps, int x, int z) throws IOException {
+      ChunkPos pos = new ChunkPos(x, z);
+      if (cps != null) {
+         com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread");
+         if (cps.m_5563_(x, z)) {
+            return true;
+         }
+      }
+      CompoundTag nbt = m_63512_(pos);
+      if (nbt != null) {
+         CompoundTag level = nbt.m_128469_("Level");
+         if (level.m_128471_("TerrainPopulated")) {
+            return true;
+         }
+         ChunkStatus status = ChunkStatus.m_62397_(level.m_128461_("Status"));
+         if (status != null && status.m_62427_(ChunkStatus.f_62322_)) {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   public CompoundTag upgradeChunkTag(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_, ChunkPos pos, @Nullable LevelAccessor generatoraccess) throws IOException  {
+      // CraftBukkit end
       int i = m_63505_(p_188291_);
+
+      // CraftBukkit start
+      if (i < 1466) {
+         CompoundTag level = p_188291_.m_128469_("Level");
+         if (level.m_128471_("TerrainPopulated") && !level.m_128471_("LightPopulated")) {
+            ServerChunkCache cps = (generatoraccess == null) ? null : ((ServerLevel) generatoraccess).m_7726_();
+            if (check(cps, pos.f_45578_ - 1, pos.f_45579_) && check(cps, pos.f_45578_ - 1, pos.f_45579_ - 1) && check(cps, pos.f_45578_, pos.f_45579_ - 1)) {
+               level.m_128379_("LightPopulated", true);
+            }
+         }
+      }
+      // CraftBukkit end
+
       if (i < 1493) {
          p_188291_ = NbtUtils.m_129218_(this.f_63496_, DataFixTypes.CHUNK, p_188291_, i, 1493);
          if (p_188291_.m_128469_("Level").m_128471_("hasLegacyStructureData")) {
@@ -43,11 +_,26 @@
          }
       }
 
+      // Spigot start - SPIGOT-6806: Quick and dirty way to prevent below zero generation in old chunks, by setting the status to heightmap instead of empty
+      boolean stopBelowZero = false;
+      boolean belowZeroGenerationInExistingChunks = (generatoraccess != null) ? ((ServerLevel) generatoraccess).spigotConfig.belowZeroGenerationInExistingChunks : org.spigotmc.SpigotConfig.belowZeroGenerationInExistingChunks;
+
+      if (i <= 2730 && !belowZeroGenerationInExistingChunks) {
+         stopBelowZero = ChunkStatus.f_62326_.m_62467_().equals(p_188291_.m_128469_("Level").m_128461_("Status"));
+      }
+      // Spigot end
+
       m_196918_(p_188291_, p_188289_, p_188292_);
       p_188291_ = NbtUtils.m_129213_(this.f_63496_, DataFixTypes.CHUNK, p_188291_, Math.max(1493, i));
       if (i < SharedConstants.m_183709_().getWorldVersion()) {
          p_188291_.m_128405_("DataVersion", SharedConstants.m_183709_().getWorldVersion());
       }
+
+      // Spigot start
+      if (stopBelowZero) {
+         p_188291_.m_128359_("Status", ChunkStatus.f_62325_.m_62467_());
+      }
+      // Spigot end
 
       p_188291_.m_128473_("__context");
       return p_188291_;
