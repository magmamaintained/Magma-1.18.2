--- a/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -30,8 +_,48 @@
       this.worker = new IOWorker(p_196912_, p_196914_, "chunk");
    }
 
-   public CompoundTag upgradeChunkTag(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_) {
+   // CraftBukkit start
+   private boolean check(net.minecraft.server.level.ServerChunkCache cps, int x, int z) throws IOException {
+      ChunkPos pos = new ChunkPos(x, z);
+      if (cps != null) {
+         com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread");
+         if (cps.hasChunk(x, z)) {
+            return true;
+         }
+      }
+      CompoundTag nbt = read(pos);
+      if (nbt != null) {
+         CompoundTag level = nbt.getCompound("Level");
+         if (level.getBoolean("TerrainPopulated")) {
+            return true;
+         }
+         net.minecraft.world.level.chunk.ChunkStatus status = net.minecraft.world.level.chunk.ChunkStatus.byName(level.getString("Status"));
+         if (status != null && status.isOrAfter(net.minecraft.world.level.chunk.ChunkStatus.FEATURES)) {
+            return true;
+         }
+      }
+      return false;
+   }
+
+   //Magma start - move to original method
+   private @Nullable ChunkPos upgradeChunkTag_pos;
+   private @Nullable net.minecraft.world.level.LevelAccessor upgradeChunkTag_generatoraccess;
+   public CompoundTag upgradeChunkTag(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_) throws IOException {
+      // CraftBukkit end
       int i = getVersion(p_188291_);
+
+      // CraftBukkit start
+      if (i < 1466 && upgradeChunkTag_pos != null) { //Magma - null check
+         CompoundTag level = p_188291_.getCompound("Level");
+         if (level.getBoolean("TerrainPopulated") && !level.getBoolean("LightPopulated")) {
+            net.minecraft.server.level.ServerChunkCache cps = (upgradeChunkTag_generatoraccess == null) ? null : ((net.minecraft.server.level.ServerLevel) upgradeChunkTag_generatoraccess).getChunkSource();
+            if (check(cps, upgradeChunkTag_pos.x - 1, upgradeChunkTag_pos.z) && check(cps, upgradeChunkTag_pos.x - 1, upgradeChunkTag_pos.z - 1) && check(cps, upgradeChunkTag_pos.x, upgradeChunkTag_pos.z - 1)) {
+               level.putBoolean("LightPopulated", true);
+            }
+         }
+      }
+      // CraftBukkit end
+
       if (i < 1493) {
          p_188291_ = NbtUtils.update(this.fixerUpper, DataFixTypes.CHUNK, p_188291_, i, 1493);
          if (p_188291_.getCompound("Level").getBoolean("hasLegacyStructureData")) {
@@ -43,15 +_,42 @@
          }
       }
 
+      // Spigot start - SPIGOT-6806: Quick and dirty way to prevent below zero generation in old chunks, by setting the status to heightmap instead of empty
+      boolean stopBelowZero = false;
+      boolean belowZeroGenerationInExistingChunks = (upgradeChunkTag_generatoraccess != null) ? ((net.minecraft.server.level.ServerLevel) upgradeChunkTag_generatoraccess).spigotConfig.belowZeroGenerationInExistingChunks : org.spigotmc.SpigotConfig.belowZeroGenerationInExistingChunks;
+
+      if (i <= 2730 && !belowZeroGenerationInExistingChunks) {
+         stopBelowZero = net.minecraft.world.level.chunk.ChunkStatus.FULL.getName().equals(p_188291_.getCompound("Level").getString("Status"));
+      }
+      // Spigot end
+
       injectDatafixingContext(p_188291_, p_188289_, p_188292_);
       p_188291_ = NbtUtils.update(this.fixerUpper, DataFixTypes.CHUNK, p_188291_, Math.max(1493, i));
       if (i < SharedConstants.getCurrentVersion().getWorldVersion()) {
          p_188291_.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
       }
 
+      // Spigot start
+      if (stopBelowZero) {
+         p_188291_.putString("Status", net.minecraft.world.level.chunk.ChunkStatus.HEIGHTMAPS.getName());
+      }
+      // Spigot end
+
       p_188291_.remove("__context");
       return p_188291_;
    }
+
+   public CompoundTag upgradeChunkTag(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_, ChunkPos pos, @Nullable net.minecraft.world.level.LevelAccessor generatoraccess) throws IOException  {
+      upgradeChunkTag_pos = pos;
+      upgradeChunkTag_generatoraccess = generatoraccess;
+      try {
+         return upgradeChunkTag(p_188289_, p_188290_, p_188291_, p_188292_);
+      } finally {
+         upgradeChunkTag_pos = null;
+         upgradeChunkTag_generatoraccess = null;
+      }
+   }
+   //Magma end
 
    public static void injectDatafixingContext(CompoundTag p_196919_, ResourceKey<Level> p_196920_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_196921_) {
       CompoundTag compoundtag = new CompoundTag();
