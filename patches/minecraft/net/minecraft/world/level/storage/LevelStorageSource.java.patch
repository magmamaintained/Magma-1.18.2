--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -203,7 +_,12 @@
             LevelVersion levelversion = LevelVersion.parse(dynamic);
             LevelSettings levelsettings = LevelSettings.parse(dynamic, p_211739_);
             Lifecycle lifecycle = pair.getSecond().add(p_211740_);
-            return PrimaryLevelData.parse(dynamic, p_211746_, i, compoundtag2, levelsettings, levelversion, pair.getFirst(), lifecycle);
+
+            // CraftBukkit start - Add PDC to world
+            PrimaryLevelData worldDataServer = PrimaryLevelData.parse(dynamic, p_211746_, i, compoundtag2, levelsettings, levelversion, pair.getFirst(), lifecycle);
+            worldDataServer.pdc = compoundtag1.get("BukkitValues");
+            return worldDataServer;
+            // CraftBukkit end
          } catch (Exception exception) {
             LOGGER.error("Exception reading {}", p_211745_, exception);
             return null;
@@ -272,7 +_,11 @@
    }
 
    public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_) throws IOException {
-      return new LevelStorageSource.LevelStorageAccess(p_78261_);
+      return createAccess(p_78261_, null);
+   }
+
+   public LevelStorageAccess createAccess(String name, @Nullable ResourceKey<net.minecraft.world.level.dimension.LevelStem> actualDimension) throws IOException {
+      return new LevelStorageSource.LevelStorageAccess(name, actualDimension);
    }
 
    public class LevelStorageAccess implements AutoCloseable {
@@ -281,9 +_,13 @@
       private final String levelId;
       private final Map<LevelResource, Path> resources = Maps.newHashMap();
 
-      public LevelStorageAccess(String p_78276_) throws IOException {
-         this.levelId = p_78276_;
-         this.levelPath = LevelStorageSource.this.baseDir.resolve(p_78276_);
+      // CraftBukkit start
+      public final @Nullable ResourceKey<net.minecraft.world.level.dimension.LevelStem> dimensionType;
+
+      public LevelStorageAccess(String s, @Nullable ResourceKey<net.minecraft.world.level.dimension.LevelStem> dimensionType) throws IOException {
+         this.dimensionType = dimensionType;
+         this.levelId = s;
+         this.levelPath = LevelStorageSource.this.baseDir.resolve(s);
          this.lock = DirectoryLock.create(this.levelPath);
       }
 
@@ -324,6 +_,19 @@
          return LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource.getLevelData(p_211748_, p_211749_, p_211750_));
       }
 
+      public void readAdditionalLevelSaveData() {
+         checkLock();
+         LevelStorageSource.this.readLevelData(this.levelPath.toFile(), (file, dataFixer) -> {
+            try {
+               CompoundTag compoundTag = NbtIo.readCompressed(file);
+               net.minecraftforge.common.ForgeHooks.readAdditionalLevelSaveData(compoundTag, this.levelPath);
+            } catch (Exception e) {
+                LOGGER.error("Exception reading {}", file, e);
+            }
+            return ""; // Return non-null to prevent level.dat-old inject
+         });
+      }
+
       @Nullable
       public DataPackConfig getDataPacks() {
          this.checkLock();
@@ -340,6 +_,8 @@
          CompoundTag compoundtag1 = new CompoundTag();
          compoundtag1.put("Data", compoundtag);
 
+         net.minecraftforge.common.ForgeHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
+
          try {
             File file2 = File.createTempFile("level", ".dat", file1);
             NbtIo.writeCompressed(compoundtag1, file2);
@@ -354,6 +_,10 @@
 
       public Optional<Path> getIconFile() {
          return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelPath.resolve("icon.png"));
+      }
+
+      public Path getWorldDir() {
+         return levelPath;
       }
 
       public void deleteLevel() throws IOException {
