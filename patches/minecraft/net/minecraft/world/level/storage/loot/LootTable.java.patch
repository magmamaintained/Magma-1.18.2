--- a/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/net/minecraft/world/level/storage/loot/LootTable.java
@@ -34,13 +_,13 @@
    public static final LootTable EMPTY = new LootTable(LootContextParamSets.EMPTY, new LootPool[0], new LootItemFunction[0]);
    public static final LootContextParamSet DEFAULT_PARAM_SET = LootContextParamSets.ALL_PARAMS;
    final LootContextParamSet paramSet;
-   final LootPool[] pools;
+   private final List<LootPool> pools;
    final LootItemFunction[] functions;
    private final BiFunction<ItemStack, LootContext, ItemStack> compositeFunction;
 
    LootTable(LootContextParamSet p_79114_, LootPool[] p_79115_, LootItemFunction[] p_79116_) {
       this.paramSet = p_79114_;
-      this.pools = p_79115_;
+      this.pools = Lists.newArrayList(p_79115_);
       this.functions = p_79116_;
       this.compositeFunction = LootItemFunctions.compose(p_79116_);
    }
@@ -78,6 +_,7 @@
 
    }
 
+   @Deprecated //Use other method or manually call ForgeHooks.modifyLoot
    public void getRandomItems(LootContext p_79149_, Consumer<ItemStack> p_79150_) {
       this.getRandomItemsRaw(p_79149_, createStackSplitter(p_79150_));
    }
@@ -85,6 +_,7 @@
    public List<ItemStack> getRandomItems(LootContext p_79130_) {
       List<ItemStack> list = Lists.newArrayList();
       this.getRandomItems(p_79130_, list::add);
+      list = net.minecraftforge.common.ForgeHooks.modifyLoot(this.getLootTableId(), list, p_79130_);
       return list;
    }
 
@@ -93,8 +_,8 @@
    }
 
    public void validate(ValidationContext p_79137_) {
-      for(int i = 0; i < this.pools.length; ++i) {
-         this.pools[i].validate(p_79137_.forChild(".pools[" + i + "]"));
+      for(int i = 0; i < this.pools.size(); ++i) {
+         this.pools.get(i).validate(p_79137_.forChild(".pools[" + i + "]"));
       }
 
       for(int j = 0; j < this.functions.length; ++j) {
@@ -104,8 +_,29 @@
    }
 
    public void fill(Container p_79124_, LootContext p_79125_) {
+      // CraftBukkit start
+      this.fillInventory(p_79124_, p_79125_, false);
+   }
+
+   public void fillInventory(Container p_79124_, LootContext p_79125_, boolean plugin) {
+      // CraftBukkit end
       List<ItemStack> list = this.getRandomItems(p_79125_);
       Random random = p_79125_.getRandom();
+
+      //Magma start - don't fire event if loot context has empty params
+      if (!p_79125_.isEmptyParams()) {
+         // CraftBukkit start
+         org.bukkit.event.world.LootGenerateEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callLootGenerateEvent(p_79124_, this, p_79125_, list, plugin);
+
+         if (event != null) {
+            if (event.isCancelled()) {
+               return;
+            }
+            list = event.getLoot().stream().map(org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack::asNMSCopy).collect(java.util.stream.Collectors.toList());
+         }
+         // CraftBukkit end
+      }
+      //Magma end
       List<Integer> list1 = this.getAvailableSlots(p_79124_, random);
       this.shuffleAndSplitItems(list, list1.size(), random);
 
@@ -176,6 +_,48 @@
       return new LootTable.Builder();
    }
 
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() {
+      this.isFrozen = true;
+      this.pools.forEach(LootPool::freeze);
+   }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootTable after being finalized!");
+   }
+
+   private ResourceLocation lootTableId;
+   public void setLootTableId(final ResourceLocation id) {
+      if (this.lootTableId != null) throw new IllegalStateException("Attempted to rename loot table from '" + this.lootTableId + "' to '" + id + "': this is not supported");
+      this.lootTableId = java.util.Objects.requireNonNull(id);
+   }
+   public ResourceLocation getLootTableId() { return this.lootTableId; }
+
+   public LootPool getPool(String name) {
+      return pools.stream().filter(e -> name.equals(e.getName())).findFirst().orElse(null);
+   }
+
+   public LootPool removePool(String name) {
+      checkFrozen();
+      for (LootPool pool : this.pools) {
+         if (name.equals(pool.getName())) {
+            this.pools.remove(pool);
+            return pool;
+         }
+      }
+      return null;
+   }
+
+   public void addPool(LootPool pool) {
+      checkFrozen();
+      if (pools.stream().anyMatch(e -> e == pool || e.getName() != null && e.getName().equals(pool.getName())))
+         throw new RuntimeException("Attempted to add a duplicate pool to loot table: " + pool.getName());
+      this.pools.add(pool);
+   }
+   //======================== FORGE END ===============================================
+
    public static class Builder implements FunctionUserBuilder<LootTable.Builder> {
       private final List<LootPool> pools = Lists.newArrayList();
       private final List<LootItemFunction> functions = Lists.newArrayList();
@@ -230,7 +_,7 @@
             }
          }
 
-         if (p_79177_.pools.length > 0) {
+         if (!p_79177_.pools.isEmpty()) {
             jsonobject.add("pools", p_79179_.serialize(p_79177_.pools));
          }
 
