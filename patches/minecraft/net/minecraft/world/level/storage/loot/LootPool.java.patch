--- a/net/minecraft/world/level/storage/loot/LootPool.java
+++ b/net/minecraft/world/level/storage/loot/LootPool.java
@@ -31,6 +_,7 @@
 import org.apache.commons.lang3.mutable.MutableInt;
 
 public class LootPool {
+   private final String name;
    final LootPoolEntryContainer[] entries;
    final LootItemCondition[] conditions;
    private final Predicate<LootContext> compositeCondition;
@@ -39,7 +_,8 @@
    NumberProvider rolls;
    NumberProvider bonusRolls;
 
-   LootPool(LootPoolEntryContainer[] p_165128_, LootItemCondition[] p_165129_, LootItemFunction[] p_165130_, NumberProvider p_165131_, NumberProvider p_165132_) {
+   LootPool(LootPoolEntryContainer[] p_165128_, LootItemCondition[] p_165129_, LootItemFunction[] p_165130_, NumberProvider p_165131_, NumberProvider p_165132_, String name) {
+      this.name = name;
       this.entries = p_165128_;
       this.conditions = p_165129_;
       this.compositeCondition = LootItemConditions.andConditions(p_165129_);
@@ -112,6 +_,20 @@
       this.rolls.validate(p_79052_.forChild(".rolls"));
       this.bonusRolls.validate(p_79052_.forChild(".bonusRolls"));
    }
+   //======================== FORGE START =============================================
+   private boolean isFrozen = false;
+   public void freeze() { this.isFrozen = true; }
+   public boolean isFrozen(){ return this.isFrozen; }
+   private void checkFrozen() {
+      if (this.isFrozen())
+         throw new RuntimeException("Attempted to modify LootPool after being frozen!");
+   }
+   public String getName(){ return this.name; }
+   public NumberProvider getRolls()      { return this.rolls; }
+   public NumberProvider getBonusRolls() { return this.bonusRolls; }
+   public void setRolls     (NumberProvider v){ checkFrozen(); this.rolls = v; }
+   public void setBonusRolls(NumberProvider v){ checkFrozen(); this.bonusRolls = v; }
+   //======================== FORGE END ===============================================
 
    public static LootPool.Builder lootPool() {
       return new LootPool.Builder();
@@ -123,6 +_,7 @@
       private final List<LootItemFunction> functions = Lists.newArrayList();
       private NumberProvider rolls = ConstantValue.exactly(1.0F);
       private NumberProvider bonusRolls = ConstantValue.exactly(0.0F);
+      private String name;
 
       public LootPool.Builder setRolls(NumberProvider p_165134_) {
          this.rolls = p_165134_;
@@ -153,11 +_,16 @@
          return this;
       }
 
+      public LootPool.Builder name(String name) {
+         this.name = name;
+         return this;
+      }
+
       public LootPool build() {
          if (this.rolls == null) {
             throw new IllegalArgumentException("Rolls not set");
          } else {
-            return new LootPool(this.entries.toArray(new LootPoolEntryContainer[0]), this.conditions.toArray(new LootItemCondition[0]), this.functions.toArray(new LootItemFunction[0]), this.rolls, this.bonusRolls);
+            return new LootPool(this.entries.toArray(new LootPoolEntryContainer[0]), this.conditions.toArray(new LootItemCondition[0]), this.functions.toArray(new LootItemFunction[0]), this.rolls, this.bonusRolls, name);
          }
       }
    }
@@ -170,11 +_,13 @@
          LootItemFunction[] alootitemfunction = GsonHelper.getAsObject(jsonobject, "functions", new LootItemFunction[0], p_79092_, LootItemFunction[].class);
          NumberProvider numberprovider = GsonHelper.getAsObject(jsonobject, "rolls", p_79092_, NumberProvider.class);
          NumberProvider numberprovider1 = GsonHelper.getAsObject(jsonobject, "bonus_rolls", ConstantValue.exactly(0.0F), p_79092_, NumberProvider.class);
-         return new LootPool(alootpoolentrycontainer, alootitemcondition, alootitemfunction, numberprovider, numberprovider1);
+         return new LootPool(alootpoolentrycontainer, alootitemcondition, alootitemfunction, numberprovider, numberprovider1, net.minecraftforge.common.ForgeHooks.readPoolName(jsonobject));
       }
 
       public JsonElement serialize(LootPool p_79094_, Type p_79095_, JsonSerializationContext p_79096_) {
          JsonObject jsonobject = new JsonObject();
+         if (p_79094_.name != null && !p_79094_.name.startsWith("custom#"))
+            jsonobject.add("name", p_79096_.serialize(p_79094_.name));
          jsonobject.add("rolls", p_79096_.serialize(p_79094_.rolls));
          jsonobject.add("bonus_rolls", p_79096_.serialize(p_79094_.bonusRolls));
          jsonobject.add("entries", p_79096_.serialize(p_79094_.entries));
