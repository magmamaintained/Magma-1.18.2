--- a/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/net/minecraft/world/level/storage/loot/LootContext.java
@@ -107,17 +_,47 @@
       return this.level;
    }
 
+   // ============================== FORGE START ==============================
+   public int getLootingModifier() {
+      return net.minecraftforge.common.ForgeHooks.getLootingLevel(getParamOrNull(LootContextParams.THIS_ENTITY), getParamOrNull(LootContextParams.KILLER_ENTITY), getParamOrNull(LootContextParams.DAMAGE_SOURCE));
+   }
+
+   private ResourceLocation queriedLootTableId;
+
+   private LootContext(Random rand, float luckIn, ServerLevel worldIn, Function<ResourceLocation, LootTable> lootTableManagerIn, Function<ResourceLocation, LootItemCondition> p_i225885_5_, Map<LootContextParam<?>, Object> parametersIn, Map<ResourceLocation, LootContext.DynamicDrop> conditionsIn, ResourceLocation queriedLootTableId) {
+      this(rand, luckIn, worldIn, lootTableManagerIn, p_i225885_5_, parametersIn, conditionsIn);
+      if (queriedLootTableId != null) this.queriedLootTableId = queriedLootTableId;
+   }
+
+   public void setQueriedLootTableId(ResourceLocation queriedLootTableId) {
+      if (this.queriedLootTableId == null && queriedLootTableId != null) this.queriedLootTableId = queriedLootTableId;
+   }
+   public ResourceLocation getQueriedLootTableId() {
+      return this.queriedLootTableId == null? net.minecraftforge.common.loot.LootTableIdCondition.UNKNOWN_LOOT_TABLE : this.queriedLootTableId;
+   }
+   // =============================== FORGE END ===============================
+
    public static class Builder {
       private final ServerLevel level;
       private final Map<LootContextParam<?>, Object> params = Maps.newIdentityHashMap();
       private final Map<ResourceLocation, LootContext.DynamicDrop> dynamicDrops = Maps.newHashMap();
       private Random random;
       private float luck;
+      private ResourceLocation queriedLootTableId; // Forge: correctly pass around loot table ID with copy constructor
 
       public Builder(ServerLevel p_78961_) {
          this.level = p_78961_;
       }
 
+      public Builder(LootContext context) {
+         this.level = context.level;
+         this.params.putAll(context.params);
+         this.dynamicDrops.putAll(context.dynamicDrops);
+         this.random = context.random;
+         this.luck = context.luck;
+         this.queriedLootTableId = context.queriedLootTableId;
+      }
+
       public LootContext.Builder withRandom(Random p_78978_) {
          this.random = p_78978_;
          return this;
@@ -190,7 +_,7 @@
 
       public LootContext create(LootContextParamSet p_78976_) {
          Set<LootContextParam<?>> set = Sets.difference(this.params.keySet(), p_78976_.getAllowed());
-         if (!set.isEmpty()) {
+         if (false && !set.isEmpty()) { // Forge: Allow mods to pass custom loot parameters (not part of the vanilla loot table) to the loot context.
             throw new IllegalArgumentException("Parameters not allowed in this parameter set: " + set);
          } else {
             Set<LootContextParam<?>> set1 = Sets.difference(p_78976_.getRequired(), this.params.keySet());
@@ -203,12 +_,26 @@
                }
 
                MinecraftServer minecraftserver = this.level.getServer();
-               return new LootContext(random, this.luck, this.level, minecraftserver.getLootTables()::get, minecraftserver.getPredicateManager()::get, this.params, this.dynamicDrops);
+               //Magma start - check if params are empty, prevents crash with bukkit loot generate event and forge mods
+               LootContext context = new LootContext(random, this.luck, this.level, minecraftserver.getLootTables()::get, minecraftserver.getPredicateManager()::get, this.params, this.dynamicDrops, this.queriedLootTableId);
+               if (p_78976_ == net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.EMPTY || (p_78976_.getRequired().isEmpty() && p_78976_.getAllowed().isEmpty()))
+                  context.setEmptyParams();
+               return context;
             }
          }
       }
    }
 
+   private boolean emptyParams = false;
+   private void setEmptyParams() {
+      emptyParams = true;
+   }
+
+   public boolean isEmptyParams() {
+      return emptyParams;
+   }
+   //Magma end
+
    @FunctionalInterface
    public interface DynamicDrop {
       void add(LootContext p_78988_, Consumer<ItemStack> p_78989_);
@@ -230,6 +_,11 @@
 
       public LootContextParam<? extends Entity> getParam() {
          return this.param;
+      }
+
+      // Forge: This method is patched in to expose the same name used in getByName so that ContextNbtProvider#forEntity serializes it properly
+      public String getName() {
+         return this.name;
       }
 
       public static LootContext.EntityTarget getByName(String p_79007_) {
