--- a/net/minecraft/world/level/storage/loot/LootTables.java
+++ b/net/minecraft/world/level/storage/loot/LootTables.java
@@ -18,6 +_,7 @@
    private static final Logger LOGGER = LogUtils.getLogger();
    private static final Gson GSON = Deserializers.createLootTableSerializer().create();
    private Map<ResourceLocation, LootTable> tables = ImmutableMap.of();
+   public Map<LootTable, ResourceLocation> lootTableToKey = ImmutableMap.of(); // CraftBukkit
    private final PredicateManager predicateManager;
 
    public LootTables(PredicateManager p_79194_) {
@@ -29,6 +_,18 @@
       return this.tables.getOrDefault(p_79218_, LootTable.EMPTY);
    }
 
+   // CraftBukkit start
+   public ResourceLocation getKey(LootTable p_186521_1_) {
+      ResourceLocation key = ResourceLocation.tryParse("");
+      for (Map.Entry<ResourceLocation, LootTable> tableMap : tables.entrySet()) {
+         if (p_186521_1_.equals(tableMap.getValue())) {
+            key = tableMap.getKey();
+         }
+      }
+      return key;
+   }
+   // CraftBukkit end
+
    protected void apply(Map<ResourceLocation, JsonElement> p_79214_, ResourceManager p_79215_, ProfilerFiller p_79216_) {
       Builder<ResourceLocation, LootTable> builder = ImmutableMap.builder();
       JsonElement jsonelement = p_79214_.remove(BuiltInLootTables.EMPTY);
@@ -37,8 +_,8 @@
       }
 
       p_79214_.forEach((p_79198_, p_79199_) -> {
-         try {
-            LootTable loottable = GSON.fromJson(p_79199_, LootTable.class);
+         try (net.minecraft.server.packs.resources.Resource res = p_79215_.getResource(getPreparedPath(p_79198_));){
+            LootTable loottable = net.minecraftforge.common.ForgeHooks.loadLootTable(GSON, p_79198_, p_79199_, res == null || !res.getSourceName().equals("Default"), this);
             builder.put(p_79198_, loottable);
          } catch (Exception exception) {
             LOGGER.error("Couldn't parse loot table {}", p_79198_, exception);
@@ -55,6 +_,11 @@
          LOGGER.warn("Found validation problem in {}: {}", p_79211_, p_79212_);
       });
       this.tables = immutablemap;
+      // CraftBukkit start - build a reversed registry map
+      ImmutableMap.Builder<LootTable, ResourceLocation> lootTableToKeyBuilder = ImmutableMap.builder();
+      this.tables.forEach((lootTable, key) -> lootTableToKeyBuilder.put(key, lootTable));
+      this.lootTableToKey = lootTableToKeyBuilder.build();
+      // CraftBukkit end
    }
 
    public static void validate(ValidationContext p_79203_, ResourceLocation p_79204_, LootTable p_79205_) {
