--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -107,6 +_,7 @@
       this.recipeType = p_154994_;
    }
 
+   /**@deprecated Forge: get burn times by calling ForgeHooks#getBurnTime(ItemStack)*/ @Deprecated
    public static Map<Item, Integer> getFuel() {
       Map<Item, Integer> map = Maps.newLinkedHashMap();
       add(map, Items.LAVA_BUCKET, 20000);
@@ -206,9 +_,9 @@
       super.load(p_155025_);
       this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
       ContainerHelper.loadAllItems(p_155025_, this.items);
-      this.litTime = p_155025_.getShort("BurnTime");
-      this.cookingProgress = p_155025_.getShort("CookTime");
-      this.cookingTotalTime = p_155025_.getShort("CookTimeTotal");
+      this.litTime = p_155025_.getInt("BurnTime");
+      this.cookingProgress = p_155025_.getInt("CookTime");
+      this.cookingTotalTime = p_155025_.getInt("CookTimeTotal");
       this.litDuration = this.getBurnDuration(this.items.get(1));
       CompoundTag compoundtag = p_155025_.getCompound("RecipesUsed");
 
@@ -220,9 +_,9 @@
 
    protected void saveAdditional(CompoundTag p_187452_) {
       super.saveAdditional(p_187452_);
-      p_187452_.putShort("BurnTime", (short)this.litTime);
-      p_187452_.putShort("CookTime", (short)this.cookingProgress);
-      p_187452_.putShort("CookTimeTotal", (short)this.cookingTotalTime);
+      p_187452_.putInt("BurnTime", this.litTime);
+      p_187452_.putInt("CookTime", this.cookingProgress);
+      p_187452_.putInt("CookTimeTotal", this.cookingTotalTime);
       ContainerHelper.saveAllItems(p_187452_, this.items);
       CompoundTag compoundtag = new CompoundTag();
       this.recipesUsed.forEach((p_187449_, p_187450_) -> {
@@ -240,30 +_,51 @@
 
       ItemStack itemstack = p_155017_.items.get(1);
       if (p_155017_.isLit() || !itemstack.isEmpty() && !p_155017_.items.get(0).isEmpty()) {
-         Recipe<?> recipe = p_155014_.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>)p_155017_.recipeType, p_155017_, p_155014_).orElse((AbstractCookingRecipe)null);
+         Recipe<?> recipe = p_155014_.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>)p_155017_.recipeType, p_155017_, p_155014_).orElse(null);
          int i = p_155017_.getMaxStackSize();
-         if (!p_155017_.isLit() && canBurn(recipe, p_155017_.items, i)) {
-            p_155017_.litTime = p_155017_.getBurnDuration(itemstack);
+         if (!p_155017_.isLit() && p_155017_.canBurn(recipe, p_155017_.items, i)) {
+            // CraftBukkit start
+            org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack fuel = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.event.inventory.FurnaceBurnEvent furnaceBurnEvent = new org.bukkit.event.inventory.FurnaceBurnEvent(org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(p_155014_, p_155015_), fuel, p_155017_.getBurnDuration(itemstack));
+            p_155014_.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+            if (furnaceBurnEvent.isCancelled()) {
+               return;
+            }
+
+            p_155017_.litTime = furnaceBurnEvent.getBurnTime();
             p_155017_.litDuration = p_155017_.litTime;
-            if (p_155017_.isLit()) {
+            if (p_155017_.isLit() && furnaceBurnEvent.isBurning()) {
+               // CraftBukkit end
                flag1 = true;
+               if (itemstack.hasContainerItem())
+                  p_155017_.items.set(1, itemstack.getContainerItem());
+               else
                if (!itemstack.isEmpty()) {
                   Item item = itemstack.getItem();
                   itemstack.shrink(1);
                   if (itemstack.isEmpty()) {
-                     Item item1 = item.getCraftingRemainingItem();
-                     p_155017_.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
+                     p_155017_.items.set(1, itemstack.getContainerItem());
                   }
                }
             }
          }
 
-         if (p_155017_.isLit() && canBurn(recipe, p_155017_.items, i)) {
+         if (p_155017_.isLit() && p_155017_.canBurn(recipe, p_155017_.items, i)) {
+            // CraftBukkit start
+            if (recipe != null && p_155017_.cookingProgress == 0) {
+               org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack source = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(p_155017_.items.get(0));
+               org.bukkit.inventory.CookingRecipe<?> cookingRecipe = (org.bukkit.inventory.CookingRecipe<?>) recipe.toBukkitRecipe();
+               org.bukkit.event.inventory.FurnaceStartSmeltEvent event = new org.bukkit.event.inventory.FurnaceStartSmeltEvent(org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(p_155014_, p_155015_), source, cookingRecipe);
+               p_155014_.getCraftServer().getPluginManager().callEvent(event);
+               p_155017_.cookingTotalTime = event.getTotalCookTime();
+            }
+            // CraftBukkit end
             ++p_155017_.cookingProgress;
             if (p_155017_.cookingProgress == p_155017_.cookingTotalTime) {
                p_155017_.cookingProgress = 0;
                p_155017_.cookingTotalTime = getTotalCookTime(p_155014_, p_155017_.recipeType, p_155017_);
-               if (burn(recipe, p_155017_.items, i)) {
+               if (p_155017_.burn(p_155017_.level, p_155017_.worldPosition, recipe, p_155017_.items, i)) { // CraftBukkit
                   p_155017_.setRecipeUsed(recipe);
                }
 
@@ -288,9 +_,9 @@
 
    }
 
-   private static boolean canBurn(@Nullable Recipe<?> p_155006_, NonNullList<ItemStack> p_155007_, int p_155008_) {
+   private boolean canBurn(@Nullable Recipe<?> p_155006_, NonNullList<ItemStack> p_155007_, int p_155008_) {
       if (!p_155007_.get(0).isEmpty() && p_155006_ != null) {
-         ItemStack itemstack = p_155006_.getResultItem();
+         ItemStack itemstack = ((Recipe<WorldlyContainer>) p_155006_).assemble(this);
          if (itemstack.isEmpty()) {
             return false;
          } else {
@@ -299,10 +_,10 @@
                return true;
             } else if (!itemstack1.sameItem(itemstack)) {
                return false;
-            } else if (itemstack1.getCount() < p_155008_ && itemstack1.getCount() < itemstack1.getMaxStackSize()) {
+            } else if (itemstack1.getCount() + itemstack.getCount() <= p_155008_ && itemstack1.getCount() + itemstack.getCount() <= itemstack1.getMaxStackSize()) { // Forge fix: make furnace respect stack sizes in furnace recipes
                return true;
             } else {
-               return itemstack1.getCount() < itemstack.getMaxStackSize();
+               return itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize(); // Forge fix: make furnace respect stack sizes in furnace recipes
             }
          }
       } else {
@@ -310,17 +_,44 @@
       }
    }
 
-   private static boolean burn(@Nullable Recipe<?> p_155027_, NonNullList<ItemStack> p_155028_, int p_155029_) {
+   //Magma start - mixin inject
+   private final java.util.concurrent.atomic.AtomicReference<Level> burn_level = new java.util.concurrent.atomic.AtomicReference<>();
+   private final java.util.concurrent.atomic.AtomicReference<BlockPos> burn_pos = new java.util.concurrent.atomic.AtomicReference<>();
+   private boolean burn(@Nullable Recipe<?> p_155027_, NonNullList<ItemStack> p_155028_, int p_155029_) {
+      Level level = burn_level.getAndSet(null);
+      BlockPos blockposition = burn_pos.getAndSet(null);
+
       if (p_155027_ != null && canBurn(p_155027_, p_155028_, p_155029_)) {
          ItemStack itemstack = p_155028_.get(0);
-         ItemStack itemstack1 = p_155027_.getResultItem();
+         ItemStack itemstack1 = ((Recipe<WorldlyContainer>) p_155027_).assemble(this);
          ItemStack itemstack2 = p_155028_.get(2);
-         if (itemstack2.isEmpty()) {
-            p_155028_.set(2, itemstack1.copy());
-         } else if (itemstack2.is(itemstack1.getItem())) {
-            itemstack2.grow(1);
-         }
-
+
+         // CraftBukkit start - fire FurnaceSmeltEvent
+         org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack source = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(itemstack);
+         org.bukkit.inventory.ItemStack result = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asBukkitCopy(itemstack1);
+         if (level != null && blockposition != null) { //Do not fire event if level or blockpos are null
+            org.bukkit.event.inventory.FurnaceSmeltEvent furnaceSmeltEvent = new org.bukkit.event.inventory.FurnaceSmeltEvent(org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(level, blockposition), source, result);
+            level.getCraftServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+               return false;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+         }
+
+         itemstack1 = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asNMSCopy(result);
+
+         if (!itemstack1.isEmpty()) {
+            if (itemstack2.isEmpty()) {
+               p_155028_.set(2, itemstack1.copy());
+            } else if (org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+               itemstack2.grow(itemstack1.getCount());
+            } else {
+               return false;
+            }
+         }
+         // CraftBukkit end
          if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !p_155028_.get(1).isEmpty() && p_155028_.get(1).is(Items.BUCKET)) {
             p_155028_.set(1, new ItemStack(Items.WATER_BUCKET));
          }
@@ -332,21 +_,28 @@
       }
    }
 
+   private boolean burn(Level level, BlockPos blockposition, @Nullable Recipe<?> p_155027_, NonNullList<ItemStack> p_155028_, int p_155029_) {
+      burn_level.set(level);
+      burn_pos.set(blockposition);
+      return burn(p_155027_, p_155028_, p_155029_);
+   }
+   //Magma end
+
    protected int getBurnDuration(ItemStack p_58343_) {
       if (p_58343_.isEmpty()) {
          return 0;
       } else {
          Item item = p_58343_.getItem();
-         return getFuel().getOrDefault(item, 0);
+         return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58343_, this.recipeType);
       }
    }
 
    private static int getTotalCookTime(Level p_155010_, RecipeType<? extends AbstractCookingRecipe> p_155011_, Container p_155012_) {
-      return p_155010_.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>)p_155011_, p_155012_, p_155010_).map(AbstractCookingRecipe::getCookingTime).orElse(200);
+      return (p_155010_ != null) ? p_155010_.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>)p_155011_, p_155012_, p_155010_).map(AbstractCookingRecipe::getCookingTime).orElse(200) : 200;
    }
 
    public static boolean isFuel(ItemStack p_58400_) {
-      return getFuel().containsKey(p_58400_.getItem());
+      return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58400_, null) > 0;
    }
 
    public int[] getSlotsForFace(Direction p_58363_) {
@@ -426,7 +_,7 @@
          return true;
       } else {
          ItemStack itemstack = this.items.get(1);
-         return isFuel(p_58390_) || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
+         return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58390_, this.recipeType) > 0 || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
       }
    }
 
@@ -456,19 +_,36 @@
       this.recipesUsed.clear();
    }
 
+   public void awardUsedRecipesAndPopExperience(ServerPlayer p_155004_, ItemStack itemstack, int amount) {
+      List<Recipe<?>> list = this.getRecipesToAwardAndPopExperience(p_155004_.getLevel(), p_155004_.position(), this.worldPosition, p_155004_, itemstack, amount); // CraftBukkit
+      p_155004_.awardRecipes(list);
+      this.recipesUsed.clear();
+   }
+
    public List<Recipe<?>> getRecipesToAwardAndPopExperience(ServerLevel p_154996_, Vec3 p_154997_) {
+      // CraftBukkit start
+      return this.getRecipesToAwardAndPopExperience(p_154996_, p_154997_, this.worldPosition, null, null, 0);
+   }
+
+   public List<Recipe<?>> getRecipesToAwardAndPopExperience(ServerLevel p_154996_, Vec3 p_154997_, BlockPos blockposition, ServerPlayer entityplayer, ItemStack itemstack, int amount) {
+      // CraftBukkit end
       List<Recipe<?>> list = Lists.newArrayList();
 
       for(Entry<ResourceLocation> entry : this.recipesUsed.object2IntEntrySet()) {
          p_154996_.getRecipeManager().byKey(entry.getKey()).ifPresent((p_155023_) -> {
             list.add(p_155023_);
-            createExperience(p_154996_, p_154997_, entry.getIntValue(), ((AbstractCookingRecipe)p_155023_).getExperience());
+            createExperience(p_154996_, p_154997_, entry.getIntValue(), ((AbstractCookingRecipe)p_155023_).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
          });
       }
 
       return list;
    }
 
+   //Magma start - Fix mixin inject error
+   private static BlockPos createExperience_blockposition;
+   private static Player createExperience_entityhuman;
+   private static ItemStack createExperience_itemstack;
+   private static int createExperience_amount;
    private static void createExperience(ServerLevel p_154999_, Vec3 p_155000_, int p_155001_, float p_155002_) {
       int i = Mth.floor((float)p_155001_ * p_155002_);
       float f = Mth.frac((float)p_155001_ * p_155002_);
@@ -476,13 +_,96 @@
          ++i;
       }
 
+      // CraftBukkit start - fire org.bukkit.event.inventory.FurnaceExtractEvent / BlockExpEvent
+      org.bukkit.event.block.BlockExpEvent event;
+      if (createExperience_amount != 0) {
+         event = new org.bukkit.event.inventory.FurnaceExtractEvent((org.bukkit.entity.Player) createExperience_entityhuman.getBukkitEntity(), org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(p_154999_, createExperience_blockposition), org.bukkit.craftbukkit.v1_18_R2.util.CraftMagicNumbers.getMaterial(createExperience_itemstack.getItem()), createExperience_amount, i);
+      } else {
+         event = new org.bukkit.event.block.BlockExpEvent(org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(p_154999_, createExperience_blockposition), i);
+      }
+      p_154999_.getCraftServer().getPluginManager().callEvent(event);
+      i = event.getExpToDrop();
+      // CraftBukkit end
+
       ExperienceOrb.award(p_154999_, p_155000_, i);
    }
 
+   private static void createExperience(ServerLevel p_154999_, Vec3 p_155000_, int p_155001_, float p_155002_, BlockPos blockposition, Player entityhuman, ItemStack itemstack, int amount) { // CraftBukkit
+      createExperience_blockposition = blockposition;
+      createExperience_entityhuman = entityhuman;
+      createExperience_itemstack = itemstack;
+      createExperience_amount = amount;
+      createExperience(p_154999_, p_155000_, p_155001_, p_155002_);
+   }
+   //Magma end
+
    public void fillStackedContents(StackedContents p_58342_) {
       for(ItemStack itemstack : this.items) {
          p_58342_.accountStack(itemstack);
       }
 
    }
+
+   net.minecraftforge.common.util.LazyOptional<? extends net.minecraftforge.items.IItemHandler>[] handlers =
+           net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (!this.remove && facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == Direction.UP)
+            return handlers[0].cast();
+         else if (facing == Direction.DOWN)
+            return handlers[1].cast();
+         else
+            return handlers[2].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   public void invalidateCaps() {
+      super.invalidateCaps();
+      for (int x = 0; x < handlers.length; x++)
+        handlers[x].invalidate();
+   }
+
+   @Override
+   public void reviveCaps() {
+      super.reviveCaps();
+      this.handlers = net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+   }
+
+   // CraftBukkit start - add fields and methods
+   private int maxStack = MAX_STACK;
+   public List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<org.bukkit.entity.HumanEntity>();
+
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   public void onOpen(org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<org.bukkit.entity.HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+
+   public Object2IntOpenHashMap<ResourceLocation> getRecipesUsed() {
+      return this.recipesUsed;
+   }
+   // CraftBukkit end
 }
