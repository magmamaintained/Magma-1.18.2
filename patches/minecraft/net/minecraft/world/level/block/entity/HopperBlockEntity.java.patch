--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -39,6 +_,36 @@
    private int cooldownTime = -1;
    private long tickedGameTime;
 
+   // CraftBukkit start - add fields and methods
+   public List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<org.bukkit.entity.HumanEntity>();
+   private int maxStack = MAX_STACK;
+
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   public void onOpen(org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<org.bukkit.entity.HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+   // CraftBukkit end
+
    public HopperBlockEntity(BlockPos p_155550_, BlockState p_155551_) {
       super(BlockEntityType.HOPPER, p_155550_, p_155551_);
    }
@@ -89,9 +_,14 @@
       p_155577_.tickedGameTime = p_155574_.getGameTime();
       if (!p_155577_.isOnCooldown()) {
          p_155577_.setCooldown(0);
-         tryMoveItems(p_155574_, p_155575_, p_155576_, p_155577_, () -> {
+         // Spigot start
+         boolean result = tryMoveItems(p_155574_, p_155575_, p_155576_, p_155577_, () -> {
             return suckInItems(p_155574_, p_155577_);
          });
+         if (!result && p_155577_.level.spigotConfig.hopperCheck > 1) {
+            p_155577_.setCooldown(p_155577_.level.spigotConfig.hopperCheck);
+         }
+         // Spigot end
       }
 
    }
@@ -103,7 +_,7 @@
          if (!p_155582_.isOnCooldown() && p_155581_.getValue(HopperBlock.ENABLED)) {
             boolean flag = false;
             if (!p_155582_.isEmpty()) {
-               flag = ejectItems(p_155579_, p_155580_, p_155581_, p_155582_);
+               flag = ejectItems(p_155579_, p_155580_, p_155581_, p_155582_); //Magma - use original method
             }
 
             if (!p_155582_.inventoryFull()) {
@@ -111,7 +_,7 @@
             }
 
             if (flag) {
-               p_155582_.setCooldown(8);
+               p_155582_.setCooldown(p_155579_.spigotConfig.hopperTransfer); // Spigot
                setChanged(p_155579_, p_155580_, p_155581_);
                return true;
             }
@@ -131,7 +_,9 @@
       return true;
    }
 
-   private static boolean ejectItems(Level p_155563_, BlockPos p_155564_, BlockState p_155565_, Container p_155566_) {
+   //Magma start - add original method and remove bukkit one
+   private static boolean ejectItems(Level p_155563_, BlockPos p_155564_, BlockState p_155565_, HopperBlockEntity p_155566_) {
+      if (net.minecraftforge.items.VanillaInventoryCodeHooks.insertHook(p_155566_)) return true;
       Container container = getAttachedContainer(p_155563_, p_155564_, p_155565_);
       if (container == null) {
          return false;
@@ -143,12 +_,37 @@
             for(int i = 0; i < p_155566_.getContainerSize(); ++i) {
                if (!p_155566_.getItem(i).isEmpty()) {
                   ItemStack itemstack = p_155566_.getItem(i).copy();
-                  ItemStack itemstack1 = addItem(p_155566_, container, p_155566_.removeItem(i, 1), direction);
+                  //ItemStack itemstack1 = addItem(p_155566_, container, p_155566_.removeItem(i, 1), direction);
+
+                  // CraftBukkit start - Call event when pushing items into other inventories
+                  org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(p_155566_.removeItem(i, p_155563_.spigotConfig.hopperAmount)); // Spigot
+
+                  org.bukkit.inventory.Inventory destinationInventory;
+                  // Have to special case large chests as they work oddly
+                  if (container instanceof net.minecraft.world.CompoundContainer) {
+                     destinationInventory = new org.bukkit.craftbukkit.v1_18_R2.inventory.CraftInventoryDoubleChest((net.minecraft.world.CompoundContainer) container);
+                  } else {
+                     destinationInventory = container.getOwner().getInventory();
+                  }
+
+                  org.bukkit.event.inventory.InventoryMoveItemEvent event = new org.bukkit.event.inventory.InventoryMoveItemEvent(p_155566_.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                  p_155563_.getCraftServer().getPluginManager().callEvent(event);
+
+                  if (event.isCancelled()) {
+                     p_155566_.setItem(i, itemstack);
+                     p_155566_.setCooldown(p_155563_.spigotConfig.hopperTransfer); // Spigot
+                     return false;
+                  }
+                  int originalAmount = event.getItem().getAmount();
+                  ItemStack itemstack1 = addItem(p_155566_, container, org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asNMSCopy(event.getItem()), direction);
+                  // CraftBukkit end
+
                   if (itemstack1.isEmpty()) {
                      container.setChanged();
                      return true;
                   }
 
+                  itemstack.shrink(originalAmount - itemstack1.getCount()); // Spigot
                   p_155566_.setItem(i, itemstack);
                }
             }
@@ -157,6 +_,7 @@
          }
       }
    }
+   //Magma end
 
    private static IntStream getSlots(Container p_59340_, Direction p_59341_) {
       return p_59340_ instanceof WorldlyContainer ? IntStream.of(((WorldlyContainer)p_59340_).getSlotsForFace(p_59341_)) : IntStream.range(0, p_59340_.getContainerSize());
@@ -176,11 +_,13 @@
    }
 
    public static boolean suckInItems(Level p_155553_, Hopper p_155554_) {
+      Boolean ret = net.minecraftforge.items.VanillaInventoryCodeHooks.extractHook(p_155553_, p_155554_);
+      if (ret != null) return ret;
       Container container = getSourceContainer(p_155553_, p_155554_);
       if (container != null) {
          Direction direction = Direction.DOWN;
          return isEmptyContainer(container, direction) ? false : getSlots(container, direction).anyMatch((p_59363_) -> {
-            return tryTakeInItemFromSlot(p_155554_, container, p_59363_, direction);
+            return tryTakeInItemFromSlot(p_155554_, container, p_59363_, direction, p_155553_);
          });
       } else {
          for(ItemEntity itementity : getItemsAtAndAbove(p_155553_, p_155554_)) {
@@ -193,24 +_,71 @@
       }
    }
 
+   //Magma - add original method
+   private static @Nullable Level tryTakeInItemFromSlot_level;
    private static boolean tryTakeInItemFromSlot(Hopper p_59355_, Container p_59356_, int p_59357_, Direction p_59358_) {
+      Level level = tryTakeInItemFromSlot_level;
+      tryTakeInItemFromSlot_level = null;
+
       ItemStack itemstack = p_59356_.getItem(p_59357_);
       if (!itemstack.isEmpty() && canTakeItemFromContainer(p_59356_, itemstack, p_59357_, p_59358_)) {
          ItemStack itemstack1 = itemstack.copy();
-         ItemStack itemstack2 = addItem(p_59356_, p_59355_, p_59356_.removeItem(p_59357_, 1), (Direction)null);
+         // CraftBukkit start - Call event on collection of items from inventories into the hopper
+         org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(p_59356_.removeItem(p_59357_, level.spigotConfig.hopperAmount)); // Spigot
+
+         org.bukkit.inventory.Inventory sourceInventory;
+         // Have to special case large chests as they work oddly
+         if (p_59356_ instanceof net.minecraft.world.CompoundContainer) {
+            sourceInventory = new org.bukkit.craftbukkit.v1_18_R2.inventory.CraftInventoryDoubleChest((net.minecraft.world.CompoundContainer) p_59356_);
+         } else {
+            sourceInventory = p_59356_.getOwner().getInventory();
+         }
+
+         org.bukkit.event.inventory.InventoryMoveItemEvent event = new org.bukkit.event.inventory.InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), p_59355_.getOwner().getInventory(), false);
+
+         org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            p_59356_.setItem(p_59357_, itemstack1);
+
+            if (p_59355_ instanceof HopperBlockEntity) {
+               ((HopperBlockEntity) p_59355_).setCooldown(level.spigotConfig.hopperTransfer); // Spigot
+            } else if (p_59355_ instanceof net.minecraft.world.entity.vehicle.MinecartHopper) {
+               ((net.minecraft.world.entity.vehicle.MinecartHopper) p_59355_).setCooldown(level.spigotConfig.hopperTransfer / 2); // Spigot
+            }
+
+            return false;
+         }
+         int originalAmount = event.getItem().getAmount();
+         ItemStack itemstack2 = addItem(p_59356_, p_59355_, org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asNMSCopy(event.getItem()), null);
+         // CraftBukkit end
+
          if (itemstack2.isEmpty()) {
             p_59356_.setChanged();
             return true;
          }
 
+         itemstack1.shrink(originalAmount - itemstack2.getCount()); // Spigot
          p_59356_.setItem(p_59357_, itemstack1);
       }
 
       return false;
    }
 
+   private static boolean tryTakeInItemFromSlot(Hopper p_59355_, Container p_59356_, int p_59357_, Direction p_59358_, Level level) {
+      tryTakeInItemFromSlot_level = level;
+      return tryTakeInItemFromSlot(p_59355_, p_59356_, p_59357_, p_59358_);
+   }
+   //Magma end
+
    public static boolean addItem(Container p_59332_, ItemEntity p_59333_) {
       boolean flag = false;
+      // CraftBukkit start
+      org.bukkit.event.inventory.InventoryPickupItemEvent event = new org.bukkit.event.inventory.InventoryPickupItemEvent(p_59332_.getOwner().getInventory(), (org.bukkit.entity.Item) p_59333_.getBukkitEntity());
+      p_59333_.level.getCraftServer().getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return false;
+      }
+      // CraftBukkit end
       ItemStack itemstack = p_59333_.getItem().copy();
       ItemStack itemstack1 = addItem((Container)null, p_59332_, itemstack, (Direction)null);
       if (itemstack1.isEmpty()) {
@@ -260,6 +_,11 @@
          boolean flag = false;
          boolean flag1 = p_59322_.isEmpty();
          if (itemstack.isEmpty()) {
+            // Spigot start - SPIGOT-6693, InventorySubcontainer#setItem
+            if (!itemstack.isEmpty() && itemstack.getCount() > p_59322_.getMaxStackSize()) {
+               p_59323_ = itemstack.split(p_59322_.getMaxStackSize());
+            }
+            // Spigot end
             p_59322_.setItem(p_59324_, p_59323_);
             p_59323_ = ItemStack.EMPTY;
             flag = true;
@@ -283,7 +_,7 @@
                      }
                   }
 
-                  hopperblockentity1.setCooldown(8 - k);
+                  hopperblockentity1.setCooldown(hopperblockentity1.level.spigotConfig.hopperTransfer - k); // Spigot
                }
             }
 
@@ -320,6 +_,7 @@
    private static Container getContainerAt(Level p_59348_, double p_59349_, double p_59350_, double p_59351_) {
       Container container = null;
       BlockPos blockpos = new BlockPos(p_59349_, p_59350_, p_59351_);
+      if ( !p_59348_.hasChunkAt( blockpos ) ) return null; // Spigot
       BlockState blockstate = p_59348_.getBlockState(blockpos);
       Block block = blockstate.getBlock();
       if (block instanceof WorldlyContainerHolder) {
@@ -399,5 +_,14 @@
 
    protected AbstractContainerMenu createMenu(int p_59312_, Inventory p_59313_) {
       return new HopperMenu(p_59312_, p_59313_, this);
+   }
+
+   @Override
+   protected net.minecraftforge.items.IItemHandler createUnSidedHandler() {
+      return new net.minecraftforge.items.VanillaHopperItemHandler(this);
+   }
+
+   public long getLastUpdateTime() {
+      return this.tickedGameTime;
    }
 }
