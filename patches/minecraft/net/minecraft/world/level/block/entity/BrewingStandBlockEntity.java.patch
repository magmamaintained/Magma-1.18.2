--- a/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -67,6 +_,37 @@
       }
    };
 
+   // CraftBukkit start - add fields and methods
+   private int lastTick = net.minecraft.server.MinecraftServer.currentTick;
+   public java.util.List<org.bukkit.entity.HumanEntity> transaction = new java.util.ArrayList<org.bukkit.entity.HumanEntity>();
+   private int maxStack = 64;
+
+   public void onOpen(org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(org.bukkit.craftbukkit.v1_18_R2.entity.CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public java.util.List<org.bukkit.entity.HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   public java.util.List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+   // CraftBukkit end
+
    public BrewingStandBlockEntity(BlockPos p_155283_, BlockState p_155284_) {
       super(BlockEntityType.BREWING_STAND, p_155283_, p_155284_);
    }
@@ -92,19 +_,37 @@
    public static void serverTick(Level p_155286_, BlockPos p_155287_, BlockState p_155288_, BrewingStandBlockEntity p_155289_) {
       ItemStack itemstack = p_155289_.items.get(4);
       if (p_155289_.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
-         p_155289_.fuel = 20;
-         itemstack.shrink(1);
+         // CraftBukkit start
+         org.bukkit.event.inventory.BrewingStandFuelEvent event = new org.bukkit.event.inventory.BrewingStandFuelEvent(org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(p_155286_, p_155287_), org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(itemstack), 20);
+         p_155286_.getCraftServer().getPluginManager().callEvent(event);
+
+         if (event.isCancelled()) {
+            return;
+         }
+
+         p_155289_.fuel = event.getFuelPower();
+         if (p_155289_.fuel > 0 && event.isConsuming()) {
+            itemstack.shrink(1);
+         }
+         // CraftBukkit end
          setChanged(p_155286_, p_155287_, p_155288_);
       }
 
       boolean flag = isBrewable(p_155289_.items);
       boolean flag1 = p_155289_.brewTime > 0;
       ItemStack itemstack1 = p_155289_.items.get(3);
+
+      // CraftBukkit start - Use wall time instead of ticks for brewing
+      int elapsedTicks = net.minecraft.server.MinecraftServer.currentTick - p_155289_.lastTick;
+      p_155289_.lastTick = net.minecraft.server.MinecraftServer.currentTick;
+
       if (flag1) {
-         --p_155289_.brewTime;
-         boolean flag2 = p_155289_.brewTime == 0;
+         p_155289_.brewTime -= elapsedTicks;
+         boolean flag2 = p_155289_.brewTime <= 0; // == -> <=
+         // CraftBukkit end
          if (flag2 && flag) {
-            doBrew(p_155286_, p_155287_, p_155289_.items);
+            prepareBrew(p_155289_); // Magma
+            doBrew(p_155286_, p_155287_, p_155289_.items); // CraftBukkit
             setChanged(p_155286_, p_155287_, p_155288_);
          } else if (!flag || !itemstack1.is(p_155289_.ingredient)) {
             p_155289_.brewTime = 0;
@@ -148,6 +_,7 @@
 
    private static boolean isBrewable(NonNullList<ItemStack> p_155295_) {
       ItemStack itemstack = p_155295_.get(3);
+      if (!itemstack.isEmpty()) return net.minecraftforge.common.brewing.BrewingRecipeRegistry.canBrew(p_155295_, itemstack, SLOTS_FOR_SIDES); // divert to VanillaBrewingRegistry
       if (itemstack.isEmpty()) {
          return false;
       } else if (!PotionBrewing.isIngredient(itemstack)) {
@@ -164,22 +_,44 @@
       }
    }
 
+   // Magma start - Move BlockEntity to a different constructor
+   private static BrewingStandBlockEntity blockEntity;
+   public static void prepareBrew(BrewingStandBlockEntity brewingStandBlockEntity) {
+      blockEntity = brewingStandBlockEntity;
+   }
+   // Magma end
+
    private static void doBrew(Level p_155291_, BlockPos p_155292_, NonNullList<ItemStack> p_155293_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPotionAttemptBrew(p_155293_)) return;
       ItemStack itemstack = p_155293_.get(3);
 
-      for(int i = 0; i < 3; ++i) {
-         p_155293_.set(i, PotionBrewing.mix(itemstack, p_155293_.get(i)));
-      }
+      org.bukkit.inventory.InventoryHolder owner = blockEntity.getOwner();
+      java.util.List<org.bukkit.inventory.ItemStack> brewResults = new java.util.ArrayList<>(3);
+      for (int i = 0; i < 3; ++i) {
+         brewResults.add(i, org.bukkit.craftbukkit.v1_18_R2.inventory.CraftItemStack.asCraftMirror(PotionBrewing.mix(itemstack, (ItemStack) p_155293_.get(i))));
+      }
+      if (owner != null) {
+         org.bukkit.event.inventory.BrewEvent event = new org.bukkit.event.inventory.BrewEvent(org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(p_155291_, p_155292_), (org.bukkit.inventory.BrewerInventory) owner.getInventory(), brewResults, blockEntity.fuel);
+         org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+      }
+      // CraftBukkit end
 
-      itemstack.shrink(1);
-      if (itemstack.getItem().hasCraftingRemainingItem()) {
-         ItemStack itemstack1 = new ItemStack(itemstack.getItem().getCraftingRemainingItem());
+      net.minecraftforge.common.brewing.BrewingRecipeRegistry.brewPotions(p_155293_, itemstack, SLOTS_FOR_SIDES);
+      net.minecraftforge.event.ForgeEventFactory.onPotionBrewed(p_155293_);
+      // TODO: 02/06/2022 Magma - add brewEvent brewResults.
+      if (itemstack.hasContainerItem()) {
+         ItemStack itemstack1 = itemstack.getContainerItem();
+         itemstack.shrink(1);
          if (itemstack.isEmpty()) {
             itemstack = itemstack1;
          } else {
             Containers.dropItemStack(p_155291_, (double)p_155292_.getX(), (double)p_155292_.getY(), (double)p_155292_.getZ(), itemstack1);
          }
       }
+      else itemstack.shrink(1);
 
       p_155293_.set(3, itemstack);
       p_155291_.levelEvent(1035, p_155292_, 0);
@@ -229,11 +_,11 @@
 
    public boolean canPlaceItem(int p_59017_, ItemStack p_59018_) {
       if (p_59017_ == 3) {
-         return PotionBrewing.isIngredient(p_59018_);
+         return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidIngredient(p_59018_);
       } else if (p_59017_ == 4) {
          return p_59018_.is(Items.BLAZE_POWDER);
       } else {
-         return (p_59018_.is(Items.POTION) || p_59018_.is(Items.SPLASH_POTION) || p_59018_.is(Items.LINGERING_POTION) || p_59018_.is(Items.GLASS_BOTTLE)) && this.getItem(p_59017_).isEmpty();
+            return net.minecraftforge.common.brewing.BrewingRecipeRegistry.isValidInput(p_59018_) && this.getItem(p_59017_).isEmpty();
       }
    }
 
@@ -259,5 +_,34 @@
 
    protected AbstractContainerMenu createMenu(int p_58990_, Inventory p_58991_) {
       return new BrewingStandMenu(p_58990_, p_58991_, this, this.dataAccess);
+   }
+
+   net.minecraftforge.common.util.LazyOptional<? extends net.minecraftforge.items.IItemHandler>[] handlers =
+           net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (!this.remove && facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
+         if (facing == Direction.UP)
+            return handlers[0].cast();
+         else if (facing == Direction.DOWN)
+            return handlers[1].cast();
+         else
+            return handlers[2].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   public void invalidateCaps() {
+      super.invalidateCaps();
+      for (int x = 0; x < handlers.length; x++)
+        handlers[x].invalidate();
+   }
+
+   @Override
+   public void reviveCaps() {
+      super.reviveCaps();
+      this.handlers = net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
    }
 }
