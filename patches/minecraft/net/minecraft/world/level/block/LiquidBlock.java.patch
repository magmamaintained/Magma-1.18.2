--- a/net/minecraft/world/level/block/LiquidBlock.java
+++ b/net/minecraft/world/level/block/LiquidBlock.java
@@ -30,11 +_,13 @@
 
 public class LiquidBlock extends Block implements BucketPickup {
    public static final IntegerProperty LEVEL = BlockStateProperties.LEVEL;
-   protected final FlowingFluid fluid;
+   @Deprecated // Use getFluid
+   private final FlowingFluid fluid;
    private final List<FluidState> stateCache;
    public static final VoxelShape STABLE_SHAPE = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 8.0D, 16.0D);
    public static final ImmutableList<Direction> POSSIBLE_FLOW_DIRECTIONS = ImmutableList.of(Direction.DOWN, Direction.SOUTH, Direction.NORTH, Direction.EAST, Direction.WEST);
 
+   @Deprecated  // Forge: Use the constructor that takes a supplier
    public LiquidBlock(FlowingFluid p_54694_, BlockBehaviour.Properties p_54695_) {
       super(p_54695_);
       this.fluid = p_54694_;
@@ -47,6 +_,19 @@
 
       this.stateCache.add(p_54694_.getFlowing(8, true));
       this.registerDefaultState(this.stateDefinition.any().setValue(LEVEL, Integer.valueOf(0)));
+      fluidStateCacheInitialized = true;
+      supplier = p_54694_.delegate;
+   }
+
+   /**
+    * @param p_54694_ A fluid supplier such as {@link net.minecraftforge.registries.RegistryObject<FlowingFluid>}
+    */
+   public LiquidBlock(java.util.function.Supplier<? extends FlowingFluid> p_54694_, BlockBehaviour.Properties p_54695_) {
+      super(p_54695_);
+      this.fluid = null;
+      this.stateCache = Lists.newArrayList();
+      this.registerDefaultState(this.stateDefinition.any().setValue(LEVEL, Integer.valueOf(0)));
+      this.supplier = p_54694_;
    }
 
    public VoxelShape getCollisionShape(BlockState p_54760_, BlockGetter p_54761_, BlockPos p_54762_, CollisionContext p_54763_) {
@@ -71,6 +_,7 @@
 
    public FluidState getFluidState(BlockState p_54765_) {
       int i = p_54765_.getValue(LEVEL);
+      if (!fluidStateCacheInitialized) initFluidStateCache();
       return this.stateCache.get(Math.min(i, 8));
    }
 
@@ -120,14 +_,20 @@
             BlockPos blockpos = p_54698_.relative(direction.getOpposite());
             if (p_54697_.getFluidState(blockpos).is(FluidTags.WATER)) {
                Block block = p_54697_.getFluidState(p_54698_).isSource() ? Blocks.OBSIDIAN : Blocks.COBBLESTONE;
-               p_54697_.setBlockAndUpdate(p_54698_, block.defaultBlockState());
-               this.fizz(p_54697_, p_54698_);
+               // CraftBukkit start
+               if (org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.handleBlockFormEvent(p_54697_, p_54698_, net.minecraftforge.event.ForgeEventFactory.fireFluidPlaceBlockEvent(p_54697_, p_54698_, p_54698_, block.defaultBlockState()))) {
+                  this.fizz(p_54697_, p_54698_);
+               }
+               // CraftBukkit end
                return false;
             }
 
             if (flag && p_54697_.getBlockState(blockpos).is(Blocks.BLUE_ICE)) {
-               p_54697_.setBlockAndUpdate(p_54698_, Blocks.BASALT.defaultBlockState());
-               this.fizz(p_54697_, p_54698_);
+               // CraftBukkit start
+               if (org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.handleBlockFormEvent(p_54697_, p_54698_, net.minecraftforge.event.ForgeEventFactory.fireFluidPlaceBlockEvent(p_54697_, p_54698_, p_54698_, Blocks.BASALT.defaultBlockState()))) {
+                  this.fizz(p_54697_, p_54698_);
+               }
+               // CraftBukkit end
                return false;
             }
          }
@@ -150,6 +_,25 @@
          return new ItemStack(this.fluid.getBucket());
       } else {
          return ItemStack.EMPTY;
+      }
+   }
+
+   // Forge start
+   private final java.util.function.Supplier<? extends net.minecraft.world.level.material.Fluid> supplier;
+   public FlowingFluid getFluid() {
+      return (FlowingFluid)supplier.get();
+   }
+
+   private boolean fluidStateCacheInitialized = false;
+   protected synchronized void initFluidStateCache() {
+      if (fluidStateCacheInitialized == false) {
+         this.stateCache.add(getFluid().getSource(false));
+
+         for (int i = 1; i < 8; ++i)
+            this.stateCache.add(getFluid().getFlowing(8 - i, false));
+
+         this.stateCache.add(getFluid().getFlowing(8, true));
+         fluidStateCacheInitialized = true;
       }
    }
 
