--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -66,7 +_,9 @@
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public abstract class BlockBehaviour {
+
+//TODO, Delegates are weird here now, because Block extends this.
+public abstract class BlockBehaviour extends net.minecraftforge.registries.ForgeRegistryEntry<Block> {
    protected static final Direction[] UPDATE_SHAPE_ORDER = new Direction[]{Direction.WEST, Direction.EAST, Direction.NORTH, Direction.SOUTH, Direction.DOWN, Direction.UP};
    protected final Material material;
    protected final boolean hasCollision;
@@ -93,6 +_,8 @@
       this.jumpFactor = p_60452_.jumpFactor;
       this.dynamicShape = p_60452_.dynamicShape;
       this.properties = p_60452_;
+      final ResourceLocation lootTableCache = p_60452_.drops;
+      this.lootTableSupplier = lootTableCache != null ? () -> lootTableCache : p_60452_.lootTableSupplier != null ? p_60452_.lootTableSupplier : () -> new ResourceLocation(this.getRegistryName().getNamespace(), "blocks/" + this.getRegistryName().getPath());
    }
 
    /** @deprecated */
@@ -136,12 +_,14 @@
    /** @deprecated */
    @Deprecated
    public void onPlace(BlockState p_60566_, Level p_60567_, BlockPos p_60568_, BlockState p_60569_, boolean p_60570_) {
+      org.spigotmc.AsyncCatcher.catchOp("block onPlace"); // Spigot
    }
 
    /** @deprecated */
    @Deprecated
    public void onRemove(BlockState p_60515_, Level p_60516_, BlockPos p_60517_, BlockState p_60518_, boolean p_60519_) {
-      if (p_60515_.hasBlockEntity() && !p_60515_.is(p_60518_.getBlock())) {
+      org.spigotmc.AsyncCatcher.catchOp("block remove"); // Spigot
+      if (p_60515_.hasBlockEntity() && (!p_60515_.is(p_60518_.getBlock()) || !p_60518_.hasBlockEntity())) {
          p_60516_.removeBlockEntity(p_60517_);
       }
 
@@ -222,7 +_,7 @@
    /** @deprecated */
    @Deprecated
    public boolean canBeReplaced(BlockState p_60470_, BlockPlaceContext p_60471_) {
-      return this.material.isReplaceable() && (p_60471_.getItemInHand().isEmpty() || !p_60471_.getItemInHand().is(this.asItem()));
+      return p_60470_.getMaterial().isReplaceable() && (p_60471_.getItemInHand().isEmpty() || p_60471_.getItemInHand().getItem() != this.asItem());
    }
 
    /** @deprecated */
@@ -346,8 +_,8 @@
       if (f == -1.0F) {
          return 0.0F;
       } else {
-         int i = p_60467_.hasCorrectToolForDrops(p_60466_) ? 30 : 100;
-         return p_60467_.getDestroySpeed(p_60466_) / f / (float)i;
+         int i = net.minecraftforge.common.ForgeHooks.isCorrectToolForDrops(p_60466_, p_60467_) ? 30 : 100;
+         return p_60467_.getDigSpeed(p_60466_, p_60469_) / f / (float)i;
       }
    }
 
@@ -380,8 +_,7 @@
 
    public final ResourceLocation getLootTable() {
       if (this.drops == null) {
-         ResourceLocation resourcelocation = Registry.BLOCK.getKey(this.asBlock());
-         this.drops = new ResourceLocation(resourcelocation.getNamespace(), "blocks/" + resourcelocation.getPath());
+         this.drops = this.lootTableSupplier.get();
       }
 
       return this.drops;
@@ -404,6 +_,14 @@
       return this.properties.destroyTime;
    }
 
+   protected boolean isAir(BlockState state) {
+      return ((BlockStateBase)state).isAir;
+   }
+
+   /* ======================================== FORGE START ===================================== */
+   private final java.util.function.Supplier<ResourceLocation> lootTableSupplier;
+   /* ========================================= FORGE END ====================================== */
+
    public abstract static class BlockStateBase extends StateHolder<Block, BlockState> {
       private final int lightEmission;
       private final boolean useShapeForLightOcclusion;
@@ -482,18 +_,22 @@
          return this.useShapeForLightOcclusion;
       }
 
+      /** @deprecated use {@link BlockState#getLightEmission(BlockGetter, BlockPos)} */
+      @Deprecated
       public int getLightEmission() {
          return this.lightEmission;
       }
 
       public boolean isAir() {
-         return this.isAir;
+         return this.getBlock().isAir((BlockState)this);
       }
 
       public MaterialColor getMapColor(BlockGetter p_60781_, BlockPos p_60782_) {
-         return this.materialColor;
+         return getBlock().getMapColor(this.asState(), p_60781_, p_60782_, this.materialColor);
       }
 
+      /** @deprecated use {@link BlockState#rotate(LevelAccessor, BlockPos, Rotation)} */
+      @Deprecated
       public BlockState rotate(Rotation p_60718_) {
          return this.getBlock().rotate(this.asState(), p_60718_);
       }
@@ -623,6 +_,17 @@
       }
 
       public void neighborChanged(Level p_60691_, BlockPos p_60692_, Block p_60693_, BlockPos p_60694_, boolean p_60695_) {
+         // CraftBukkit start
+         org.bukkit.craftbukkit.v1_18_R2.CraftWorld world = ((ServerLevel) p_60691_).getWorld();
+         if (world != null) {
+            org.bukkit.event.block.BlockPhysicsEvent event = new org.bukkit.event.block.BlockPhysicsEvent( world.getBlockAt( p_60692_.getX(), p_60692_.getY(), p_60692_.getZ() ), org.bukkit.craftbukkit.v1_18_R2.block.data.CraftBlockData.fromData( p_60691_.getBlockState(p_60692_)), world.getBlockAt( p_60694_.getX(), p_60694_.getY(), p_60694_.getZ() ) );
+            p_60691_.getCraftServer().getPluginManager().callEvent( event );
+
+            if (event.isCancelled()) {
+               return;
+            }
+         }
+         // CraftBukkit end
          this.getBlock().neighborChanged(this.asState(), p_60691_, p_60692_, p_60693_, p_60694_, p_60695_);
       }
 
@@ -636,9 +_,14 @@
 
          for(Direction direction : BlockBehaviour.UPDATE_SHAPE_ORDER) {
             blockpos$mutableblockpos.setWithOffset(p_60707_, direction);
-            BlockState blockstate = p_60706_.getBlockState(blockpos$mutableblockpos);
-            BlockState blockstate1 = blockstate.updateShape(direction.getOpposite(), this.asState(), p_60706_, blockpos$mutableblockpos, p_60707_);
-            Block.updateOrDestroy(blockstate, blockstate1, p_60706_, blockpos$mutableblockpos, p_60708_, p_60709_);
+
+            if (org.magmafoundation.magma.configuration.MagmaConfig.instance.patchUpdateSuppression.getValues()) {
+               p_60706_.neighborShapeChanged(direction.getOpposite(), this.asState(), blockpos$mutableblockpos, p_60707_, p_60708_, p_60709_);
+            } else {
+               BlockState blockstate = p_60706_.getBlockState(blockpos$mutableblockpos);
+               BlockState blockstate1 = blockstate.updateShape(direction.getOpposite(), this.asState(), p_60706_, blockpos$mutableblockpos, p_60707_);
+               Block.updateOrDestroy(blockstate, blockstate1, p_60706_, blockpos$mutableblockpos, p_60708_, p_60709_);
+            }
          }
 
       }
@@ -873,8 +_,9 @@
       ResourceLocation drops;
       boolean canOcclude = true;
       boolean isAir;
+      private java.util.function.Supplier<ResourceLocation> lootTableSupplier;
       BlockBehaviour.StateArgumentPredicate<EntityType<?>> isValidSpawn = (p_60935_, p_60936_, p_60937_, p_60938_) -> {
-         return p_60935_.isFaceSturdy(p_60936_, p_60937_, Direction.UP) && p_60935_.getLightEmission() < 14;
+         return p_60935_.isFaceSturdy(p_60936_, p_60937_, Direction.UP) && p_60935_.getLightEmission(p_60936_, p_60937_) < 14;
       };
       BlockBehaviour.StatePredicate isRedstoneConductor = (p_60985_, p_60986_, p_60987_) -> {
          return p_60985_.getMaterial().isSolidBlocking() && p_60985_.isCollisionShapeFullBlock(p_60986_, p_60987_);
@@ -1001,9 +_,15 @@
          return this;
       }
 
+      @Deprecated // FORGE: Use the variant that takes a Supplier below
       public BlockBehaviour.Properties dropsLike(Block p_60917_) {
-         this.drops = p_60917_.getLootTable();
+         this.lootTableSupplier = () -> p_60917_.delegate.get().getLootTable();
          return this;
+      }
+
+      public BlockBehaviour.Properties lootFrom(java.util.function.Supplier<? extends Block> blockIn) {
+          this.lootTableSupplier = () -> blockIn.get().getLootTable();
+          return this;
       }
 
       public BlockBehaviour.Properties air() {
