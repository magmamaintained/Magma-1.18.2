--- a/net/minecraft/world/level/block/SaplingBlock.java
+++ b/net/minecraft/world/level/block/SaplingBlock.java
@@ -13,12 +_,16 @@
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.event.world.StructureGrowEvent;
 
 public class SaplingBlock extends BushBlock implements BonemealableBlock {
    public static final IntegerProperty f_55973_ = BlockStateProperties.f_61387_;
    protected static final float f_154380_ = 6.0F;
    protected static final VoxelShape f_55974_ = Block.m_49796_(2.0D, 0.0D, 2.0D, 14.0D, 12.0D, 14.0D);
    private final AbstractTreeGrower f_55975_;
+   public static TreeType treeType; // CraftBukkit
 
    public SaplingBlock(AbstractTreeGrower p_55978_, BlockBehaviour.Properties p_55979_) {
       super(p_55979_);
@@ -31,8 +_,32 @@
    }
 
    public void m_7455_(BlockState p_56003_, ServerLevel p_56004_, BlockPos p_56005_, Random p_56006_) {
-      if (p_56004_.m_46803_(p_56005_.m_7494_()) >= 9 && p_56006_.nextInt(7) == 0) {
+      if (p_56004_.m_46803_(p_56005_.m_7494_()) >= 9 && p_56006_.nextInt(Math.max(2, (int) (((100.0F / p_56004_.spigotConfig.saplingModifier) * 7) + 0.5F))) == 0) { // Spigot
+      if (!p_56004_.isAreaLoaded(p_56005_, 1)) return; // Forge: prevent loading unloaded chunks when checking neighbor's light
+         //CraftBukkit start
+         p_56004_.captureTreeGeneration = true;
+         //CraftBukkit end
          this.m_55980_(p_56004_, p_56005_, p_56003_, p_56006_);
+         // CraftBukkit start
+         p_56004_.captureTreeGeneration = false;
+         if (p_56004_.capturedBlockStates.size() > 0) {
+            TreeType treeType = SaplingBlock.treeType;
+            SaplingBlock.treeType = null;
+            Location location = new Location(p_56004_.getWorld(), p_56005_.m_123341_(), p_56005_.m_123342_(), p_56005_.m_123343_());
+            java.util.List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(p_56004_.capturedBlockStates.values());
+            p_56004_.capturedBlockStates.clear();
+            StructureGrowEvent event = null;
+            if (treeType != null) {
+               event = new StructureGrowEvent(location, treeType, false, null, blocks);
+               org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            }
+            if (event == null || !event.isCancelled()) {
+               for (org.bukkit.block.BlockState blockstate : blocks) {
+                  blockstate.update(true);
+               }
+            }
+         }
+         // CraftBukkit end
       }
 
    }
