--- a/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -39,6 +_,7 @@
       return p_64626_.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), RegistryCodecs.dataPackAwareCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((p_158959_) -> {
          return p_158959_.legacyCustomOptions;
       })).apply(p_64626_, p_64626_.stable(WorldGenSettings::new));
+   }).xmap(net.minecraftforge.common.ForgeHooks::loadDimensionsWithServerSeed, wgs -> {return wgs; // forge: when loading/registering json dimensions, replace hardcoded seeds of custom dimensions with the server/overworld's seed, where requested; fixes MC-195717
    }).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
    private static final Logger LOGGER = LogUtils.getLogger();
    private final long seed;
@@ -194,6 +_,8 @@
       Registry<StructureSet> registry2 = p_209717_.registryOrThrow(Registry.STRUCTURE_SET_REGISTRY);
       Registry<LevelStem> registry3 = DimensionType.defaultDimensions(p_209717_, i);
       String s = p_209718_.levelType();
+      net.minecraftforge.common.world.ForgeWorldPreset type = net.minecraftforge.registries.ForgeRegistries.WORLD_TYPES.get().getValue(new net.minecraft.resources.ResourceLocation(s));
+      if (type != null) return type.createSettings(p_209717_, i, p_209718_.generateStructures(), false, s);
       switch(s) {
       case "flat":
          Dynamic<JsonElement> dynamic = new Dynamic<>(JsonOps.INSTANCE, p_209718_.generatorSettings());
