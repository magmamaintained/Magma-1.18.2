--- a/net/minecraft/client/particle/ParticleEngine.java
+++ b/net/minecraft/client/particle/ParticleEngine.java
@@ -66,11 +_,11 @@
    private static final int MAX_PARTICLES_PER_LAYER = 16384;
    private static final List<ParticleRenderType> RENDER_ORDER = ImmutableList.of(ParticleRenderType.TERRAIN_SHEET, ParticleRenderType.PARTICLE_SHEET_OPAQUE, ParticleRenderType.PARTICLE_SHEET_LIT, ParticleRenderType.PARTICLE_SHEET_TRANSLUCENT, ParticleRenderType.CUSTOM);
    protected ClientLevel level;
-   private final Map<ParticleRenderType, Queue<Particle>> particles = Maps.newIdentityHashMap();
+   private final Map<ParticleRenderType, Queue<Particle>> particles = Maps.newTreeMap(net.minecraftforge.client.ForgeHooksClient.makeParticleRenderTypeComparator(RENDER_ORDER));
    private final Queue<TrackingEmitter> trackingEmitters = Queues.newArrayDeque();
    private final TextureManager textureManager;
    private final Random random = new Random();
-   private final Int2ObjectMap<ParticleProvider<?>> providers = new Int2ObjectOpenHashMap<>();
+   private final Map<ResourceLocation, ParticleProvider<?>> providers = new java.util.HashMap<>();
    private final Queue<Particle> particlesToAdd = Queues.newArrayDeque();
    private final Map<ResourceLocation, ParticleEngine.MutableSpriteSet> spriteSets = Maps.newHashMap();
    private final TextureAtlas textureAtlas;
@@ -176,13 +_,13 @@
    }
 
    public <T extends ParticleOptions> void register(ParticleType<T> p_107382_, ParticleProvider<T> p_107383_) {
-      this.providers.put(Registry.PARTICLE_TYPE.getId(p_107382_), p_107383_);
+      this.providers.put(Registry.PARTICLE_TYPE.getKey(p_107382_), p_107383_);
    }
 
    public <T extends ParticleOptions> void register(ParticleType<T> p_107379_, ParticleEngine.SpriteParticleRegistration<T> p_107380_) {
       ParticleEngine.MutableSpriteSet particleengine$mutablespriteset = new ParticleEngine.MutableSpriteSet();
       this.spriteSets.put(Registry.PARTICLE_TYPE.getKey(p_107379_), particleengine$mutablespriteset);
-      this.providers.put(Registry.PARTICLE_TYPE.getId(p_107379_), p_107380_.create(particleengine$mutablespriteset));
+      this.providers.put(Registry.PARTICLE_TYPE.getKey(p_107379_), p_107380_.create(particleengine$mutablespriteset));
    }
 
    public CompletableFuture<Void> reload(PreparableReloadListener.PreparationBarrier p_107305_, ResourceManager p_107306_, ProfilerFiller p_107307_, ProfilerFiller p_107308_, Executor p_107309_, Executor p_107310_) {
@@ -300,7 +_,7 @@
 
    @Nullable
    private <T extends ParticleOptions> Particle makeParticle(T p_107396_, double p_107397_, double p_107398_, double p_107399_, double p_107400_, double p_107401_, double p_107402_) {
-      ParticleProvider<T> particleprovider = (ParticleProvider<T>)this.providers.get(Registry.PARTICLE_TYPE.getId(p_107396_.getType()));
+      ParticleProvider<T> particleprovider = (ParticleProvider<T>)this.providers.get(Registry.PARTICLE_TYPE.getKey(p_107396_.getType()));
       return particleprovider == null ? null : particleprovider.createParticle(p_107396_, this.level, p_107397_, p_107398_, p_107399_, p_107400_, p_107401_, p_107402_);
    }
 
@@ -381,15 +_,25 @@
       }
    }
 
+   /**@deprecated Forge: use {@link #render(PoseStack, MultiBufferSource.BufferSource, LightTexture, Camera, float, net.minecraft.client.renderer.culling.Frustum)} with Frustum as additional parameter*/
+   @Deprecated
    public void render(PoseStack p_107337_, MultiBufferSource.BufferSource p_107338_, LightTexture p_107339_, Camera p_107340_, float p_107341_) {
+       render(p_107337_, p_107338_, p_107339_, p_107340_, p_107341_, null);
+   }
+
+   public void render(PoseStack p_107337_, MultiBufferSource.BufferSource p_107338_, LightTexture p_107339_, Camera p_107340_, float p_107341_, @Nullable net.minecraft.client.renderer.culling.Frustum clippingHelper) {
       p_107339_.turnOnLightLayer();
       RenderSystem.enableDepthTest();
+      RenderSystem.activeTexture(org.lwjgl.opengl.GL13.GL_TEXTURE2);
+      RenderSystem.enableTexture();
+      RenderSystem.activeTexture(org.lwjgl.opengl.GL13.GL_TEXTURE0);
       PoseStack posestack = RenderSystem.getModelViewStack();
       posestack.pushPose();
       posestack.mulPoseMatrix(p_107337_.last().pose());
       RenderSystem.applyModelViewMatrix();
 
-      for(ParticleRenderType particlerendertype : RENDER_ORDER) {
+      for(ParticleRenderType particlerendertype : this.particles.keySet()) { // Forge: allow custom IParticleRenderType's
+         if (particlerendertype == ParticleRenderType.NO_RENDER) continue;
          Iterable<Particle> iterable = this.particles.get(particlerendertype);
          if (iterable != null) {
             RenderSystem.setShader(GameRenderer::getParticleShader);
@@ -399,6 +_,7 @@
             particlerendertype.begin(bufferbuilder, this.textureManager);
 
             for(Particle particle : iterable) {
+               if (clippingHelper != null && particle.shouldCull() && !clippingHelper.isVisible(particle.getBoundingBox())) continue;
                try {
                   particle.render(bufferbuilder, p_107340_, p_107341_);
                } catch (Throwable throwable) {
@@ -429,7 +_,7 @@
    }
 
    public void destroy(BlockPos p_107356_, BlockState p_107357_) {
-      if (!p_107357_.isAir()) {
+      if (!p_107357_.isAir() && !net.minecraftforge.client.RenderProperties.get(p_107357_).addDestroyEffects(p_107357_, this.level, p_107356_, this)) {
          VoxelShape voxelshape = p_107357_.getShape(this.level, p_107356_);
          double d0 = 0.25D;
          voxelshape.forAllBoxes((p_172273_, p_172274_, p_172275_, p_172276_, p_172277_, p_172278_) -> {
@@ -449,7 +_,7 @@
                      double d7 = d4 * d1 + p_172273_;
                      double d8 = d5 * d2 + p_172274_;
                      double d9 = d6 * d3 + p_172275_;
-                     this.add(new TerrainParticle(this.level, (double)p_107356_.getX() + d7, (double)p_107356_.getY() + d8, (double)p_107356_.getZ() + d9, d4 - 0.5D, d5 - 0.5D, d6 - 0.5D, p_107357_, p_107356_));
+                     this.add(new TerrainParticle(this.level, (double)p_107356_.getX() + d7, (double)p_107356_.getY() + d8, (double)p_107356_.getZ() + d9, d4 - 0.5D, d5 - 0.5D, d6 - 0.5D, p_107357_, p_107356_).updateSprite(p_107357_, p_107356_));
                   }
                }
             }
@@ -493,12 +_,18 @@
             d0 = (double)i + aabb.maxX + (double)0.1F;
          }
 
-         this.add((new TerrainParticle(this.level, d0, d1, d2, 0.0D, 0.0D, 0.0D, blockstate, p_107368_)).setPower(0.2F).scale(0.6F));
+         this.add((new TerrainParticle(this.level, d0, d1, d2, 0.0D, 0.0D, 0.0D, blockstate, p_107368_).updateSprite(blockstate, p_107368_)).setPower(0.2F).scale(0.6F));
       }
    }
 
    public String countParticles() {
       return String.valueOf(this.particles.values().stream().mapToInt(Collection::size).sum());
+   }
+
+   public void addBlockHitEffects(BlockPos pos, net.minecraft.world.phys.BlockHitResult target) {
+      BlockState state = level.getBlockState(pos);
+      if (!net.minecraftforge.client.RenderProperties.get(state).addHitEffects(state, level, target, this))
+         crack(pos, target.getDirection());
    }
 
    private boolean hasSpaceInParticleLimit(ParticleGroup p_172280_) {
