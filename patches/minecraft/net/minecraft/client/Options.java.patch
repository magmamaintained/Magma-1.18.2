--- a/net/minecraft/client/Options.java
+++ b/net/minecraft/client/Options.java
@@ -188,6 +_,7 @@
    public boolean syncWrites;
 
    public Options(Minecraft p_92138_, File p_92139_) {
+      setForgeKeybindProperties();
       this.minecraft = p_92138_;
       this.optionsFile = new File(p_92139_, "options.txt");
       if (p_92138_.is64Bit() && Runtime.getRuntime().maxMemory() >= 1000000000L) {
@@ -302,10 +_,14 @@
       this.allowServerListing = p_168428_.process("allowServerListing", this.allowServerListing);
 
       for(KeyMapping keymapping : this.keyMappings) {
-         String s = keymapping.saveString();
+         String s = keymapping.saveString() + (keymapping.getKeyModifier() != net.minecraftforge.client.settings.KeyModifier.NONE ? ":" + keymapping.getKeyModifier() : "");
          String s1 = p_168428_.process("key_" + keymapping.getName(), s);
          if (!s.equals(s1)) {
-            keymapping.setKey(InputConstants.getKey(s1));
+            if (s1.indexOf(':') != -1) {
+               String[] pts = s1.split(":");
+               keymapping.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.valueFromString(pts[1]), InputConstants.getKey(pts[0]));
+            } else
+               keymapping.setKeyModifierAndCode(net.minecraftforge.client.settings.KeyModifier.NONE, InputConstants.getKey(s1));
          }
       }
 
@@ -493,6 +_,7 @@
    }
 
    public void save() {
+      if (net.minecraftforge.client.loading.ClientModLoader.isLoading()) return; //Don't save settings before mods add keybindigns and the like to prevent them from being deleted.
       try {
          final PrintWriter printwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFile), StandardCharsets.UTF_8));
 
@@ -641,6 +_,23 @@
       }
 
       p_92146_.setSelected(set);
+   }
+
+   private void setForgeKeybindProperties() {
+      net.minecraftforge.client.settings.KeyConflictContext inGame = net.minecraftforge.client.settings.KeyConflictContext.IN_GAME;
+      keyUp.setKeyConflictContext(inGame);
+      keyLeft.setKeyConflictContext(inGame);
+      keyDown.setKeyConflictContext(inGame);
+      keyRight.setKeyConflictContext(inGame);
+      keyJump.setKeyConflictContext(inGame);
+      keyShift.setKeyConflictContext(inGame);
+      keySprint.setKeyConflictContext(inGame);
+      keyAttack.setKeyConflictContext(inGame);
+      keyChat.setKeyConflictContext(inGame);
+      keyPlayerList.setKeyConflictContext(inGame);
+      keyCommand.setKeyConflictContext(inGame);
+      keyTogglePerspective.setKeyConflictContext(inGame);
+      keySmoothCamera.setKeyConflictContext(inGame);
    }
 
    public CameraType getCameraType() {
