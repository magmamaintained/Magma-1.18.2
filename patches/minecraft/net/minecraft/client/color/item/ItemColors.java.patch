--- a/net/minecraft/client/color/item/ItemColors.java
+++ b/net/minecraft/client/color/item/ItemColors.java
@@ -24,7 +_,8 @@
 @OnlyIn(Dist.CLIENT)
 public class ItemColors {
    private static final int DEFAULT = -1;
-   private final IdMapper<ItemColor> itemColors = new IdMapper<>(32);
+   // FORGE: Use RegistryDelegates as non-Vanilla item ids are not constant
+   private final java.util.Map<net.minecraftforge.registries.IRegistryDelegate<Item>, ItemColor> itemColors = new java.util.HashMap<>();
 
    public static ItemColors createDefault(BlockColors p_92684_) {
       ItemColors itemcolors = new ItemColors();
@@ -84,17 +_,18 @@
       itemcolors.register((p_92693_, p_92694_) -> {
          return p_92694_ == 0 ? -1 : MapItem.getColor(p_92693_);
       }, Items.FILLED_MAP);
+      net.minecraftforge.client.ForgeHooksClient.onItemColorsInit(itemcolors, p_92684_);
       return itemcolors;
    }
 
    public int getColor(ItemStack p_92677_, int p_92678_) {
-      ItemColor itemcolor = this.itemColors.byId(Registry.ITEM.getId(p_92677_.getItem()));
+      ItemColor itemcolor = this.itemColors.get(p_92677_.getItem().delegate);
       return itemcolor == null ? -1 : itemcolor.getColor(p_92677_, p_92678_);
    }
 
    public void register(ItemColor p_92690_, ItemLike... p_92691_) {
       for(ItemLike itemlike : p_92691_) {
-         this.itemColors.addMapping(p_92690_, Item.getId(itemlike.asItem()));
+         this.itemColors.put(itemlike.asItem().delegate, p_92690_);
       }
 
    }
