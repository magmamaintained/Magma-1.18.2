--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -252,7 +_,7 @@
 import org.slf4j.Logger;
 
 @OnlyIn(Dist.CLIENT)
-public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements WindowEventHandler {
+public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements WindowEventHandler, net.minecraftforge.client.extensions.IForgeMinecraft {
    private static Minecraft instance;
    private static final Logger LOGGER = LogUtils.getLogger();
    public static final boolean ON_OSX = Util.getPlatform() == Util.OS.OSX;
@@ -401,7 +_,6 @@
       this.userApiService = this.createUserApiService(yggdrasilauthenticationservice, p_91084_);
       this.user = p_91084_.user.user;
       LOGGER.info("Setting user: {}", (Object)this.user.getName());
-      LOGGER.debug("(Session ID is {})", (Object)this.user.getSessionId());
       this.demo = p_91084_.game.demo;
       this.allowsMultiplayer = !p_91084_.game.disableMultiplayer;
       this.allowsChat = !p_91084_.game.disableChat;
@@ -433,6 +_,7 @@
       }
 
       Util.timeSource = RenderSystem.initBackendSystem();
+      if (net.minecraftforge.common.ForgeConfig.CLIENT.forceSystemNanoTime.get()) Util.timeSource = System::nanoTime;
       this.virtualScreen = new VirtualScreen(this);
       this.window = this.virtualScreen.newWindow(displaydata, this.options.fullscreenVideoModeString, this.createTitle());
       this.setWindowActive(true);
@@ -448,7 +_,6 @@
 
       this.window.setFramerateLimit(this.options.framerateLimit);
       this.mouseHandler = new MouseHandler(this);
-      this.mouseHandler.setup(this.window.getWindow());
       this.keyboardHandler = new KeyboardHandler(this);
       this.keyboardHandler.setup(this.window.getWindow());
       RenderSystem.initRenderer(this.options.glDebugVerbosity, false);
@@ -456,6 +_,8 @@
       this.mainRenderTarget.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);
       this.mainRenderTarget.clear(ON_OSX);
       this.resourceManager = new ReloadableResourceManager(PackType.CLIENT_RESOURCES);
+      net.minecraftforge.client.RecipeBookRegistry.initDefaultValues();
+      net.minecraftforge.client.loading.ClientModLoader.begin(this, this.resourcePackRepository, this.resourceManager, this.clientPackSource);
       this.resourcePackRepository.reload();
       this.options.loadSelectedResourcePacks(this.resourcePackRepository);
       this.languageManager = new LanguageManager(this.options.languageCode);
@@ -500,10 +_,12 @@
       this.blockRenderer = new BlockRenderDispatcher(this.modelManager.getBlockModelShaper(), blockentitywithoutlevelrenderer, this.blockColors);
       this.resourceManager.registerReloadListener(this.blockRenderer);
       this.levelRenderer = new LevelRenderer(this, this.renderBuffers);
+      net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.RenderLevelStageEvent.RegisterStageEvent());
       this.resourceManager.registerReloadListener(this.levelRenderer);
       this.createSearchTrees();
       this.resourceManager.registerReloadListener(this.searchRegistry);
       this.particleEngine = new ParticleEngine(this.level, this.textureManager);
+      net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.ParticleFactoryRegisterEvent());
       this.resourceManager.registerReloadListener(this.particleEngine);
       this.paintingTextures = new PaintingTextureManager(this.textureManager);
       this.resourceManager.registerReloadListener(this.paintingTextures);
@@ -512,7 +_,8 @@
       this.gpuWarnlistManager = new GpuWarnlistManager();
       this.resourceManager.registerReloadListener(this.gpuWarnlistManager);
       this.resourceManager.registerReloadListener(this.regionalCompliancies);
-      this.gui = new Gui(this);
+      this.gui = new net.minecraftforge.client.gui.ForgeIngameGui(this);
+      this.mouseHandler.setup(this.window.getWindow()); //Forge: Moved below ingameGUI setting to prevent NPEs in handeler.
       this.debugRenderer = new DebugRenderer(this);
       RenderSystem.setErrorCallback(this::onFullscreenError);
       if (this.mainRenderTarget.width == this.window.getWidth() && this.mainRenderTarget.height == this.window.getHeight()) {
@@ -530,6 +_,11 @@
          TinyFileDialogs.tinyfd_messageBox("Minecraft", stringbuilder.toString(), "ok", "error", false);
       }
 
+      net.minecraftforge.gametest.ForgeGameTestHooks.registerGametests();
+      net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.RegisterClientReloadListenersEvent(this.resourceManager));
+      net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.EntityRenderersEvent.RegisterLayerDefinitions());
+      net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.EntityRenderersEvent.RegisterRenderers());
+
       this.window.updateVsync(this.options.enableVsync);
       this.window.updateRawMouseInput(this.options.rawMouseInput);
       this.window.setDefaultErrorCallback();
@@ -545,13 +_,16 @@
             }
 
             this.reloadStateTracker.finishReload();
+            if (net.minecraftforge.client.loading.ClientModLoader.completeModLoading()) return; // Do not overwrite the error screen
+            // FORGE: Move opening initial screen to after startup and events are enabled.
+            // Also Fixes MC-145102
+            if (s != null) {
+                ConnectScreen.startConnecting(new TitleScreen(), this, new ServerAddress(s, i), (ServerData)null);
+            } else {
+                this.setScreen(new TitleScreen(true));
+            }
          });
       }, false));
-      if (s != null) {
-         ConnectScreen.startConnecting(new TitleScreen(), this, new ServerAddress(s, i), (ServerData)null);
-      } else {
-         this.setScreen(new TitleScreen(true));
-      }
 
    }
 
@@ -594,6 +_,8 @@
 
    private UserApiService createUserApiService(YggdrasilAuthenticationService p_193586_, GameConfig p_193587_) {
       try {
+         if ("0".equals(p_193587_.user.user.getAccessToken())) // Forge: We use "0" in dev. Short circuit to stop exception spam.
+            return UserApiService.OFFLINE;
          return p_193586_.createUserApiService(p_193587_.user.user.getAccessToken());
       } catch (AuthenticationException authenticationexception) {
          LOGGER.error("Failed to verify authentication", (Throwable)authenticationexception);
@@ -606,7 +_,7 @@
    }
 
    private void rollbackResourcePacks(Throwable p_91240_) {
-      if (this.resourcePackRepository.getSelectedIds().size() > 1) {
+      if (this.resourcePackRepository.getSelectedPacks().stream().anyMatch(e -> !e.isRequired())) { //Forge: This caused infinite loop if any resource packs are forced. Such as mod resources. So check if we can disable any.
          this.clearResourcePacksOnError(p_91240_, (Component)null);
       } else {
          Util.throwAsRuntime(p_91240_);
@@ -763,13 +_,13 @@
       Bootstrap.realStdoutPrintln(p_91333_.getFriendlyReport());
       if (p_91333_.getSaveFile() != null) {
          Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + p_91333_.getSaveFile());
-         System.exit(-1);
+         net.minecraftforge.server.ServerLifecycleHooks.handleExit(-1);
       } else if (p_91333_.saveToFile(file2)) {
          Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
-         System.exit(-1);
+         net.minecraftforge.server.ServerLifecycleHooks.handleExit(-1);
       } else {
          Bootstrap.realStdoutPrintln("#@?@# Game crashed! Crash report could not be saved. #@?@#");
-         System.exit(-2);
+         net.minecraftforge.server.ServerLifecycleHooks.handleExit(-2);
       }
 
    }
@@ -879,10 +_,6 @@
          LOGGER.error("setScreen called from non-game thread");
       }
 
-      if (this.screen != null) {
-         this.screen.removed();
-      }
-
       if (p_91153_ == null && this.level == null) {
          p_91153_ = new TitleScreen();
       } else if (p_91153_ == null && this.player.isDeadOrDying()) {
@@ -893,6 +_,15 @@
          }
       }
 
+      net.minecraftforge.client.ForgeHooksClient.clearGuiLayers(this);
+      Screen old = this.screen;
+      net.minecraftforge.client.event.ScreenOpenEvent event = new net.minecraftforge.client.event.ScreenOpenEvent(p_91153_);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) return;
+
+      p_91153_ = event.getScreen();
+      if (old != null && p_91153_ != old)
+         old.removed();
+
       this.screen = p_91153_;
       BufferUploader.reset();
       if (p_91153_ != null) {
@@ -1022,11 +_,13 @@
       RenderSystem.enableCull();
       this.profiler.pop();
       if (!this.noRender) {
+         net.minecraftforge.event.ForgeEventFactory.onRenderTickStart(this.pause ? this.pausePartialTick : this.timer.partialTick);
          this.profiler.popPush("gameRenderer");
          this.gameRenderer.render(this.pause ? this.pausePartialTick : this.timer.partialTick, i, p_91384_);
          this.profiler.popPush("toasts");
          this.toast.render(new PoseStack());
          this.profiler.pop();
+         net.minecraftforge.event.ForgeEventFactory.onRenderTickEnd(this.pause ? this.pausePartialTick : this.timer.partialTick);
       }
 
       if (this.fpsPieResults != null) {
@@ -1132,10 +_,12 @@
       this.window.setGuiScale((double)i);
       if (this.screen != null) {
          this.screen.resize(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
+         net.minecraftforge.client.ForgeHooksClient.resizeGuiLayers(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
       }
 
       RenderTarget rendertarget = this.getMainRenderTarget();
       rendertarget.resize(this.window.getWidth(), this.window.getHeight(), ON_OSX);
+      if (this.gameRenderer != null)
       this.gameRenderer.resize(this.window.getWidth(), this.window.getHeight());
       this.mouseHandler.setIgnoreFirstMove();
    }
@@ -1432,11 +_,21 @@
          if (p_91387_ && this.hitResult != null && this.hitResult.getType() == HitResult.Type.BLOCK) {
             BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
             BlockPos blockpos = blockhitresult.getBlockPos();
-            if (!this.level.getBlockState(blockpos).isAir()) {
+            if (!this.level.isEmptyBlock(blockpos)) {
+               net.minecraftforge.client.event.InputEvent.ClickInputEvent inputEvent = net.minecraftforge.client.ForgeHooksClient.onClickInput(0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+               if (inputEvent.isCanceled()) {
+                  if (inputEvent.shouldSwingHand()) {
+                     this.particleEngine.addBlockHitEffects(blockpos, blockhitresult);
+                     this.player.swing(InteractionHand.MAIN_HAND);
+                  }
+                  return;
+               }
                Direction direction = blockhitresult.getDirection();
                if (this.gameMode.continueDestroyBlock(blockpos, direction)) {
-                  this.particleEngine.crack(blockpos, direction);
+                  if (inputEvent.shouldSwingHand()) {
+                  this.particleEngine.addBlockHitEffects(blockpos, blockhitresult);
                   this.player.swing(InteractionHand.MAIN_HAND);
+                  }
                }
             }
 
@@ -1460,14 +_,20 @@
          return false;
       } else {
          boolean flag = false;
-         switch(this.hitResult.getType()) {
+         net.minecraftforge.client.event.InputEvent.ClickInputEvent inputEvent = net.minecraftforge.client.ForgeHooksClient.onClickInput(0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+         HitResult.Type hitType = this.hitResult.getType();
+         if(this.hitResult instanceof EntityHitResult entityHit) { // Forge: Perform attack range checks here, instead of in GameRenderer#pick, so extended-reach interactions work.
+             if(!player.canHit(entityHit.getEntity(), 0)) hitType = HitResult.Type.MISS; // No padding in client code.
+         }
+         if (!inputEvent.isCanceled())
+         switch(hitType) {
          case ENTITY:
             this.gameMode.attack(this.player, ((EntityHitResult)this.hitResult).getEntity());
             break;
          case BLOCK:
             BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
             BlockPos blockpos = blockhitresult.getBlockPos();
-            if (!this.level.getBlockState(blockpos).isAir()) {
+            if (!this.level.isEmptyBlock(blockpos)) {
                this.gameMode.startDestroyBlock(blockpos, blockhitresult.getDirection());
                if (this.level.getBlockState(blockpos).isAir()) {
                   flag = true;
@@ -1480,8 +_,10 @@
             }
 
             this.player.resetAttackStrengthTicker();
+            net.minecraftforge.common.ForgeHooks.onEmptyLeftClick(this.player);
          }
 
+         if (inputEvent.shouldSwingHand())
          this.player.swing(InteractionHand.MAIN_HAND);
          return flag;
       }
@@ -1496,6 +_,11 @@
             }
 
             for(InteractionHand interactionhand : InteractionHand.values()) {
+               net.minecraftforge.client.event.InputEvent.ClickInputEvent inputEvent = net.minecraftforge.client.ForgeHooksClient.onClickInput(1, this.options.keyUse, interactionhand);
+               if (inputEvent.isCanceled()) {
+                  if (inputEvent.shouldSwingHand()) this.player.swing(interactionhand);
+                  return;
+               }
                ItemStack itemstack = this.player.getItemInHand(interactionhand);
                if (this.hitResult != null) {
                   switch(this.hitResult.getType()) {
@@ -1506,6 +_,7 @@
                         return;
                      }
 
+                     if(!this.player.canInteractWith(entityhitresult.getEntity(), 0)) break; //Forge: Entity may be traced via attack range, but the player may not have sufficient reach.  No padding in client code.
                      InteractionResult interactionresult = this.gameMode.interactAt(this.player, entity, entityhitresult, interactionhand);
                      if (!interactionresult.consumesAction()) {
                         interactionresult = this.gameMode.interact(this.player, entity, interactionhand);
@@ -1513,6 +_,7 @@
 
                      if (interactionresult.consumesAction()) {
                         if (interactionresult.shouldSwing()) {
+                           if (inputEvent.shouldSwingHand())
                            this.player.swing(interactionhand);
                         }
 
@@ -1525,6 +_,7 @@
                      InteractionResult interactionresult1 = this.gameMode.useItemOn(this.player, this.level, interactionhand, blockhitresult);
                      if (interactionresult1.consumesAction()) {
                         if (interactionresult1.shouldSwing()) {
+                           if (inputEvent.shouldSwingHand())
                            this.player.swing(interactionhand);
                            if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.gameMode.hasInfiniteItems())) {
                               this.gameRenderer.itemInHandRenderer.itemUsed(interactionhand);
@@ -1540,6 +_,9 @@
                   }
                }
 
+               if (itemstack.isEmpty() && (this.hitResult == null || this.hitResult.getType() == HitResult.Type.MISS))
+                  net.minecraftforge.common.ForgeHooks.onEmptyClick(this.player, interactionhand);
+
                if (!itemstack.isEmpty()) {
                   InteractionResult interactionresult2 = this.gameMode.useItem(this.player, this.level, interactionhand);
                   if (interactionresult2.consumesAction()) {
@@ -1566,6 +_,8 @@
          --this.rightClickDelay;
       }
 
+      net.minecraftforge.event.ForgeEventFactory.onPreClientTick();
+
       this.profiler.push("gui");
       this.gui.tick(this.pause);
       this.profiler.pop();
@@ -1694,6 +_,8 @@
       this.profiler.popPush("keyboard");
       this.keyboardHandler.tick();
       this.profiler.pop();
+
+      net.minecraftforge.event.ForgeEventFactory.onPostClientTick();
    }
 
    private boolean isMultiplayerServer() {
@@ -1814,7 +_,7 @@
    }
 
    public void loadLevel(String p_91201_) {
-      this.doLoadLevel(p_91201_, WorldStem.DataPackConfigSupplier::loadFromWorld, WorldStem.WorldDataSupplier::loadFromWorld, false, Minecraft.ExperimentalDialogType.BACKUP);
+      this.doLoadLevel(p_91201_, WorldStem.DataPackConfigSupplier::loadFromWorld, WorldStem.WorldDataSupplier::loadFromWorld, false, Minecraft.ExperimentalDialogType.BACKUP, false);
    }
 
    public void createLevel(String p_205186_, LevelSettings p_205187_, RegistryAccess p_205188_, WorldGenSettings p_205189_) {
@@ -1831,10 +_,10 @@
             WorldGenSettings worldgensettings = dataresult.getOrThrow(false, Util.prefix("Error reading worldgen settings after loading data packs: ", LOGGER::error));
             return Pair.of(new PrimaryLevelData(p_205187_, worldgensettings, dataresult.lifecycle()), registryaccess$writable.freeze());
          };
-      }, false, Minecraft.ExperimentalDialogType.CREATE);
+      }, false, Minecraft.ExperimentalDialogType.CREATE, true);
    }
 
-   private void doLoadLevel(String p_205206_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.DataPackConfigSupplier> p_205207_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.WorldDataSupplier> p_205208_, boolean p_205209_, Minecraft.ExperimentalDialogType p_205210_) {
+   private void doLoadLevel(String p_205206_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.DataPackConfigSupplier> p_205207_, Function<LevelStorageSource.LevelStorageAccess, WorldStem.WorldDataSupplier> p_205208_, boolean p_205209_, Minecraft.ExperimentalDialogType p_205210_, boolean creating) {
       LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess;
       try {
          levelstoragesource$levelstorageaccess = this.levelSource.createAccess(p_205206_);
@@ -1849,11 +_,12 @@
 
       WorldStem worldstem;
       try {
+          if (!creating) levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData();
          worldstem = this.makeWorldStem(packrepository, p_205209_, p_205207_.apply(levelstoragesource$levelstorageaccess), p_205208_.apply(levelstoragesource$levelstorageaccess));
       } catch (Exception exception) {
          LOGGER.warn("Failed to load datapacks, can't proceed with server load", (Throwable)exception);
          this.setScreen(new DatapackLoadFailureScreen(() -> {
-            this.doLoadLevel(p_205206_, p_205207_, p_205208_, true, p_205210_);
+            this.doLoadLevel(p_205206_, p_205207_, p_205208_, true, p_205210_, creating);
          }));
 
          try {
@@ -1869,13 +_,15 @@
       WorldData worlddata = worldstem.worldData();
       boolean flag = worlddata.worldGenSettings().isOldCustomizedWorld();
       boolean flag1 = worlddata.worldGenSettingsLifecycle() != Lifecycle.stable();
-      if (p_205210_ == Minecraft.ExperimentalDialogType.NONE || !flag && !flag1) {
+      //Skip confirmation if it has been done already for this world
+      boolean skipConfirmation = worlddata instanceof PrimaryLevelData pld && pld.hasConfirmedExperimentalWarning();
+      if (skipConfirmation || p_205210_ == Minecraft.ExperimentalDialogType.NONE || !flag && !flag1) {
          this.clearLevel();
          this.progressListener.set((StoringChunkProgressListener)null);
 
          try {
             RegistryAccess.Frozen registryaccess$frozen = worldstem.registryAccess();
-            levelstoragesource$levelstorageaccess.saveDataTag(registryaccess$frozen, worlddata);
+            levelstoragesource$levelstorageaccess.saveDataTag(registryaccess$frozen, worlddata); //TODO-PATCHING: Figure out what registry access needs to be passed in here.
             worldstem.updateGlobals();
             YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(this.proxy);
             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
@@ -1885,7 +_,8 @@
             SkullBlockEntity.setup(gameprofilecache, minecraftsessionservice, this);
             GameProfileCache.setUsesAuthentication(false);
             this.singleplayerServer = MinecraftServer.spin((p_210695_) -> {
-               return new IntegratedServer(p_210695_, this, levelstoragesource$levelstorageaccess, packrepository, worldstem, minecraftsessionservice, gameprofilerepository, gameprofilecache, (p_210795_) -> {
+               org.magmafoundation.magma.helpers.ServerInitHelper.init(null, null, null);
+               return new IntegratedServer(p_210695_, this, levelstoragesource$levelstorageaccess, packrepository, worldstem, minecraftsessionservice, gameprofilerepository, gameprofilecache, (p_210795_) -> { //TODO-PATCHING: Handle the registry freeze delay again.
                   StoringChunkProgressListener storingchunkprogresslistener = new StoringChunkProgressListener(p_210795_ + 0);
                   this.progressListener.set(storingchunkprogresslistener);
                   return ProcessorChunkProgressListener.createStarted(storingchunkprogresslistener, this.progressTasks::add);
@@ -1929,13 +_,20 @@
          connection.setListener(new ClientHandshakePacketListenerImpl(connection, this, (Screen)null, (p_210793_) -> {
          }));
          connection.send(new ClientIntentionPacket(socketaddress.toString(), 0, ConnectionProtocol.LOGIN));
-         connection.send(new ServerboundHelloPacket(this.getUser().getGameProfile()));
+         com.mojang.authlib.GameProfile gameProfile = this.getUser().getGameProfile();
+         if (!this.getUser().hasCachedProperties()) {
+            gameProfile = minecraftSessionService.fillProfileProperties(gameProfile, true); //Forge: Fill profile properties upon game load. Fixes MC-52974.
+            this.getUser().setProperties(gameProfile.getProperties());
+         }
+         connection.send(new ServerboundHelloPacket(gameProfile));
          this.pendingConnection = connection;
       } else {
-         this.displayExperimentalConfirmationDialog(p_205210_, p_205206_, flag, () -> {
-            this.doLoadLevel(p_205206_, p_205207_, p_205208_, p_205209_, Minecraft.ExperimentalDialogType.NONE);
-         });
-         worldstem.close();
+         if (flag) //FORGE: For legacy world options, let vanilla handle it.
+            this.displayExperimentalConfirmationDialog(p_205210_, p_205206_, flag, () -> {
+               this.doLoadLevel(p_205206_, p_205207_, p_205208_, p_205209_, Minecraft.ExperimentalDialogType.NONE, creating);
+            });
+         else net.minecraftforge.client.ForgeHooksClient.createWorldConfirmationScreen(levelSource, p_205206_, creating, p_205208_, wds -> () -> this.doLoadLevel(p_205206_, p_205207_, wds, p_205209_, ExperimentalDialogType.NONE, creating));
+            worldstem.close();
 
          try {
             packrepository.close();
@@ -2026,6 +_,7 @@
    }
 
    public void setLevel(ClientLevel p_91157_) {
+      if (level != null) net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(level));
       ProgressScreen progressscreen = new ProgressScreen(true);
       progressscreen.progressStartNoAbort(new TranslatableComponent("connect.joining"));
       this.updateScreenAndTick(progressscreen);
@@ -2058,10 +_,12 @@
       IntegratedServer integratedserver = this.singleplayerServer;
       this.singleplayerServer = null;
       this.gameRenderer.resetData();
+      net.minecraftforge.client.ForgeHooksClient.firePlayerLogout(this.gameMode, this.player);
       this.gameMode = null;
       NarratorChatListener.INSTANCE.clear();
       this.updateScreenAndTick(p_91321_);
       if (this.level != null) {
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(level));
          if (integratedserver != null) {
             this.profiler.push("waitForServer");
 
@@ -2076,6 +_,7 @@
          this.gui.onDisconnected();
          this.currentServer = null;
          this.isLocalServer = false;
+         net.minecraftforge.client.ForgeHooksClient.handleClientLevelClosing(level);
          this.game.onLeaveGameSession();
       }
 
@@ -2162,66 +_,9 @@
 
    private void pickBlock() {
       if (this.hitResult != null && this.hitResult.getType() != HitResult.Type.MISS) {
-         boolean flag = this.player.getAbilities().instabuild;
-         BlockEntity blockentity = null;
-         HitResult.Type hitresult$type = this.hitResult.getType();
-         ItemStack itemstack;
-         if (hitresult$type == HitResult.Type.BLOCK) {
-            BlockPos blockpos = ((BlockHitResult)this.hitResult).getBlockPos();
-            BlockState blockstate = this.level.getBlockState(blockpos);
-            if (blockstate.isAir()) {
-               return;
-            }
-
-            Block block = blockstate.getBlock();
-            itemstack = block.getCloneItemStack(this.level, blockpos, blockstate);
-            if (itemstack.isEmpty()) {
-               return;
-            }
-
-            if (flag && Screen.hasControlDown() && blockstate.hasBlockEntity()) {
-               blockentity = this.level.getBlockEntity(blockpos);
-            }
-         } else {
-            if (hitresult$type != HitResult.Type.ENTITY || !flag) {
-               return;
-            }
-
-            Entity entity = ((EntityHitResult)this.hitResult).getEntity();
-            itemstack = entity.getPickResult();
-            if (itemstack == null) {
-               return;
-            }
-         }
-
-         if (itemstack.isEmpty()) {
-            String s = "";
-            if (hitresult$type == HitResult.Type.BLOCK) {
-               s = Registry.BLOCK.getKey(this.level.getBlockState(((BlockHitResult)this.hitResult).getBlockPos()).getBlock()).toString();
-            } else if (hitresult$type == HitResult.Type.ENTITY) {
-               s = Registry.ENTITY_TYPE.getKey(((EntityHitResult)this.hitResult).getEntity().getType()).toString();
-            }
-
-            LOGGER.warn("Picking on: [{}] {} gave null item", hitresult$type, s);
-         } else {
-            Inventory inventory = this.player.getInventory();
-            if (blockentity != null) {
-               this.addCustomNbtData(itemstack, blockentity);
-            }
-
-            int i = inventory.findSlotMatchingItem(itemstack);
-            if (flag) {
-               inventory.setPickedItem(itemstack);
-               this.gameMode.handleCreativeModeItemAdd(this.player.getItemInHand(InteractionHand.MAIN_HAND), 36 + inventory.selected);
-            } else if (i != -1) {
-               if (Inventory.isHotbarSlot(i)) {
-                  inventory.selected = i;
-               } else {
-                  this.gameMode.handlePickItem(i);
-               }
-            }
-
-         }
+          if (!net.minecraftforge.client.ForgeHooksClient.onClickInput(2, this.options.keyPickItem, InteractionHand.MAIN_HAND).isCanceled())
+              net.minecraftforge.common.ForgeHooks.onPickBlock(this.hitResult, this.player, this.level);
+          // We delete this code wholly instead of commenting it out, to make sure we detect changes in it between MC versions
       }
    }
 
@@ -2713,8 +_,8 @@
       return this.renderBuffers;
    }
 
-   private static Pack createClientPackAdapter(String p_167934_, Component p_167935_, boolean p_167936_, Supplier<PackResources> p_167937_, PackMetadataSection p_167938_, Pack.Position p_167939_, PackSource p_167940_) {
-      int i = p_167938_.getPackFormat();
+   private static Pack createClientPackAdapter(String p_167934_, Component p_167935_, boolean p_167936_, Supplier<PackResources> p_167937_, PackMetadataSection p_167938_, Pack.Position p_167939_, PackSource p_167940_, boolean hidden) {
+      int i = p_167938_.getPackFormat(PackType.CLIENT_RESOURCES);
       Supplier<PackResources> supplier = p_167937_;
       if (i <= 3) {
          supplier = adaptV3(p_167937_);
@@ -2724,7 +_,7 @@
          supplier = adaptV4(supplier);
       }
 
-      return new Pack(p_167934_, p_167935_, p_167936_, supplier, p_167938_, PackType.CLIENT_RESOURCES, p_167939_, p_167940_);
+      return new Pack(p_167934_, p_167935_, p_167936_, supplier, p_167938_, PackType.CLIENT_RESOURCES, p_167939_, p_167940_, hidden);
    }
 
    private static Supplier<PackResources> adaptV3(Supplier<PackResources> p_91331_) {
@@ -2741,6 +_,14 @@
 
    public void updateMaxMipLevel(int p_91313_) {
       this.modelManager.updateMaxMipLevel(p_91313_);
+   }
+
+   public ItemColors getItemColors() {
+      return this.itemColors;
+   }
+
+   public SearchRegistry getSearchTreeManager() {
+      return this.searchRegistry;
    }
 
    public EntityModelSet getEntityModels() {
