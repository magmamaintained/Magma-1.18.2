--- a/net/minecraft/client/renderer/ItemBlockRenderTypes.java
+++ b/net/minecraft/client/renderer/ItemBlockRenderTypes.java
@@ -19,6 +_,7 @@
 
 @OnlyIn(Dist.CLIENT)
 public class ItemBlockRenderTypes {
+   @Deprecated
    private static final Map<Block, RenderType> TYPE_BY_BLOCK = Util.make(Maps.newHashMap(), (p_109296_) -> {
       RenderType rendertype = RenderType.tripwire();
       p_109296_.put(Blocks.TRIPWIRE, rendertype);
@@ -286,6 +_,7 @@
       p_109296_.put(Blocks.BUBBLE_COLUMN, rendertype3);
       p_109296_.put(Blocks.TINTED_GLASS, rendertype3);
    });
+   @Deprecated
    private static final Map<Fluid, RenderType> TYPE_BY_FLUID = Util.make(Maps.newHashMap(), (p_109290_) -> {
       RenderType rendertype = RenderType.translucent();
       p_109290_.put(Fluids.FLOWING_WATER, rendertype);
@@ -293,6 +_,7 @@
    });
    private static boolean renderCutout;
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType getChunkRenderType(BlockState p_109283_) {
       Block block = p_109283_.getBlock();
       if (block instanceof LeavesBlock) {
@@ -303,6 +_,7 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType getMovingBlockRenderType(BlockState p_109294_) {
       Block block = p_109294_.getBlock();
       if (block instanceof LeavesBlock) {
@@ -318,8 +_,7 @@
    }
 
    public static RenderType getRenderType(BlockState p_109285_, boolean p_109286_) {
-      RenderType rendertype = getChunkRenderType(p_109285_);
-      if (rendertype == RenderType.translucent()) {
+      if (canRenderInLayer(p_109285_, RenderType.translucent())) {
          if (!Minecraft.useShaderTransparency()) {
             return Sheets.translucentCullBlockSheet();
          } else {
@@ -340,9 +_,111 @@
       }
    }
 
+   @Deprecated // FORGE: Use canRenderInLayer
    public static RenderType getRenderLayer(FluidState p_109288_) {
       RenderType rendertype = TYPE_BY_FLUID.get(p_109288_.getType());
       return rendertype != null ? rendertype : RenderType.solid();
+   }
+
+   // FORGE START
+
+   private static final java.util.function.Predicate<RenderType> SOLID_PREDICATE = type -> type == RenderType.solid();
+   // Access to the two following editable maps is guarded by synchronization and they are lazily copied to the "readonly" maps on first read after modification
+   private static final Map<net.minecraftforge.registries.IRegistryDelegate<Block>, java.util.function.Predicate<RenderType>> blockRenderChecks = createRenderCheckMap(TYPE_BY_BLOCK);
+   private static final Map<net.minecraftforge.registries.IRegistryDelegate<Fluid>, java.util.function.Predicate<RenderType>> fluidRenderChecks = createRenderCheckMap(TYPE_BY_FLUID);
+   @org.jetbrains.annotations.Nullable private static volatile Map<net.minecraftforge.registries.IRegistryDelegate<Block>, java.util.function.Predicate<RenderType>> blockRenderChecksReadOnly = null;
+   @org.jetbrains.annotations.Nullable private static volatile Map<net.minecraftforge.registries.IRegistryDelegate<Fluid>, java.util.function.Predicate<RenderType>> fluidRenderChecksReadOnly = null;
+
+   private static <T extends net.minecraftforge.registries.ForgeRegistryEntry<T>> Map<net.minecraftforge.registries.IRegistryDelegate<T>, java.util.function.Predicate<RenderType>> createRenderCheckMap(
+           Map<T, RenderType> vanillaMap
+   ) {
+      return Util.make(new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(vanillaMap.size(), 0.5F), map -> {
+         map.defaultReturnValue(SOLID_PREDICATE);
+         for (Map.Entry<T, RenderType> entry : vanillaMap.entrySet()) {
+            map.put(entry.getKey().delegate, createMatchingLayerPredicate(entry.getValue()));
+         }
+      });
+   }
+
+   public static boolean canRenderInLayer(BlockState state, RenderType type) {
+      Block block = state.getBlock();
+      if (block instanceof LeavesBlock) {
+         return renderCutout ? type == RenderType.cutoutMipped() : type == RenderType.solid();
+      } else {
+         return getBlockLayerPredicates().get(block.delegate).test(type);
+      }
+   }
+
+   public static boolean canRenderInLayer(FluidState fluid, RenderType type) {
+      return getFluidLayerPredicates().get(fluid.getType().delegate).test(type);
+   }
+
+   public static void setRenderLayer(Block block, RenderType type) {
+      setRenderLayer(block, createMatchingLayerPredicate(type));
+   }
+
+   public static void setRenderLayer(Block block, java.util.function.Predicate<RenderType> predicate) {
+      synchronized (blockRenderChecks) {
+      blockRenderChecks.put(block.delegate, predicate);
+         blockRenderChecksReadOnly = null;
+      }
+   }
+
+   public static void setRenderLayer(Fluid fluid, RenderType type) {
+      setRenderLayer(fluid, createMatchingLayerPredicate(type));
+   }
+
+   public static void setRenderLayer(Fluid fluid, java.util.function.Predicate<RenderType> predicate) {
+      synchronized (fluidRenderChecks) {
+      fluidRenderChecks.put(fluid.delegate, predicate);
+         fluidRenderChecksReadOnly = null;
+      }
+   }
+
+   public static Map<net.minecraftforge.registries.IRegistryDelegate<Block>, java.util.function.Predicate<RenderType>> getBlockLayerPredicatesView() {
+      return java.util.Collections.unmodifiableMap(getBlockLayerPredicates());
+   }
+
+   private static Map<net.minecraftforge.registries.IRegistryDelegate<Block>, java.util.function.Predicate<RenderType>> getBlockLayerPredicates() {
+      Map<net.minecraftforge.registries.IRegistryDelegate<Block>, java.util.function.Predicate<RenderType>> map = blockRenderChecksReadOnly;
+      if (map == null) {
+         synchronized (blockRenderChecks) {
+            map = blockRenderChecksReadOnly;
+            if (map == null) {
+               blockRenderChecksReadOnly = map = copy(blockRenderChecks);
+            }
+         }
+      }
+      return map;
+   }
+
+
+   public static Map<net.minecraftforge.registries.IRegistryDelegate<Fluid>, java.util.function.Predicate<RenderType>> getFluidLayerPredicatesView() {
+      return java.util.Collections.unmodifiableMap(getFluidLayerPredicates());
+   }
+
+   private static Map<net.minecraftforge.registries.IRegistryDelegate<Fluid>, java.util.function.Predicate<RenderType>> getFluidLayerPredicates() {
+      Map<net.minecraftforge.registries.IRegistryDelegate<Fluid>, java.util.function.Predicate<RenderType>> map = fluidRenderChecksReadOnly;
+      if (map == null) {
+         synchronized (fluidRenderChecks) {
+            map = fluidRenderChecksReadOnly;
+            if (map == null) {
+               fluidRenderChecksReadOnly = map = copy(fluidRenderChecks);
+            }
+         }
+      }
+      return map;
+   }
+
+   private static <T> Map<net.minecraftforge.registries.IRegistryDelegate<T>, java.util.function.Predicate<RenderType>> copy(Map<net.minecraftforge.registries.IRegistryDelegate<T>, java.util.function.Predicate<RenderType>> map) {
+      var newMap = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(map);
+      newMap.defaultReturnValue(SOLID_PREDICATE);
+      return newMap;
+   }
+
+   private static java.util.function.Predicate<RenderType> createMatchingLayerPredicate(RenderType type) {
+      java.util.Objects.requireNonNull(type);
+      return type::equals;
    }
 
    public static void setFancy(boolean p_109292_) {
