--- a/net/minecraft/client/renderer/GameRenderer.java
+++ b/net/minecraft/client/renderer/GameRenderer.java
@@ -288,6 +_,8 @@
          this.loadEffect(new ResourceLocation("shaders/post/spider.json"));
       } else if (p_109107_ instanceof EnderMan) {
          this.loadEffect(new ResourceLocation("shaders/post/invert.json"));
+      } else {
+         net.minecraftforge.client.ForgeHooksClient.loadEntityShader(p_109107_, this);
       }
 
    }
@@ -544,6 +_,7 @@
          list1.add(Pair.of(new ShaderInstance(p_172768_, "rendertype_crumbling", DefaultVertexFormat.BLOCK), (p_172733_) -> {
             rendertypeCrumblingShader = p_172733_;
          }));
+         net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.RegisterShadersEvent(p_172768_, list1));
       } catch (IOException ioexception) {
          list1.forEach((p_172772_) -> {
             p_172772_.getFirst().close();
@@ -625,19 +_,21 @@
             boolean flag = false;
             int i = 3;
             double d1 = d0;
+            double atkRange = this.minecraft.player.getAttackRange();
             if (this.minecraft.gameMode.hasFarPickRange()) {
-               d1 = 6.0D;
+               d1 = Math.max(d0, atkRange);
                d0 = d1;
             } else {
-               if (d0 > 3.0D) {
+               if (d0 > atkRange) {
                   flag = true;
                }
 
                d0 = d0;
+               d0 = d1 = Math.max(d0, atkRange); // Pick entities with the max of the reach distance and attack range.
             }
 
             d1 *= d1;
-            if (this.minecraft.hitResult != null) {
+            if (this.minecraft.hitResult != null && this.minecraft.hitResult.getType() != HitResult.Type.MISS) { // Add != MISS to ensure Attack Range is not clamped at the value of Reach Distance.
                d1 = this.minecraft.hitResult.getLocation().distanceToSqr(vec3);
             }
 
@@ -652,7 +_,7 @@
                Entity entity1 = entityhitresult.getEntity();
                Vec3 vec33 = entityhitresult.getLocation();
                double d2 = vec3.distanceToSqr(vec33);
-               if (flag && d2 > 9.0D) {
+               if (false && flag && d2 > 9.0D) { //Forge: Always keep the entity result to allow for extended reach interactions.
                   this.minecraft.hitResult = BlockHitResult.miss(vec33, Direction.getNearest(vec31.x, vec31.y, vec31.z), new BlockPos(vec33));
                } else if (d2 < d1 || this.minecraft.hitResult == null) {
                   this.minecraft.hitResult = entityhitresult;
@@ -706,7 +_,7 @@
             d0 *= (double)Mth.lerp(this.minecraft.options.fovEffectScale, 1.0F, 0.85714287F);
          }
 
-         return d0;
+         return net.minecraftforge.client.ForgeHooksClient.getFieldOfView(this, p_109142_, p_109143_, d0);
       }
    }
 
@@ -843,11 +_,11 @@
 
          Window window = this.minecraft.getWindow();
          RenderSystem.clear(256, Minecraft.ON_OSX);
-         Matrix4f matrix4f = Matrix4f.orthographic(0.0F, (float)((double)window.getWidth() / window.getGuiScale()), 0.0F, (float)((double)window.getHeight() / window.getGuiScale()), 1000.0F, 3000.0F);
+         Matrix4f matrix4f = Matrix4f.orthographic(0.0F, (float)((double)window.getWidth() / window.getGuiScale()), 0.0F, (float)((double)window.getHeight() / window.getGuiScale()), 1000.0F, net.minecraftforge.client.ForgeHooksClient.getGuiFarPlane());
          RenderSystem.setProjectionMatrix(matrix4f);
          PoseStack posestack = RenderSystem.getModelViewStack();
          posestack.setIdentity();
-         posestack.translate(0.0D, 0.0D, -2000.0D);
+         posestack.translate(0.0D, 0.0D, 1000F-net.minecraftforge.client.ForgeHooksClient.getGuiFarPlane());
          RenderSystem.applyModelViewMatrix();
          Lighting.setupFor3DItems();
          PoseStack posestack1 = new PoseStack();
@@ -882,7 +_,7 @@
             }
          } else if (this.minecraft.screen != null) {
             try {
-               this.minecraft.screen.render(posestack1, i, j, this.minecraft.getDeltaFrameTime());
+               net.minecraftforge.client.ForgeHooksClient.drawScreen(this.minecraft.screen, posestack1, i, j, this.minecraft.getDeltaFrameTime());
             } catch (Throwable throwable1) {
                CrashReport crashreport1 = CrashReport.forThrowable(throwable1, "Rendering screen");
                CrashReportCategory crashreportcategory1 = crashreport1.addCategory("Screen render details");
@@ -1040,6 +_,11 @@
       Matrix4f matrix4f = posestack.last().pose();
       this.resetProjectionMatrix(matrix4f);
       camera.setup(this.minecraft.level, (Entity)(this.minecraft.getCameraEntity() == null ? this.minecraft.player : this.minecraft.getCameraEntity()), !this.minecraft.options.getCameraType().isFirstPerson(), this.minecraft.options.getCameraType().isMirrored(), p_109090_);
+
+      net.minecraftforge.client.event.EntityViewRenderEvent.CameraSetup cameraSetup = net.minecraftforge.client.ForgeHooksClient.onCameraSetup(this, camera, p_109090_);
+      camera.setAnglesInternal(cameraSetup.getYaw(), cameraSetup.getPitch());
+      p_109092_.mulPose(Vector3f.ZP.rotationDegrees(cameraSetup.getRoll()));
+
       p_109092_.mulPose(Vector3f.XP.rotationDegrees(camera.getXRot()));
       p_109092_.mulPose(Vector3f.YP.rotationDegrees(camera.getYRot() + 180.0F));
       Matrix3f matrix3f = p_109092_.last().normal().copy();
@@ -1049,6 +_,8 @@
 
       this.minecraft.levelRenderer.prepareCullFrustum(p_109092_, camera.getPosition(), this.getProjectionMatrix(Math.max(d0, this.minecraft.options.fov)));
       this.minecraft.levelRenderer.renderLevel(p_109092_, p_109090_, p_109091_, flag, camera, this, this.lightTexture, matrix4f);
+      this.minecraft.getProfiler().popPush("forge_render_last");
+      net.minecraftforge.client.ForgeHooksClient.dispatchRenderLast(this.minecraft.levelRenderer, p_109092_, p_109090_, matrix4f, p_109091_);
       this.minecraft.getProfiler().popPush("hand");
       if (this.renderHand) {
          RenderSystem.clear(256, Minecraft.ON_OSX);
