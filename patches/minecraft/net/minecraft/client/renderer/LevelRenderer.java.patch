--- a/net/minecraft/client/renderer/LevelRenderer.java
+++ b/net/minecraft/client/renderer/LevelRenderer.java
@@ -259,6 +_,11 @@
    }
 
    private void renderSnowAndRain(LightTexture p_109704_, float p_109705_, double p_109706_, double p_109707_, double p_109708_) {
+      net.minecraftforge.client.IWeatherRenderHandler renderHandler = level.effects().getWeatherRenderHandler();
+      if (renderHandler != null) {
+         renderHandler.render(ticks, p_109705_, level, minecraft, p_109704_, p_109706_, p_109707_, p_109708_);
+         return;
+      }
       float f = this.minecraft.level.getRainLevel(p_109705_);
       if (!(f <= 0.0F)) {
          p_109704_.turnOnLightLayer();
@@ -379,6 +_,11 @@
    }
 
    public void tickRain(Camera p_109694_) {
+      net.minecraftforge.client.IWeatherParticleRenderHandler renderHandler = level.effects().getWeatherParticleRenderHandler();
+      if (renderHandler != null) {
+         renderHandler.render(ticks, level, minecraft, p_109694_);
+         return;
+      }
       float f = this.minecraft.level.getRainLevel(1.0F) / (Minecraft.useFancyGraphics() ? 1.0F : 2.0F);
       if (!(f <= 0.0F)) {
          Random random = new Random((long)this.ticks * 312987231L);
@@ -1134,20 +_,24 @@
       RenderSystem.clear(16640, Minecraft.ON_OSX);
       float f = p_109605_.getRenderDistance();
       boolean flag2 = this.minecraft.level.effects().isFoggyAt(Mth.floor(d0), Mth.floor(d1)) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog();
+      FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_SKY, f, flag2, p_109601_);
       profilerfiller.popPush("sky");
       RenderSystem.setShader(GameRenderer::getPositionShader);
       this.renderSky(p_109600_, p_109607_, p_109601_, p_109604_, flag2, () -> {
-         FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_SKY, f, flag2);
+         FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_SKY, f, flag2, p_109601_);
       });
+      net.minecraftforge.client.ForgeHooksClient.dispatchRenderStage(net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_SKY, this, p_109600_, p_109607_, this.ticks, p_109604_, frustum);
       profilerfiller.popPush("fog");
-      FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_TERRAIN, Math.max(f, 32.0F), flag2);
+      FogRenderer.setupFog(p_109604_, FogRenderer.FogMode.FOG_TERRAIN, Math.max(f, 32.0F), flag2, p_109601_);
       profilerfiller.popPush("terrain_setup");
       this.setupRender(p_109604_, frustum, flag1, this.minecraft.player.isSpectator());
       profilerfiller.popPush("compilechunks");
       this.compileChunks(p_109604_);
       profilerfiller.popPush("terrain");
       this.renderChunkLayer(RenderType.solid(), p_109600_, d0, d1, d2, p_109607_);
+      this.minecraft.getModelManager().getAtlas(TextureAtlas.LOCATION_BLOCKS).setBlurMipmap(false, this.minecraft.options.mipmapLevels > 0); // FORGE: fix flickering leaves when mods mess up the blurMipmap settings
       this.renderChunkLayer(RenderType.cutoutMipped(), p_109600_, d0, d1, d2, p_109607_);
+      this.minecraft.getModelManager().getAtlas(TextureAtlas.LOCATION_BLOCKS).restoreLastBlurMipmap();
       this.renderChunkLayer(RenderType.cutout(), p_109600_, d0, d1, d2, p_109607_);
       if (this.level.effects().constantAmbientLight()) {
          Lighting.setupNetherLevel(p_109600_.last().pose());
@@ -1179,7 +_,7 @@
       for(Entity entity : this.level.entitiesForRendering()) {
          if (this.entityRenderDispatcher.shouldRender(entity, frustum, d0, d1, d2) || entity.hasIndirectPassenger(this.minecraft.player)) {
             BlockPos blockpos = entity.blockPosition();
-            if ((this.level.isOutsideBuildHeight(blockpos.getY()) || this.isChunkCompiled(blockpos)) && (entity != p_109604_.getEntity() || p_109604_.isDetached() || p_109604_.getEntity() instanceof LivingEntity && ((LivingEntity)p_109604_.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || p_109604_.getEntity() == entity)) {
+            if ((this.level.isOutsideBuildHeight(blockpos.getY()) || this.isChunkCompiled(blockpos)) && (entity != p_109604_.getEntity() || p_109604_.isDetached() || p_109604_.getEntity() instanceof LivingEntity && ((LivingEntity)p_109604_.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || p_109604_.getEntity() == entity || (entity == minecraft.player && !minecraft.player.isSpectator()))) { //FORGE: render local player entity when it is not the renderViewEntity
                ++this.renderedEntities;
                if (entity.tickCount == 0) {
                   entity.xOld = entity.getX();
@@ -1219,6 +_,7 @@
          List<BlockEntity> list = levelrenderer$renderchunkinfo.chunk.getCompiledChunk().getRenderableBlockEntities();
          if (!list.isEmpty()) {
             for(BlockEntity blockentity1 : list) {
+               if(!frustum.isVisible(blockentity1.getRenderBoundingBox())) continue;
                BlockPos blockpos4 = blockentity1.getBlockPos();
                MultiBufferSource multibuffersource1 = multibuffersource$buffersource;
                p_109600_.pushPose();
@@ -1244,6 +_,7 @@
 
       synchronized(this.globalBlockEntities) {
          for(BlockEntity blockentity : this.globalBlockEntities) {
+            if(!frustum.isVisible(blockentity.getRenderBoundingBox())) continue;
             BlockPos blockpos3 = blockentity.getBlockPos();
             p_109600_.pushPose();
             p_109600_.translate((double)blockpos3.getX() - d0, (double)blockpos3.getY() - d1, (double)blockpos3.getZ() - d2);
@@ -1295,10 +_,13 @@
          profilerfiller.popPush("outline");
          BlockPos blockpos1 = ((BlockHitResult)hitresult).getBlockPos();
          BlockState blockstate = this.level.getBlockState(blockpos1);
+         if (!net.minecraftforge.client.ForgeHooksClient.onDrawHighlight(this, p_109604_, hitresult, p_109601_, p_109600_, multibuffersource$buffersource))
          if (!blockstate.isAir() && this.level.getWorldBorder().isWithinBounds(blockpos1)) {
             VertexConsumer vertexconsumer2 = multibuffersource$buffersource.getBuffer(RenderType.lines());
             this.renderHitOutline(p_109600_, vertexconsumer2, p_109604_.getEntity(), d0, d1, d2, blockpos1, blockstate);
          }
+      } else if (hitresult != null && hitresult.getType() == HitResult.Type.ENTITY) {
+         net.minecraftforge.client.ForgeHooksClient.onDrawHighlight(this, p_109604_, hitresult, p_109601_, p_109600_, multibuffersource$buffersource);
       }
 
       PoseStack posestack = RenderSystem.getModelViewStack();
@@ -1333,7 +_,8 @@
          this.particlesTarget.copyDepthFrom(this.minecraft.getMainRenderTarget());
          RenderStateShard.PARTICLES_TARGET.setupRenderState();
          profilerfiller.popPush("particles");
-         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_);
+         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_, frustum);
+         net.minecraftforge.client.ForgeHooksClient.dispatchRenderStage(net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_PARTICLES, this, p_109600_, p_109607_, this.ticks, p_109604_, frustum);
          RenderStateShard.PARTICLES_TARGET.clearRenderState();
       } else {
          profilerfiller.popPush("translucent");
@@ -1347,7 +_,8 @@
          profilerfiller.popPush("string");
          this.renderChunkLayer(RenderType.tripwire(), p_109600_, d0, d1, d2, p_109607_);
          profilerfiller.popPush("particles");
-         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_);
+         this.minecraft.particleEngine.render(p_109600_, multibuffersource$buffersource, p_109606_, p_109604_, p_109601_, frustum);
+         net.minecraftforge.client.ForgeHooksClient.dispatchRenderStage(net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_PARTICLES, this, p_109600_, p_109607_, this.ticks, p_109604_, frustum);
       }
 
       posestack.pushPose();
@@ -1370,6 +_,7 @@
       if (this.transparencyChain != null) {
          RenderStateShard.WEATHER_TARGET.setupRenderState();
          profilerfiller.popPush("weather");
+         net.minecraftforge.client.ForgeHooksClient.dispatchRenderStage(net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_WEATHER, this, p_109600_, p_109607_, this.ticks, p_109604_, frustum);
          this.renderSnowAndRain(p_109606_, p_109601_, d0, d1, d2);
          this.renderWorldBorder(p_109604_);
          RenderStateShard.WEATHER_TARGET.clearRenderState();
@@ -1379,6 +_,7 @@
          RenderSystem.depthMask(false);
          profilerfiller.popPush("weather");
          this.renderSnowAndRain(p_109606_, p_109601_, d0, d1, d2);
+         net.minecraftforge.client.ForgeHooksClient.dispatchRenderStage(net.minecraftforge.client.event.RenderLevelStageEvent.Stage.AFTER_WEATHER, this, p_109600_, p_109607_, this.ticks, p_109604_, frustum);
          this.renderWorldBorder(p_109604_);
          RenderSystem.depthMask(true);
       }
@@ -1521,6 +_,7 @@
       VertexBuffer.unbind();
       VertexBuffer.unbindVertexArray();
       this.minecraft.getProfiler().pop();
+      net.minecraftforge.client.ForgeHooksClient.dispatchRenderStage(p_172994_, this, p_172995_, p_172999_, this.ticks, this.minecraft.gameRenderer.getMainCamera(), this.capturedFrustum != null ? this.capturedFrustum : this.cullingFrustum);
       p_172994_.clearRenderState();
    }
 
@@ -1783,6 +_,11 @@
 
    public void renderSky(PoseStack p_202424_, Matrix4f p_202425_, float p_202426_, Camera p_202427_, boolean p_202428_, Runnable p_202429_) {
       p_202429_.run();
+      net.minecraftforge.client.ISkyRenderHandler renderHandler = level.effects().getSkyRenderHandler();
+      if (renderHandler != null) {
+         renderHandler.render(ticks, p_202426_, p_202424_, level, minecraft);
+         return;
+      }
       if (!p_202428_) {
          FogType fogtype = p_202427_.getFluidInCamera();
          if (fogtype != FogType.POWDER_SNOW && fogtype != FogType.LAVA) {
@@ -1910,6 +_,11 @@
    }
 
    public void renderClouds(PoseStack p_172955_, Matrix4f p_172956_, float p_172957_, double p_172958_, double p_172959_, double p_172960_) {
+      net.minecraftforge.client.ICloudRenderHandler renderHandler = level.effects().getCloudRenderHandler();
+      if (renderHandler != null) {
+         renderHandler.render(ticks, p_172957_, p_172955_, level, minecraft, p_172958_, p_172959_, p_172960_);
+         return;
+      }
       float f = this.level.effects().getCloudHeight();
       if (!Float.isNaN(f)) {
          RenderSystem.disableCull();
@@ -2095,7 +_,7 @@
                }
             } else {
                BlockPos blockpos1 = chunkrenderdispatcher$renderchunk.getOrigin().offset(8, 8, 8);
-               flag = blockpos1.distSqr(blockpos) < 768.0D || chunkrenderdispatcher$renderchunk.isDirtyFromPlayer();
+               flag = !net.minecraftforge.common.ForgeConfig.CLIENT.alwaysSetupTerrainOffThread.get() && (blockpos1.distSqr(blockpos) < 768.0D || chunkrenderdispatcher$renderchunk.isDirtyFromPlayer()); // the target is the else block below, so invert the forge addition to get there early
             }
 
             if (flag) {
@@ -2393,7 +_,12 @@
       this.viewArea.setDirty(p_109502_, p_109503_, p_109504_, p_109505_);
    }
 
+   @Deprecated // Forge: use item aware function below
    public void playStreamingMusic(@Nullable SoundEvent p_109515_, BlockPos p_109516_) {
+      this.playStreamingMusic(p_109515_, p_109516_, p_109515_ == null? null : RecordItem.getBySound(p_109515_));
+   }
+
+   public void playStreamingMusic(@Nullable SoundEvent p_109515_, BlockPos p_109516_, @Nullable RecordItem musicDiscItem) {
       SoundInstance soundinstance = this.playingRecords.get(p_109516_);
       if (soundinstance != null) {
          this.minecraft.getSoundManager().stop(soundinstance);
@@ -2401,7 +_,7 @@
       }
 
       if (p_109515_ != null) {
-         RecordItem recorditem = RecordItem.getBySound(p_109515_);
+         RecordItem recorditem = musicDiscItem;
          if (recorditem != null) {
             this.minecraft.gui.setNowPlaying(recorditem.getDisplayName());
          }
@@ -2553,7 +_,7 @@
          break;
       case 1010:
          if (Item.byId(p_109536_) instanceof RecordItem) {
-            this.playStreamingMusic(((RecordItem)Item.byId(p_109536_)).getSound(), p_109535_);
+            this.playStreamingMusic(((RecordItem)Item.byId(p_109536_)).getSound(), p_109535_, (RecordItem) Item.byId(p_109536_));
          } else {
             this.playStreamingMusic((SoundEvent)null, p_109535_);
          }
@@ -2723,7 +_,7 @@
       case 2001:
          BlockState blockstate = Block.stateById(p_109536_);
          if (!blockstate.isAir()) {
-            SoundType soundtype = blockstate.getSoundType();
+            SoundType soundtype = blockstate.getSoundType(this.level, p_109535_, null);
             this.level.playLocalSound(p_109535_, soundtype.getBreakSound(), SoundSource.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F, false);
          }
 
@@ -2888,7 +_,7 @@
       } else {
          int i = p_109538_.getBrightness(LightLayer.SKY, p_109540_);
          int j = p_109538_.getBrightness(LightLayer.BLOCK, p_109540_);
-         int k = p_109539_.getLightEmission();
+         int k = p_109539_.getLightEmission(p_109538_, p_109540_);
          if (j < k) {
             j = k;
          }
