--- a/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
+++ b/net/minecraft/client/gui/screens/inventory/CreativeModeInventoryScreen.java
@@ -73,6 +_,8 @@
    private Slot destroyItemSlot;
    private CreativeInventoryListener listener;
    private boolean ignoreTextInput;
+   private static int tabPage = 0;
+   private int maxPages = 0;
    private boolean hasClickedOutside;
    private final Set<TagKey<Item>> visibleTags = new HashSet<>();
 
@@ -232,6 +_,12 @@
    protected void init() {
       if (this.minecraft.gameMode.hasInfiniteItems()) {
          super.init();
+         int tabCount = CreativeModeTab.TABS.length;
+         if (tabCount > 12) {
+            addRenderableWidget(new net.minecraft.client.gui.components.Button(leftPos,              topPos - 50, 20, 20, new TextComponent("<"), b -> tabPage = Math.max(tabPage - 1, 0       )));
+            addRenderableWidget(new net.minecraft.client.gui.components.Button(leftPos + imageWidth - 20, topPos - 50, 20, 20, new TextComponent(">"), b -> tabPage = Math.min(tabPage + 1, maxPages)));
+            maxPages = (int) Math.ceil((tabCount - 12) / 10D);
+         }
          this.minecraft.keyboardHandler.setSendRepeatsToGui(true);
          this.searchBox = new EditBox(this.font, this.leftPos + 82, this.topPos + 6, 80, 9, new TranslatableComponent("itemGroup.search"));
          this.searchBox.setMaxLength(50);
@@ -273,7 +_,7 @@
    public boolean charTyped(char p_98521_, int p_98522_) {
       if (this.ignoreTextInput) {
          return false;
-      } else if (selectedTab != CreativeModeTab.TAB_SEARCH.getId()) {
+      } else if (!CreativeModeTab.TABS[selectedTab].hasSearchBar()) {
          return false;
       } else {
          String s = this.searchBox.getValue();
@@ -291,7 +_,7 @@
 
    public boolean keyPressed(int p_98547_, int p_98548_, int p_98549_) {
       this.ignoreTextInput = false;
-      if (selectedTab != CreativeModeTab.TAB_SEARCH.getId()) {
+      if (!CreativeModeTab.TABS[selectedTab].hasSearchBar()) {
          if (this.minecraft.options.keyChat.matches(p_98547_, p_98548_)) {
             this.ignoreTextInput = true;
             this.selectTab(CreativeModeTab.TAB_SEARCH);
@@ -328,6 +_,32 @@
    private void refreshSearchResults() {
       (this.menu).items.clear();
       this.visibleTags.clear();
+
+      CreativeModeTab tab = CreativeModeTab.TABS[selectedTab];
+      if (tab.hasSearchBar() && tab != CreativeModeTab.TAB_SEARCH) {
+         tab.fillItemList(menu.items);
+         if (!this.searchBox.getValue().isEmpty()) {
+            //TODO: Make this a SearchTree not a manual search
+            String search = this.searchBox.getValue().toLowerCase(Locale.ROOT);
+            java.util.Iterator<ItemStack> itr = menu.items.iterator();
+            while (itr.hasNext()) {
+               ItemStack stack = itr.next();
+               boolean matches = false;
+               for (Component line : stack.getTooltipLines(this.minecraft.player, this.minecraft.options.advancedItemTooltips ? TooltipFlag.Default.ADVANCED : TooltipFlag.Default.NORMAL)) {
+                  if (ChatFormatting.stripFormatting(line.getString()).toLowerCase(Locale.ROOT).contains(search)) {
+                     matches = true;
+                     break;
+                  }
+               }
+               if (!matches)
+                  itr.remove();
+            }
+         }
+         this.scrollOffs = 0.0F;
+         menu.scrollTo(0.0F);
+         return;
+      }
+
       String s = this.searchBox.getValue();
       if (s.isEmpty()) {
          for(Item item : Registry.ITEM) {
@@ -372,9 +_,9 @@
 
    protected void renderLabels(PoseStack p_98616_, int p_98617_, int p_98618_) {
       CreativeModeTab creativemodetab = CreativeModeTab.TABS[selectedTab];
-      if (creativemodetab.showTitle()) {
+      if (creativemodetab != null && creativemodetab.showTitle()) {
          RenderSystem.disableBlend();
-         this.font.draw(p_98616_, creativemodetab.getDisplayName(), 8.0F, 6.0F, 4210752);
+         this.font.draw(p_98616_, creativemodetab.getDisplayName(), 8.0F, 6.0F, creativemodetab.getLabelColor());
       }
 
    }
@@ -385,7 +_,7 @@
          double d1 = p_98532_ - (double)this.topPos;
 
          for(CreativeModeTab creativemodetab : CreativeModeTab.TABS) {
-            if (this.checkTabClicked(creativemodetab, d0, d1)) {
+            if (creativemodetab != null && this.checkTabClicked(creativemodetab, d0, d1)) {
                return true;
             }
          }
@@ -406,7 +_,7 @@
          this.scrolling = false;
 
          for(CreativeModeTab creativemodetab : CreativeModeTab.TABS) {
-            if (this.checkTabClicked(creativemodetab, d0, d1)) {
+            if (creativemodetab != null && this.checkTabClicked(creativemodetab, d0, d1)) {
                this.selectTab(creativemodetab);
                return true;
             }
@@ -417,12 +_,15 @@
    }
 
    private boolean canScroll() {
+      if (CreativeModeTab.TABS[selectedTab] == null) return false;
       return selectedTab != CreativeModeTab.TAB_INVENTORY.getId() && CreativeModeTab.TABS[selectedTab].canScroll() && this.menu.canScroll();
    }
 
    private void selectTab(CreativeModeTab p_98561_) {
+      if (p_98561_ == null) return;
       int i = selectedTab;
       selectedTab = p_98561_.getId();
+      slotColor = p_98561_.getSlotColor();
       this.quickCraftSlots.clear();
       (this.menu).items.clear();
       if (p_98561_ == CreativeModeTab.TAB_HOTBAR) {
@@ -499,13 +_,15 @@
       }
 
       if (this.searchBox != null) {
-         if (p_98561_ == CreativeModeTab.TAB_SEARCH) {
+         if (p_98561_.hasSearchBar()) {
             this.searchBox.setVisible(true);
             this.searchBox.setCanLoseFocus(false);
             this.searchBox.setFocus(true);
             if (i != p_98561_.getId()) {
                this.searchBox.setValue("");
             }
+            this.searchBox.setWidth(p_98561_.getSearchbarWidth());
+            this.searchBox.x = this.leftPos + (82 /*default left*/ + 89 /*default width*/) - this.searchBox.getWidth();
 
             this.refreshSearchResults();
          } else {
@@ -565,16 +_,34 @@
       this.renderBackground(p_98577_);
       super.render(p_98577_, p_98578_, p_98579_, p_98580_);
 
-      for(CreativeModeTab creativemodetab : CreativeModeTab.TABS) {
-         if (this.checkTabHovering(p_98577_, creativemodetab, p_98578_, p_98579_)) {
+      int start = tabPage * 10;
+      int end = Math.min(CreativeModeTab.TABS.length, ((tabPage + 1) * 10) + 2);
+      if (tabPage != 0) start += 2;
+      boolean rendered = false;
+
+      for (int x = start; x < end; x++) {
+         CreativeModeTab creativemodetab = CreativeModeTab.TABS[x];
+         if (creativemodetab != null && this.checkTabHovering(p_98577_, creativemodetab, p_98578_, p_98579_)) {
+            rendered = true;
             break;
          }
       }
+      if (!rendered && !this.checkTabHovering(p_98577_, CreativeModeTab.TAB_SEARCH, p_98578_, p_98579_))
+         this.checkTabHovering(p_98577_, CreativeModeTab.TAB_INVENTORY, p_98578_, p_98579_);
 
       if (this.destroyItemSlot != null && selectedTab == CreativeModeTab.TAB_INVENTORY.getId() && this.isHovering(this.destroyItemSlot.x, this.destroyItemSlot.y, 16, 16, (double)p_98578_, (double)p_98579_)) {
          this.renderTooltip(p_98577_, TRASH_SLOT_TOOLTIP, p_98578_, p_98579_);
       }
 
+      if (maxPages != 0) {
+          Component page = new TextComponent(String.format("%d / %d", tabPage + 1, maxPages + 1));
+          this.setBlitOffset(300);
+          this.itemRenderer.blitOffset = 300.0F;
+          font.drawShadow(p_98577_, page.getVisualOrderText(), leftPos + (imageWidth / 2) - (font.width(page) / 2), topPos - 44, -1);
+          this.setBlitOffset(0);
+          this.itemRenderer.blitOffset = 0.0F;
+      }
+
       RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       this.renderTooltip(p_98577_, p_98578_, p_98579_);
    }
@@ -609,7 +_,7 @@
             list1.add(1, creativemodetab.getDisplayName().copy().withStyle(ChatFormatting.BLUE));
          }
 
-         this.renderTooltip(p_98590_, list1, p_98591_.getTooltipImage(), p_98592_, p_98593_);
+         this.renderTooltip(p_98590_, list1, p_98591_.getTooltipImage(), p_98592_, p_98593_, p_98591_);
       } else {
          super.renderTooltip(p_98590_, p_98591_, p_98592_, p_98593_);
       }
@@ -620,16 +_,32 @@
       RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
       CreativeModeTab creativemodetab = CreativeModeTab.TABS[selectedTab];
 
-      for(CreativeModeTab creativemodetab1 : CreativeModeTab.TABS) {
+      int start = tabPage * 10;
+      int end = Math.min(CreativeModeTab.TABS.length, ((tabPage + 1) * 10 + 2));
+      if (tabPage != 0) start += 2;
+
+      for (int idx = start; idx < end; idx++) {
          RenderSystem.setShader(GameRenderer::getPositionTexShader);
-         RenderSystem.setShaderTexture(0, CREATIVE_TABS_LOCATION);
-         if (creativemodetab1.getId() != selectedTab) {
+         CreativeModeTab creativemodetab1 = CreativeModeTab.TABS[idx];
+         if (creativemodetab1 != null && creativemodetab1.getId() != selectedTab) {
+            RenderSystem.setShaderTexture(0, creativemodetab1.getTabsImage());
             this.renderTabButton(p_98572_, creativemodetab1);
          }
       }
 
       RenderSystem.setShader(GameRenderer::getPositionTexShader);
-      RenderSystem.setShaderTexture(0, new ResourceLocation("textures/gui/container/creative_inventory/tab_" + creativemodetab.getBackgroundSuffix()));
+      if (tabPage != 0) {
+         if (creativemodetab != CreativeModeTab.TAB_SEARCH) {
+            RenderSystem.setShaderTexture(0, CreativeModeTab.TAB_SEARCH.getTabsImage());
+            renderTabButton(p_98572_, CreativeModeTab.TAB_SEARCH);
+         }
+         if (creativemodetab != CreativeModeTab.TAB_INVENTORY) {
+            RenderSystem.setShaderTexture(0, CreativeModeTab.TAB_INVENTORY.getTabsImage());
+            renderTabButton(p_98572_, CreativeModeTab.TAB_INVENTORY);
+         }
+      }
+
+      RenderSystem.setShaderTexture(0, creativemodetab.getBackgroundImage());
       this.blit(p_98572_, this.leftPos, this.topPos, 0, 0, this.imageWidth, this.imageHeight);
       this.searchBox.render(p_98572_, p_98574_, p_98575_, p_98573_);
       RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
@@ -637,11 +_,14 @@
       int j = this.topPos + 18;
       int k = j + 112;
       RenderSystem.setShader(GameRenderer::getPositionTexShader);
-      RenderSystem.setShaderTexture(0, CREATIVE_TABS_LOCATION);
+      RenderSystem.setShaderTexture(0, creativemodetab.getTabsImage());
       if (creativemodetab.canScroll()) {
          this.blit(p_98572_, i, j + (int)((float)(k - j - 17) * this.scrollOffs), 232 + (this.canScroll() ? 0 : 12), 0, 12, 15);
       }
 
+      if ((creativemodetab == null || creativemodetab.getTabPage() != tabPage) && (creativemodetab != CreativeModeTab.TAB_SEARCH && creativemodetab != CreativeModeTab.TAB_INVENTORY))
+         return;
+
       this.renderTabButton(p_98572_, creativemodetab);
       if (creativemodetab == CreativeModeTab.TAB_INVENTORY) {
          InventoryScreen.renderEntityInInventory(this.leftPos + 88, this.topPos + 45, 20, (float)(this.leftPos + 88 - p_98574_), (float)(this.topPos + 45 - 30 - p_98575_), this.minecraft.player);
@@ -650,6 +_,7 @@
    }
 
    protected boolean checkTabClicked(CreativeModeTab p_98563_, double p_98564_, double p_98565_) {
+      if (p_98563_.getTabPage() != tabPage && p_98563_ != CreativeModeTab.TAB_SEARCH && p_98563_ != CreativeModeTab.TAB_INVENTORY) return false;
       int i = p_98563_.getColumn();
       int j = 28 * i;
       int k = 0;
@@ -718,6 +_,7 @@
          i1 += this.imageHeight - 4;
       }
 
+      RenderSystem.enableBlend(); //Forge: Make sure blend is enabled else tabs show a white border.
       this.blit(p_98582_, l, i1, j, k, 28, 32);
       this.itemRenderer.blitOffset = 100.0F;
       l += 6;
@@ -823,6 +_,11 @@
          return this.items.size() > 45;
       }
 
+      @Override
+      public org.bukkit.inventory.InventoryView getBukkitView() {
+         return null;
+      }
+
       public ItemStack quickMoveStack(Player p_98650_, int p_98651_) {
          if (p_98651_ >= this.slots.size() - 9 && p_98651_ < this.slots.size()) {
             Slot slot = this.slots.get(p_98651_);
@@ -907,6 +_,22 @@
 
       public boolean mayPickup(Player p_98665_) {
          return this.target.mayPickup(p_98665_);
+      }
+
+      @Override
+      public int getSlotIndex() {
+         return this.target.getSlotIndex();
+      }
+
+      @Override
+      public boolean isSameInventory(Slot other) {
+         return this.target.isSameInventory(other);
+      }
+
+      @Override
+      public Slot setBackground(ResourceLocation atlas, ResourceLocation sprite) {
+         this.target.setBackground(atlas, sprite);
+         return this;
       }
    }
 }
