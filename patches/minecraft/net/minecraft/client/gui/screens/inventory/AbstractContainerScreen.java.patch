--- a/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
+++ b/net/minecraft/client/gui/screens/inventory/AbstractContainerScreen.java
@@ -90,6 +_,7 @@
       int i = this.leftPos;
       int j = this.topPos;
       this.renderBg(p_97795_, p_97798_, p_97796_, p_97797_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.ContainerScreenEvent.DrawBackground(this, p_97795_, p_97796_, p_97797_));
       RenderSystem.disableDepthTest();
       super.render(p_97795_, p_97796_, p_97797_, p_97798_);
       PoseStack posestack = RenderSystem.getModelViewStack();
@@ -111,11 +_,12 @@
             this.hoveredSlot = slot;
             int l = slot.x;
             int i1 = slot.y;
-            renderSlotHighlight(p_97795_, l, i1, this.getBlitOffset());
+            renderSlotHighlight(p_97795_, l, i1, this.getBlitOffset(), this.getSlotColor(k));
          }
       }
 
       this.renderLabels(p_97795_, p_97796_, p_97797_);
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.client.event.ContainerScreenEvent.DrawForeground(this, p_97795_, p_97796_, p_97797_));
       ItemStack itemstack = this.draggingItem.isEmpty() ? this.menu.getCarried() : this.draggingItem;
       if (!itemstack.isEmpty()) {
          int l1 = 8;
@@ -155,9 +_,13 @@
    }
 
    public static void renderSlotHighlight(PoseStack p_169607_, int p_169608_, int p_169609_, int p_169610_) {
+       renderSlotHighlight(p_169607_, p_169608_, p_169609_, p_169610_, -2130706433);
+   }
+
+   public static void renderSlotHighlight(PoseStack p_169607_, int p_169608_, int p_169609_, int p_169610_, int slotColor) {
       RenderSystem.disableDepthTest();
       RenderSystem.colorMask(true, true, true, false);
-      fillGradient(p_169607_, p_169608_, p_169609_, p_169608_ + 16, p_169609_ + 16, -2130706433, -2130706433, p_169610_);
+      fillGradient(p_169607_, p_169608_, p_169609_, p_169608_ + 16, p_169609_ + 16, slotColor, slotColor, p_169610_);
       RenderSystem.colorMask(true, true, true, true);
       RenderSystem.enableDepthTest();
    }
@@ -175,8 +_,10 @@
       RenderSystem.applyModelViewMatrix();
       this.setBlitOffset(200);
       this.itemRenderer.blitOffset = 200.0F;
+      net.minecraft.client.gui.Font font = net.minecraftforge.client.RenderProperties.get(p_97783_).getFont(p_97783_);
+      if (font == null) font = this.font;
       this.itemRenderer.renderAndDecorateItem(p_97783_, p_97784_, p_97785_);
-      this.itemRenderer.renderGuiItemDecorations(this.font, p_97783_, p_97784_, p_97785_ - (this.draggingItem.isEmpty() ? 0 : 8), p_97786_);
+      this.itemRenderer.renderGuiItemDecorations(font, p_97783_, p_97784_, p_97785_ - (this.draggingItem.isEmpty() ? 0 : 8), p_97786_);
       this.setBlitOffset(0);
       this.itemRenderer.blitOffset = 0.0F;
    }
@@ -286,7 +_,8 @@
       if (super.mouseClicked(p_97748_, p_97749_, p_97750_)) {
          return true;
       } else {
-         boolean flag = this.minecraft.options.keyPickItem.matchesMouse(p_97750_) && this.minecraft.gameMode.hasInfiniteItems();
+         InputConstants.Key mouseKey = InputConstants.Type.MOUSE.getOrCreate(p_97750_);
+         boolean flag = this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey);
          Slot slot = this.findSlot(p_97748_, p_97749_);
          long i = Util.getMillis();
          this.doubleclick = this.lastClickSlot == slot && i - this.lastClickTime < 250L && this.lastClickButton == p_97750_;
@@ -297,6 +_,7 @@
             int j = this.leftPos;
             int k = this.topPos;
             boolean flag1 = this.hasClickedOutside(p_97748_, p_97749_, j, k, p_97750_);
+            if (slot != null) flag1 = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
             int l = -1;
             if (slot != null) {
                l = slot.index;
@@ -322,7 +_,7 @@
                   }
                } else if (!this.isQuickCrafting) {
                   if (this.menu.getCarried().isEmpty()) {
-                     if (flag) {
+                     if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.slotClicked(slot, l, p_97750_, ClickType.CLONE);
                      } else {
                         boolean flag2 = l != -999 && (InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 340) || InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 344));
@@ -346,7 +_,7 @@
                         this.quickCraftingType = 0;
                      } else if (p_97750_ == 1) {
                         this.quickCraftingType = 1;
-                     } else if (flag) {
+                     } else if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                         this.quickCraftingType = 2;
                      }
                   }
@@ -415,10 +_,13 @@
    }
 
    public boolean mouseReleased(double p_97812_, double p_97813_, int p_97814_) {
+      super.mouseReleased(p_97812_, p_97813_, p_97814_); //Forge, Call parent to release buttons
       Slot slot = this.findSlot(p_97812_, p_97813_);
       int i = this.leftPos;
       int j = this.topPos;
       boolean flag = this.hasClickedOutside(p_97812_, p_97813_, i, j, p_97814_);
+      if (slot != null) flag = false; // Forge, prevent dropping of items through slots outside of GUI boundaries
+      InputConstants.Key mouseKey = InputConstants.Type.MOUSE.getOrCreate(p_97814_);
       int k = -1;
       if (slot != null) {
          k = slot.index;
@@ -432,7 +_,7 @@
          if (hasShiftDown()) {
             if (!this.lastQuickMoved.isEmpty()) {
                for(Slot slot2 : this.menu.slots) {
-                  if (slot2 != null && slot2.mayPickup(this.minecraft.player) && slot2.hasItem() && slot2.container == slot.container && AbstractContainerMenu.canItemQuickReplace(slot2, this.lastQuickMoved, true)) {
+                  if (slot2 != null && slot2.mayPickup(this.minecraft.player) && slot2.hasItem() && slot2.isSameInventory(slot) && AbstractContainerMenu.canItemQuickReplace(slot2, this.lastQuickMoved, true)) {
                      this.slotClicked(slot2, slot2.index, p_97814_, ClickType.QUICK_MOVE);
                   }
                }
@@ -496,7 +_,7 @@
 
             this.slotClicked((Slot)null, -999, AbstractContainerMenu.getQuickcraftMask(2, this.quickCraftingType), ClickType.QUICK_CRAFT);
          } else if (!this.menu.getCarried().isEmpty()) {
-            if (this.minecraft.options.keyPickItem.matchesMouse(p_97814_)) {
+            if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.slotClicked(slot, k, p_97814_, ClickType.CLONE);
             } else {
                boolean flag1 = k != -999 && (InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 340) || InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(), 344));
@@ -538,34 +_,39 @@
    }
 
    public boolean keyPressed(int p_97765_, int p_97766_, int p_97767_) {
+      InputConstants.Key mouseKey = InputConstants.getKey(p_97765_, p_97766_);
       if (super.keyPressed(p_97765_, p_97766_, p_97767_)) {
          return true;
-      } else if (this.minecraft.options.keyInventory.matches(p_97765_, p_97766_)) {
+      } else if (this.minecraft.options.keyInventory.isActiveAndMatches(mouseKey)) {
          this.onClose();
          return true;
       } else {
-         this.checkHotbarKeyPressed(p_97765_, p_97766_);
+         boolean handled = this.checkHotbarKeyPressed(p_97765_, p_97766_);// Forge MC-146650: Needs to return true when the key is handled
          if (this.hoveredSlot != null && this.hoveredSlot.hasItem()) {
-            if (this.minecraft.options.keyPickItem.matches(p_97765_, p_97766_)) {
+            if (this.minecraft.options.keyPickItem.isActiveAndMatches(mouseKey)) {
                this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 0, ClickType.CLONE);
-            } else if (this.minecraft.options.keyDrop.matches(p_97765_, p_97766_)) {
+               handled = true;
+            } else if (this.minecraft.options.keyDrop.isActiveAndMatches(mouseKey)) {
                this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, hasControlDown() ? 1 : 0, ClickType.THROW);
+               handled = true;
             }
+         } else if (this.minecraft.options.keyDrop.isActiveAndMatches(mouseKey)) {
+             handled = true; // Forge MC-146650: Emulate MC bug, so we don't drop from hotbar when pressing drop without hovering over a item.
          }
 
-         return true;
+         return handled;
       }
    }
 
    protected boolean checkHotbarKeyPressed(int p_97806_, int p_97807_) {
       if (this.menu.getCarried().isEmpty() && this.hoveredSlot != null) {
-         if (this.minecraft.options.keySwapOffhand.matches(p_97806_, p_97807_)) {
+         if (this.minecraft.options.keySwapOffhand.isActiveAndMatches(InputConstants.getKey(p_97806_, p_97807_))) {
             this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, 40, ClickType.SWAP);
             return true;
          }
 
          for(int i = 0; i < 9; ++i) {
-            if (this.minecraft.options.keyHotbarSlots[i].matches(p_97806_, p_97807_)) {
+            if (this.minecraft.options.keyHotbarSlots[i].isActiveAndMatches(InputConstants.getKey(p_97806_, p_97807_))) {
                this.slotClicked(this.hoveredSlot, this.hoveredSlot.index, i, ClickType.SWAP);
                return true;
             }
@@ -600,6 +_,18 @@
 
    public T getMenu() {
       return this.menu;
+   }
+
+   @javax.annotation.Nullable
+   public Slot getSlotUnderMouse() { return this.hoveredSlot; }
+   public int getGuiLeft() { return leftPos; }
+   public int getGuiTop() { return topPos; }
+   public int getXSize() { return imageWidth; }
+   public int getYSize() { return imageHeight; }
+
+   protected int slotColor = -2130706433;
+   public int getSlotColor(int index) {
+      return slotColor;
    }
 
    public void onClose() {
