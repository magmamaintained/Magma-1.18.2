--- a/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
+++ b/net/minecraft/client/gui/screens/worldselection/WorldSelectionList.java
@@ -64,6 +_,7 @@
    static final DateFormat DATE_FORMAT = new SimpleDateFormat();
    static final ResourceLocation ICON_MISSING = new ResourceLocation("textures/misc/unknown_server.png");
    static final ResourceLocation ICON_OVERLAY_LOCATION = new ResourceLocation("textures/gui/world_selection.png");
+   private static final ResourceLocation FORGE_EXPERIMENTAL_WARNING_ICON = new ResourceLocation("forge","textures/gui/experimental_warning.png");
    static final Component FROM_NEWER_TOOLTIP_1 = (new TranslatableComponent("selectWorld.tooltip.fromNewerVersion1")).withStyle(ChatFormatting.RED);
    static final Component FROM_NEWER_TOOLTIP_2 = (new TranslatableComponent("selectWorld.tooltip.fromNewerVersion2")).withStyle(ChatFormatting.RED);
    static final Component SNAPSHOT_TOOLTIP_1 = (new TranslatableComponent("selectWorld.tooltip.snapshot1")).withStyle(ChatFormatting.GOLD);
@@ -198,15 +_,16 @@
          }
 
          Component component = this.summary.getInfo();
-         this.minecraft.font.draw(p_101721_, s, (float)(p_101724_ + 32 + 3), (float)(p_101723_ + 1), 16777215);
-         this.minecraft.font.draw(p_101721_, s1, (float)(p_101724_ + 32 + 3), (float)(p_101723_ + 9 + 3), 8421504);
-         this.minecraft.font.draw(p_101721_, component, (float)(p_101724_ + 32 + 3), (float)(p_101723_ + 9 + 9 + 3), 8421504);
+         this.minecraft.font.draw(p_101721_, s, (float) (p_101724_ + 32 + 3), (float) (p_101723_ + 1), 16777215);
+         this.minecraft.font.draw(p_101721_, s1, (float) (p_101724_ + 32 + 3), (float) (p_101723_ + 9 + 3), 8421504);
+         this.minecraft.font.draw(p_101721_, component, (float) (p_101724_ + 32 + 3), (float) (p_101723_ + 9 + 9 + 3), 8421504);
          RenderSystem.setShader(GameRenderer::getPositionTexShader);
          RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
          RenderSystem.setShaderTexture(0, this.icon != null ? this.iconLocation : WorldSelectionList.ICON_MISSING);
          RenderSystem.enableBlend();
          GuiComponent.blit(p_101721_, p_101724_, p_101723_, 0.0F, 0.0F, 32, 32, 32, 32);
          RenderSystem.disableBlend();
+         renderExperimentalWarning(p_101721_, p_101727_, p_101728_, p_101723_, p_101724_);
          if (this.minecraft.options.touchscreen || p_101729_) {
             RenderSystem.setShaderTexture(0, WorldSelectionList.ICON_OVERLAY_LOCATION);
             GuiComponent.fill(p_101721_, p_101724_, p_101723_, p_101724_ + 32, p_101723_ + 32, -1601138544);
@@ -216,30 +_,30 @@
             boolean flag = i < 32;
             int j = flag ? 32 : 0;
             if (this.summary.isLocked()) {
-               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 96.0F, (float)j, 32, 32, 256, 256);
+               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 96.0F, (float) j, 32, 32, 256, 256);
                if (flag) {
                   this.screen.setToolTip(this.minecraft.font.split(WorldSelectionList.WORLD_LOCKED_TOOLTIP, 175));
                }
             } else if (this.summary.requiresManualConversion()) {
-               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 96.0F, (float)j, 32, 32, 256, 256);
+               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 96.0F, (float) j, 32, 32, 256, 256);
                if (flag) {
                   this.screen.setToolTip(this.minecraft.font.split(WorldSelectionList.WORLD_REQUIRES_CONVERSION, 175));
                }
             } else if (this.summary.markVersionInList()) {
-               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 32.0F, (float)j, 32, 32, 256, 256);
+               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 32.0F, (float) j, 32, 32, 256, 256);
                if (this.summary.askToOpenWorld()) {
-                  GuiComponent.blit(p_101721_, p_101724_, p_101723_, 96.0F, (float)j, 32, 32, 256, 256);
+                  GuiComponent.blit(p_101721_, p_101724_, p_101723_, 96.0F, (float) j, 32, 32, 256, 256);
                   if (flag) {
                      this.screen.setToolTip(ImmutableList.of(WorldSelectionList.FROM_NEWER_TOOLTIP_1.getVisualOrderText(), WorldSelectionList.FROM_NEWER_TOOLTIP_2.getVisualOrderText()));
                   }
                } else if (!SharedConstants.getCurrentVersion().isStable()) {
-                  GuiComponent.blit(p_101721_, p_101724_, p_101723_, 64.0F, (float)j, 32, 32, 256, 256);
+                  GuiComponent.blit(p_101721_, p_101724_, p_101723_, 64.0F, (float) j, 32, 32, 256, 256);
                   if (flag) {
                      this.screen.setToolTip(ImmutableList.of(WorldSelectionList.SNAPSHOT_TOOLTIP_1.getVisualOrderText(), WorldSelectionList.SNAPSHOT_TOOLTIP_2.getVisualOrderText()));
                   }
                }
             } else {
-               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 0.0F, (float)j, 32, 32, 256, 256);
+               GuiComponent.blit(p_101721_, p_101724_, p_101723_, 0.0F, (float) j, 32, 32, 256, 256);
             }
          }
 
@@ -251,7 +_,7 @@
          } else {
             WorldSelectionList.this.setSelected(this);
             this.screen.updateButtonStatus(WorldSelectionList.this.getSelectedOpt().isPresent());
-            if (p_101706_ - (double)WorldSelectionList.this.getRowLeft() <= 32.0D) {
+            if (p_101706_ - (double) WorldSelectionList.this.getRowLeft() <= 32.0D) {
                this.joinWorld();
                return true;
             } else if (Util.getMillis() - this.lastClickTime < 250L) {
@@ -314,7 +_,7 @@
                      try {
                         this.loadWorld();
                      } catch (Exception exception) {
-                        WorldSelectionList.LOGGER.error("Failure to open 'future world'", (Throwable)exception);
+                        WorldSelectionList.LOGGER.error("Failure to open 'future world'", (Throwable) exception);
                         this.minecraft.setScreen(new AlertScreen(() -> {
                            this.minecraft.setScreen(this.screen);
                         }, new TranslatableComponent("selectWorld.futureworld.error.title"), new TranslatableComponent("selectWorld.futureworld.error.text")));
@@ -420,7 +_,7 @@
                   Path path = CreateWorldScreen.createTempDataPackDirFromExistingWorld(levelstoragesource$levelstorageaccess.getLevelPath(LevelResource.DATAPACK_DIR), this.minecraft);
                   if (worldgensettings.isOldCustomizedWorld()) {
                      this.minecraft.setScreen(new ConfirmScreen((p_205503_) -> {
-                        this.minecraft.setScreen((Screen)(p_205503_ ? CreateWorldScreen.createFromExisting(this.screen, worldstem, path) : this.screen));
+                        this.minecraft.setScreen((Screen) (p_205503_ ? CreateWorldScreen.createFromExisting(this.screen, worldstem, path) : this.screen));
                      }, new TranslatableComponent("selectWorld.recreate.customized.title"), new TranslatableComponent("selectWorld.recreate.customized.text"), CommonComponents.GUI_PROCEED, CommonComponents.GUI_CANCEL));
                   } else {
                      this.minecraft.setScreen(CreateWorldScreen.createFromExisting(this.screen, worldstem, path));
@@ -456,7 +_,7 @@
                levelstoragesource$levelstorageaccess.close();
             }
          } catch (Exception exception) {
-            WorldSelectionList.LOGGER.error("Unable to recreate world", (Throwable)exception);
+            WorldSelectionList.LOGGER.error("Unable to recreate world", (Throwable) exception);
             this.minecraft.setScreen(new AlertScreen(() -> {
                this.minecraft.setScreen(this.screen);
             }, new TranslatableComponent("selectWorld.recreate.error.title"), new TranslatableComponent("selectWorld.recreate.error.text")));
@@ -524,6 +_,20 @@
 
       public String getLevelName() {
          return this.summary.getLevelName();
+      }
+
+      private void renderExperimentalWarning(PoseStack stack, int mouseX, int mouseY, int top, int left) {
+         if (this.summary.isExperimental()) {
+            int leftStart = left + WorldSelectionList.this.getRowWidth();
+            RenderSystem.setShaderTexture(0, WorldSelectionList.FORGE_EXPERIMENTAL_WARNING_ICON);
+            GuiComponent.blit(stack, leftStart - 36, top, 0.0F, 0.0F, 32, 32, 32, 32);
+            //Reset texture to what it was before
+            RenderSystem.setShaderTexture(0, this.icon != null ? this.iconLocation : WorldSelectionList.ICON_MISSING);
+            if (WorldSelectionList.this.getEntryAtPosition(mouseX, mouseY) == this && mouseX > leftStart - 36 && mouseX < leftStart) {
+               List<net.minecraft.util.FormattedCharSequence> tooltip = Minecraft.getInstance().font.split(new TranslatableComponent("forge.experimentalsettings.tooltip"), 200);
+               WorldSelectionList.this.screen.renderTooltip(stack, tooltip, mouseX, mouseY);
+            }
+         }
       }
    }
 }
