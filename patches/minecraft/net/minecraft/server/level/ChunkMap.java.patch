--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -135,6 +_,24 @@
    private final Queue<Runnable> f_140125_ = Queues.newConcurrentLinkedQueue();
    int f_140126_;
 
+   // CraftBukkit start - recursion-safe executor for Chunk loadCallback() and unloadCallback()
+   public final CallbackExecutor callbackExecutor = new CallbackExecutor();
+   public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
+      private final java.util.Queue<Runnable> queue = new java.util.ArrayDeque<>();
+      @Override
+      public void execute(Runnable runnable) {
+         queue.add(runnable);
+      }
+      @Override
+      public void run() {
+         Runnable task;
+         while ((task = queue.poll()) != null) {
+            task.run();
+         }
+      }
+   };
+   // CraftBukkit end
+
    public ChunkMap(ServerLevel p_143040_, LevelStorageSource.LevelStorageAccess p_143041_, DataFixer p_143042_, StructureManager p_143043_, Executor p_143044_, BlockableEventLoop<Runnable> p_143045_, LightChunkGetter p_143046_, ChunkGenerator p_143047_, ChunkProgressListener p_143048_, ChunkStatusUpdateListener p_143049_, Supplier<DimensionDataStorage> p_143050_, int p_143051_, boolean p_143052_) {
       super(p_143041_.m_197394_(p_143040_.m_46472_()).resolve("region"), p_143042_, p_143052_);
       this.f_140147_ = p_143043_;
@@ -476,6 +_,7 @@
             if (this.f_140131_.remove(p_140182_, p_140183_) && p_203002_ != null) {
                if (p_203002_ instanceof LevelChunk) {
                   ((LevelChunk)p_203002_).m_62913_(false);
+                  net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload(p_203002_));
                }
 
                this.m_140258_(p_203002_);
@@ -630,7 +_,21 @@
 
    private static void m_143064_(ServerLevel p_143065_, List<CompoundTag> p_143066_) {
       if (!p_143066_.isEmpty()) {
-         p_143065_.m_143327_(EntityType.m_147045_(p_143066_, p_143065_));
+         // CraftBukkit start - these are spawned serialized (DefinedStructure) and we don't call an add event below at the moment due to ordering complexities
+         p_143065_.m_143327_(EntityType.m_147045_(p_143066_, p_143065_).filter((entity) -> {
+            boolean needsRemoval = false;
+            net.minecraft.server.dedicated.DedicatedServer server = p_143065_.getCraftServer().getServer();
+            if (!server.m_6997_() && entity instanceof net.minecraft.world.entity.npc.Npc) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            if (!server.m_6998_() && (entity instanceof net.minecraft.world.entity.animal.Animal || entity instanceof net.minecraft.world.entity.animal.WaterAnimal)) {
+               entity.m_146870_();
+               needsRemoval = true;
+            }
+            return !needsRemoval;
+         }));
+         // CraftBukkit end
       }
 
    }
@@ -658,8 +_,14 @@
             levelchunk.m_62952_();
             if (this.f_140132_.add(chunkpos.m_45588_())) {
                levelchunk.m_62913_(true);
+               try {
+               p_140384_.currentlyLoading = levelchunk; // Forge - bypass the future chain when getChunk is called, this prevents deadlocks.
                levelchunk.m_156369_();
                levelchunk.m_187958_(this.f_140133_);
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(levelchunk));
+               } finally {
+                   p_140384_.currentlyLoading = null; // Forge - Stop bypassing the future chain.
+               }
             }
 
             return levelchunk;
@@ -762,6 +_,7 @@
 
             this.f_140133_.m_46473_().m_6174_("chunkSave");
             CompoundTag compoundtag = ChunkSerializer.m_63454_(this.f_140133_, p_140259_);
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkDataEvent.Save(p_140259_, p_140259_.getWorldForge() != null ? p_140259_.getWorldForge() : this.f_140133_, compoundtag));
             this.m_63502_(chunkpos, compoundtag);
             this.m_140229_(chunkpos, chunkstatus.m_62494_());
             return true;
@@ -818,6 +_,7 @@
 
    protected void m_183754_(ServerPlayer p_183755_, ChunkPos p_183756_, MutableObject<ClientboundLevelChunkWithLightPacket> p_183757_, boolean p_183758_, boolean p_183759_) {
       if (p_183755_.f_19853_ == this.f_140133_) {
+         net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_183758_, p_183759_, p_183755_, p_183756_, this.f_140133_);
          if (p_183759_ && !p_183758_) {
             ChunkHolder chunkholder = this.m_140327_(p_183756_.m_45588_());
             if (chunkholder != null) {
@@ -890,7 +_,7 @@
    @Nullable
    private CompoundTag m_140427_(ChunkPos p_140428_) throws IOException {
       CompoundTag compoundtag = this.m_63512_(p_140428_);
-      return compoundtag == null ? null : this.m_188288_(this.f_140133_.m_46472_(), this.f_140137_, compoundtag, this.f_140136_.m_187743_());
+      return compoundtag == null ? null : this.upgradeChunkTag(this.f_140133_.m_46472_(), this.f_140137_, compoundtag, this.f_140136_.m_187743_(), p_140428_, f_140133_); // CraftBukkit
    }
 
    boolean m_183879_(ChunkPos p_183880_) {
@@ -1070,7 +_,8 @@
    }
 
    protected void m_140199_(Entity p_140200_) {
-      if (!(p_140200_ instanceof EnderDragonPart)) {
+      org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+      if (!(p_140200_ instanceof net.minecraftforge.entity.PartEntity)) {
          EntityType<?> entitytype = p_140200_.m_6095_();
          int i = entitytype.m_20681_() * 16;
          if (i != 0) {
@@ -1098,6 +_,7 @@
    }
 
    protected void m_140331_(Entity p_140332_) {
+      org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
       if (p_140332_ instanceof ServerPlayer) {
          ServerPlayer serverplayer = (ServerPlayer)p_140332_;
          this.m_140192_(serverplayer, false);
@@ -1239,7 +_,7 @@
       public final Set<ServerPlayerConnection> f_140475_ = Sets.newIdentityHashSet();
 
       public TrackedEntity(Entity p_140478_, int p_140479_, int p_140480_, boolean p_140481_) {
-         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_);
+         this.f_140471_ = new ServerEntity(ChunkMap.this.f_140133_, p_140478_, p_140480_, p_140481_, this::m_140489_, f_140475_); // CraftBukkit
          this.f_140472_ = p_140478_;
          this.f_140473_ = p_140479_;
          this.f_140474_ = SectionPos.m_123194_(p_140478_);
@@ -1280,6 +_,7 @@
       }
 
       public void m_140485_(ServerPlayer p_140486_) {
+         org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
          if (this.f_140475_.remove(p_140486_.f_8906_)) {
             this.f_140471_.m_8534_(p_140486_);
          }
@@ -1287,12 +_,20 @@
       }
 
       public void m_140497_(ServerPlayer p_140498_) {
+         org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
          if (p_140498_ != this.f_140472_) {
-            Vec3 vec3 = p_140498_.m_20182_().m_82546_(this.f_140471_.m_8540_());
+            Vec3 vec3 = p_140498_.m_20182_().m_82546_(this.f_140472_.m_20182_()); // MC-155077, SPIGOT-5113
             double d0 = (double)Math.min(this.m_140496_(), (ChunkMap.this.f_140126_ - 1) * 16);
             double d1 = vec3.f_82479_ * vec3.f_82479_ + vec3.f_82481_ * vec3.f_82481_;
             double d2 = d0 * d0;
             boolean flag = d1 <= d2 && this.f_140472_.m_6459_(p_140498_);
+
+            // CraftBukkit start - respect vanish API
+            if (!p_140498_.getBukkitEntity().canSee(this.f_140472_.getBukkitEntity())) {
+               flag = false;
+            }
+            // CraftBukkit end
+
             if (flag) {
                if (this.f_140475_.add(p_140498_.f_8906_)) {
                   this.f_140471_.m_8541_(p_140498_);
