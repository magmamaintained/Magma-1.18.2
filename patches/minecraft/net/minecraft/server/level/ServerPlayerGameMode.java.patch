--- a/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -51,6 +_,13 @@
       if (p_143474_ == this.gameModeForPlayer) {
          return false;
       } else {
+         // CraftBukkit start
+         org.bukkit.event.player.PlayerGameModeChangeEvent event = new org.bukkit.event.player.PlayerGameModeChangeEvent(player.getBukkitEntity(), org.bukkit.GameMode.getByValue(p_143474_.getId()));
+         level.getCraftServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return false;
+         }
+         // CraftBukkit end
          this.setGameModeForPlayer(p_143474_, this.gameModeForPlayer);
          return true;
       }
@@ -61,7 +_,7 @@
       this.gameModeForPlayer = p_9274_;
       p_9274_.updatePlayerAbilities(this.player.getAbilities());
       this.player.onUpdateAbilities();
-      this.player.server.getPlayerList().broadcastAll(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.UPDATE_GAME_MODE, this.player));
+      this.player.server.getPlayerList().broadcastAll(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.UPDATE_GAME_MODE, this.player), this.player); // CraftBukkit
       this.level.updateSleepingPlayerList();
    }
 
@@ -83,7 +_,7 @@
    }
 
    public void tick() {
-      ++this.gameTicks;
+      this.gameTicks = net.minecraft.server.MinecraftServer.currentTick; // CraftBukkit;
       if (this.hasDelayedDestroy) {
          BlockState blockstate = this.level.getBlockState(this.delayedDestroyPos);
          if (blockstate.isAir()) {
@@ -125,7 +_,13 @@
       double d1 = this.player.getY() - ((double)p_9282_.getY() + 0.5D) + 1.5D;
       double d2 = this.player.getZ() - ((double)p_9282_.getZ() + 0.5D);
       double d3 = d0 * d0 + d1 * d1 + d2 * d2;
-      if (d3 > 36.0D) {
+      net.minecraftforge.event.entity.player.PlayerInteractEvent.LeftClickBlock event = net.minecraftforge.common.ForgeHooks.onLeftClickBlock(player, p_9282_, p_9284_);
+      if (event.isCanceled() || (!this.isCreative() && event.getUseItem() == net.minecraftforge.eventbus.api.Event.Result.DENY)) { // Restore block and te data
+         player.connection.send(new ClientboundBlockBreakAckPacket(p_9282_, level.getBlockState(p_9282_), p_9283_, false, "mod canceled"));
+         level.sendBlockUpdated(p_9282_, level.getBlockState(p_9282_), level.getBlockState(p_9282_), 3);
+         return;
+      }
+      if (!this.player.canInteractWith(p_9282_, 1)) {
          BlockState blockstate1;
          if (this.player.level.getServer() != null && this.player.chunkPosition().getChessboardDistance(new ChunkPos(p_9282_)) < this.player.level.getServer().getPlayerList().getViewDistance()) {
             blockstate1 = this.level.getBlockState(p_9282_);
@@ -139,9 +_,31 @@
       } else {
          if (p_9283_ == ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK) {
             if (!this.level.mayInteract(this.player, p_9282_)) {
+               // CraftBukkit start - fire PlayerInteractEvent
+               org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerInteractEvent(this.player, org.bukkit.event.block.Action.LEFT_CLICK_BLOCK, p_9282_, p_9284_, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
                this.player.connection.send(new ClientboundBlockBreakAckPacket(p_9282_, this.level.getBlockState(p_9282_), p_9283_, false, "may not interact"));
-               return;
-            }
+               // Update any tile entity data for this block
+               BlockEntity tileentity = level.getBlockEntity(p_9282_);
+               if (tileentity != null) {
+                  this.player.connection.send(tileentity.getUpdatePacket());
+               }
+               // CraftBukkit end
+               return;
+            }
+
+            // CraftBukkit start
+            org.bukkit.event.player.PlayerInteractEvent eventCB = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerInteractEvent(this.player, org.bukkit.event.block.Action.LEFT_CLICK_BLOCK, p_9282_, p_9284_, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
+            if (eventCB.isCancelled()) {
+               // Let the client know the block still exists
+               this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, p_9282_));
+               // Update any tile entity data for this block
+               BlockEntity tileentity = this.level.getBlockEntity(p_9282_);
+               if (tileentity != null) {
+                  this.player.connection.send(tileentity.getUpdatePacket());
+               }
+               return;
+            }
+            // CraftBukkit end
 
             if (this.isCreative()) {
                this.destroyAndAck(p_9282_, p_9283_, "creative destroy");
@@ -156,11 +_,44 @@
             this.destroyProgressStart = this.gameTicks;
             float f = 1.0F;
             BlockState blockstate = this.level.getBlockState(p_9282_);
-            if (!blockstate.isAir()) {
+            // CraftBukkit start - Swings at air do *NOT* exist.
+            if (eventCB.useInteractedBlock() == org.bukkit.event.Event.Result.DENY) {
+               // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+               BlockState data = this.level.getBlockState(p_9282_);
+               if (data.getBlock() instanceof net.minecraft.world.level.block.DoorBlock) {
+                  // For some reason *BOTH* the bottom/top part have to be marked updated.
+                  boolean bottom = data.getValue(net.minecraft.world.level.block.DoorBlock.HALF) == net.minecraft.world.level.block.state.properties.DoubleBlockHalf.LOWER;
+                  this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, p_9282_));
+                  this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, bottom ? p_9282_.above() : p_9282_.below()));
+               } else if (data.getBlock() instanceof net.minecraft.world.level.block.TrapDoorBlock) {
+                  this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, p_9282_));
+               }
+            } else if (!blockstate.isAir()) {
+               if (event.getUseBlock() != net.minecraftforge.eventbus.api.Event.Result.DENY)
                blockstate.attack(this.level, p_9282_, this.player);
                f = blockstate.getDestroyProgress(this.player, this.player.level, p_9282_);
             }
 
+            if (eventCB.useItemInHand() == org.bukkit.event.Event.Result.DENY) {
+               // If we 'insta destroyed' then the client needs to be informed.
+               if (f > 1.0f) {
+                  this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, p_9282_));
+               }
+               return;
+            }
+            org.bukkit.event.block.BlockDamageEvent blockEvent = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callBlockDamageEvent(this.player, p_9282_, this.player.getInventory().getSelected(), f >= 1.0f);
+
+            if (blockEvent.isCancelled()) {
+               // Let the client know the block still exists
+               this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, p_9282_));
+               return;
+            }
+
+            if (blockEvent.getInstaBreak()) {
+               f = 2.0f;
+            }
+            // CraftBukkit end
+
             if (!blockstate.isAir() && f >= 1.0F) {
                this.destroyAndAck(p_9282_, p_9283_, "insta mine");
             } else {
@@ -201,13 +_,14 @@
          } else if (p_9283_ == ServerboundPlayerActionPacket.Action.ABORT_DESTROY_BLOCK) {
             this.isDestroyingBlock = false;
             if (!Objects.equals(this.destroyPos, p_9282_)) {
-               LOGGER.warn("Mismatch in destroy block pos: {} {}", this.destroyPos, p_9282_);
+               LOGGER.debug("Mismatch in destroy block pos: {} {}", this.destroyPos, p_9282_); // CraftBukkit - SPIGOT-5457 sent by client when interact event cancelled
                this.level.destroyBlockProgress(this.player.getId(), this.destroyPos, -1);
                this.player.connection.send(new ClientboundBlockBreakAckPacket(this.destroyPos, this.level.getBlockState(this.destroyPos), p_9283_, true, "aborted mismatched destroying"));
             }
 
             this.level.destroyBlockProgress(this.player.getId(), p_9282_, -1);
             this.player.connection.send(new ClientboundBlockBreakAckPacket(p_9282_, this.level.getBlockState(p_9282_), p_9283_, true, "aborted destroying"));
+            org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callBlockDamageAbortEvent(this.player, p_9282_, this.player.getInventory().getSelected()); // CraftBukkit
          }
 
       }
@@ -217,45 +_,153 @@
       if (this.destroyBlock(p_9287_)) {
          this.player.connection.send(new ClientboundBlockBreakAckPacket(p_9287_, this.level.getBlockState(p_9287_), p_9288_, true, p_9289_));
       } else {
-         this.player.connection.send(new ClientboundBlockBreakAckPacket(p_9287_, this.level.getBlockState(p_9287_), p_9288_, false, p_9289_));
+         this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, p_9287_)); // CraftBukkit - SPIGOT-5196
       }
 
    }
 
+   //Magma start - fix mixin inject
+   private @Nullable org.bukkit.block.Block destroyBlock_bblock;
+   private @Nullable java.util.Optional<org.bukkit.event.block.BlockBreakEvent> destroyBlock_event;
    public boolean destroyBlock(BlockPos p_9281_) {
-      BlockState blockstate = this.level.getBlockState(p_9281_);
-      if (!this.player.getMainHandItem().getItem().canAttackBlock(blockstate, this.level, p_9281_, this.player)) {
+      BlockState blockState = this.level.getBlockState(p_9281_);
+      // CraftBukkit start - fire BlockBreakEvent
+      destroyBlock_bblock = org.bukkit.craftbukkit.v1_18_R2.block.CraftBlock.at(level, p_9281_);
+      destroyBlock_event = isSwordNoBreak(p_9281_, blockState, destroyBlock_bblock);
+
+      if (destroyBlock_event.isEmpty()) {
+         return false;
+      }
+      // CraftBukkit end
+
+      if (false && !this.player.getMainHandItem().getItem().canAttackBlock(blockState, this.level, p_9281_, this.player)) { // CraftBukkit - false
          return false;
       } else {
-         BlockEntity blockentity = this.level.getBlockEntity(p_9281_);
-         Block block = blockstate.getBlock();
+         blockState = this.level.getBlockState(p_9281_); // CraftBukkit - update state from plugins
+         if (blockState.isAir()) return false; // CraftBukkit - A plugin set block to air without cancelling
+         BlockEntity tileentity = this.level.getBlockEntity(p_9281_);
+         Block block = blockState.getBlock();
+
          if (block instanceof GameMasterBlock && !this.player.canUseGameMasterBlocks()) {
-            this.level.sendBlockUpdated(p_9281_, blockstate, blockstate, 3);
+            this.level.sendBlockUpdated(p_9281_, blockState, blockState, 3);
+            return false;
+         } else if (player.getMainHandItem().onBlockStartBreak(p_9281_, player)) { //Magma - add missing if statement
             return false;
          } else if (this.player.blockActionRestricted(this.level, p_9281_, this.gameModeForPlayer)) {
             return false;
          } else {
-            block.playerWillDestroy(this.level, p_9281_, blockstate, this.player);
-            boolean flag = this.level.removeBlock(p_9281_, false);
+            // CraftBukkit start
+            org.bukkit.block.BlockState state = destroyBlock_bblock.getState();
+            level.captureDrops = new java.util.ArrayList<>();
+            // CraftBukkit end
+            boolean flag = removeBlock(p_9281_, false);
+            BlockState blockstate = blockState;
+
             if (flag) {
-               block.destroy(this.level, p_9281_, blockstate);
+               block.destroy(this.level, p_9281_, blockState);
             }
-
+            
             if (this.isCreative()) {
-               return true;
+               // return true; // CraftBukkit
             } else {
                ItemStack itemstack = this.player.getMainHandItem();
                ItemStack itemstack1 = itemstack.copy();
-               boolean flag1 = this.player.hasCorrectToolForDrops(blockstate);
+               boolean flag1 = blockstate.canHarvestBlock(this.level, p_9281_, this.player);
+
                itemstack.mineBlock(this.level, blockstate, p_9281_, this.player);
-               if (flag && flag1) {
-                  block.playerDestroy(this.level, this.player, p_9281_, blockstate, blockentity, itemstack1);
+               if (itemstack.isEmpty() && !itemstack1.isEmpty())
+                  net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this.player, itemstack1, InteractionHand.MAIN_HAND);
+
+               if (flag1 && flag && destroyBlock_event.get().isDropItems()) { // CraftBukkit - Check if block should drop items
+                  block.playerDestroy(this.level, this.player, p_9281_, blockstate, tileentity, itemstack1);
                }
 
-               return true;
-            }
-         }
-      }
+               // return true; // CraftBukkit
+            }
+            // CraftBukkit start
+            if (destroyBlock_event.get().isDropItems()) {
+               org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.handleBlockDropItemEvent(destroyBlock_bblock, state, this.player, level.captureDrops);
+            }
+            level.captureDrops = null;
+
+            // Drop event experience
+            if (flag && !destroyBlock_event.isEmpty()) {
+               blockState.getBlock().popExperience(this.level, p_9281_, destroyBlock_event.get().getExpToDrop());
+            }
+
+            org.magmafoundation.magma.util.LogUtils.removeHolder(p_9281_);
+
+            return true;
+            // CraftBukkit end
+         }
+      }
+   }
+
+   private java.util.Optional<org.bukkit.event.block.BlockBreakEvent> isSwordNoBreak(BlockPos p_9281_, BlockState blockState, org.bukkit.block.Block bblock) {
+      org.bukkit.event.block.BlockBreakEvent event = null;
+      if (this.player instanceof ServerPlayer) {
+         // Sword + Creative mode pre-cancel
+         boolean isSwordNoBreak = !this.player.getMainHandItem().getItem().canAttackBlock(blockState, this.level, p_9281_, this.player);
+
+         // Tell client the block is gone immediately then process events
+         // Don't tell the client if its a creative sword break because its not broken!
+         if (level.getBlockEntity(p_9281_) == null && !isSwordNoBreak) {
+            net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket packet = new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(p_9281_, Blocks.AIR.defaultBlockState());
+            this.player.connection.send(packet);
+         }
+
+         // Magma start
+         event = new org.bukkit.event.block.BlockBreakEvent(bblock, this.player.getBukkitEntity());
+         
+         int exp = net.minecraftforge.common.ForgeHooks.onBlockBreakEvent(level, gameModeForPlayer, player, p_9281_);
+
+         if (exp == -1) {
+            return java.util.Optional.empty();
+         }
+
+         event.setExpToDrop(exp);
+         // Magma end
+
+         // Sword + Creative mode pre-cancel
+         event.setCancelled(isSwordNoBreak);
+
+         // Calculate default block experience
+         BlockState nmsData = this.level.getBlockState(p_9281_);
+         Block nmsBlock = nmsData.getBlock();
+
+         ItemStack itemstack = this.player.getItemBySlot(net.minecraft.world.entity.EquipmentSlot.MAINHAND);
+
+         this.level.getCraftServer().getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            if (isSwordNoBreak) {
+               return java.util.Optional.empty();
+            }
+            // Let the client know the block still exists
+            this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(this.level, p_9281_));
+
+            // Brute force all possible updates
+            for (Direction dir : Direction.values()) {
+               this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(level, p_9281_.relative(dir)));
+            }
+
+            // Update any tile entity data for this block
+            BlockEntity tileentity = this.level.getBlockEntity(p_9281_);
+            if (tileentity != null) {
+               this.player.connection.send(tileentity.getUpdatePacket());
+            }
+            return java.util.Optional.empty();
+         }
+      }
+      return java.util.Optional.of(event);
+   }
+   //Magma end
+
+   private boolean removeBlock(BlockPos p_180235_1_, boolean canHarvest) {
+      BlockState state = this.level.getBlockState(p_180235_1_);
+      boolean removed = state.onDestroyedByPlayer(this.level, p_180235_1_, this.player, canHarvest, this.level.getFluidState(p_180235_1_));
+      if (removed)
+         state.getBlock().destroy(this.level, p_180235_1_, state);
+      return removed;
    }
 
    public InteractionResult useItem(ServerPlayer p_9262_, Level p_9263_, ItemStack p_9264_, InteractionHand p_9265_) {
@@ -264,6 +_,8 @@
       } else if (p_9262_.getCooldowns().isOnCooldown(p_9264_.getItem())) {
          return InteractionResult.PASS;
       } else {
+         InteractionResult cancelResult = net.minecraftforge.common.ForgeHooks.onItemRightClick(p_9262_, p_9265_);
+         if (cancelResult != null) return cancelResult;
          int i = p_9264_.getCount();
          int j = p_9264_.getDamageValue();
          InteractionResultHolder<ItemStack> interactionresultholder = p_9264_.use(p_9263_, p_9262_, p_9265_);
@@ -294,50 +_,106 @@
       }
    }
 
+   //Magma start - rewrote method to be mixin friendly
+   private InteractionResult useItemOn_result = InteractionResult.PASS;
+   private boolean useItemOn_cancelledBlock = false;
+   private org.bukkit.event.player.PlayerInteractEvent eventCB;
+   public boolean interactResult = false;
+   public boolean firedInteract = false;
+   public BlockPos interactPosition;
+   public InteractionHand interactHand;
+   public ItemStack interactItemStack;
    public InteractionResult useItemOn(ServerPlayer p_9266_, Level p_9267_, ItemStack p_9268_, InteractionHand p_9269_, BlockHitResult p_9270_) {
-      BlockPos blockpos = p_9270_.getBlockPos();
-      BlockState blockstate = p_9267_.getBlockState(blockpos);
-      if (this.gameModeForPlayer == GameType.SPECTATOR) {
-         MenuProvider menuprovider = blockstate.getMenuProvider(p_9267_, blockpos);
-         if (menuprovider != null) {
-            p_9266_.openMenu(menuprovider);
-            return InteractionResult.SUCCESS;
-         } else {
-            return InteractionResult.PASS;
-         }
-      } else {
-         boolean flag = !p_9266_.getMainHandItem().isEmpty() || !p_9266_.getOffhandItem().isEmpty();
-         boolean flag1 = p_9266_.isSecondaryUseActive() && flag;
-         ItemStack itemstack = p_9268_.copy();
-         if (!flag1) {
-            InteractionResult interactionresult = blockstate.use(p_9267_, p_9266_, p_9269_, p_9270_);
-            if (interactionresult.consumesAction()) {
-               CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
-               return interactionresult;
+      try {
+         BlockPos blockpos = p_9270_.getBlockPos();
+         BlockState blockstate = p_9267_.getBlockState(blockpos);
+
+         net.minecraftforge.event.entity.player.PlayerInteractEvent.RightClickBlock event = net.minecraftforge.common.ForgeHooks.onRightClickBlock(p_9266_, p_9269_, blockpos, p_9270_);
+         if (event.isCanceled())
+            return event.getCancellationResult();
+
+         if (this.gameModeForPlayer == GameType.SPECTATOR)
+            useItemOn_cancelledBlock = !(blockstate.getMenuProvider(p_9267_, blockpos) instanceof MenuProvider);
+
+         if (p_9266_.getCooldowns().isOnCooldown(p_9268_.getItem()))
+            useItemOn_cancelledBlock = true;
+
+         eventCB = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerInteractEvent(p_9266_, org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK, blockpos, p_9270_.getDirection(), p_9268_, useItemOn_cancelledBlock, p_9269_);
+         firedInteract = true;
+         interactResult = eventCB.useItemInHand() == org.bukkit.event.Event.Result.DENY;
+         interactPosition = blockpos.immutable();
+         interactHand = p_9269_;
+         interactItemStack = p_9268_.copy();
+         if (eventCB.useInteractedBlock() == org.bukkit.event.Event.Result.DENY)
+            bukkit_useItemOn(p_9266_, p_9267_, p_9268_, p_9269_, p_9270_, blockpos, blockstate);
+         else if (this.gameModeForPlayer == GameType.SPECTATOR) {
+            MenuProvider menuprovider = blockstate.getMenuProvider(p_9267_, blockpos);
+            if (menuprovider != null) {
+               p_9266_.openMenu(menuprovider);
+               return InteractionResult.SUCCESS;
+            } else {
+               return InteractionResult.PASS;
             }
-         }
-
-         if (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_.getItem())) {
+         } else {
             UseOnContext useoncontext = new UseOnContext(p_9266_, p_9269_, p_9270_);
-            InteractionResult interactionresult1;
-            if (this.isCreative()) {
-               int i = p_9268_.getCount();
-               interactionresult1 = p_9268_.useOn(useoncontext);
-               p_9268_.setCount(i);
-            } else {
-               interactionresult1 = p_9268_.useOn(useoncontext);
-            }
-
-            if (interactionresult1.consumesAction()) {
-               CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
-            }
-
-            return interactionresult1;
-         } else {
-            return InteractionResult.PASS;
+            if (event.getUseItem() != net.minecraftforge.eventbus.api.Event.Result.DENY) {
+               InteractionResult result = p_9268_.onItemUseFirst(useoncontext);
+               if (result != InteractionResult.PASS) return result;
+            }
+            boolean flag = !p_9266_.getMainHandItem().isEmpty() || !p_9266_.getOffhandItem().isEmpty();
+            boolean flag1 = (p_9266_.isSecondaryUseActive() && flag) && !(p_9266_.getMainHandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_) && p_9266_.getOffhandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_));
+            ItemStack itemstack = p_9268_.copy();
+            if (event.getUseBlock() == net.minecraftforge.eventbus.api.Event.Result.ALLOW || (event.getUseBlock() != net.minecraftforge.eventbus.api.Event.Result.DENY && !flag1)) {
+               InteractionResult interactionResult = blockstate.use(p_9267_, p_9266_, p_9269_, p_9270_);
+               if (interactionResult.consumesAction()) {
+                  CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
+                  return interactionResult;
+               }
+            }
+
+            if (event.getUseItem() == net.minecraftforge.eventbus.api.Event.Result.ALLOW || (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_.getItem()))) {
+               if (event.getUseItem() == net.minecraftforge.eventbus.api.Event.Result.DENY) return InteractionResult.PASS;
+               InteractionResult interactionresult1;
+               if (this.isCreative()) {
+                  int i = p_9268_.getCount();
+                  interactionresult1 = p_9268_.useOn(useoncontext);
+                  p_9268_.setCount(i);
+               } else {
+                  interactionresult1 = p_9268_.useOn(useoncontext);
+               }
+
+               if (interactionresult1.consumesAction()) {
+                  CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
+               }
+
+               return interactionresult1;
+            }
          }
-      }
-   }
+         return useItemOn_result;
+      } finally {
+         useItemOn_result = InteractionResult.PASS;
+         useItemOn_cancelledBlock = false;
+         eventCB = null;
+      }
+   }
+
+   private void bukkit_useItemOn(ServerPlayer p_9266_, Level p_9267_, ItemStack p_9268_, InteractionHand p_9269_, BlockHitResult p_9270_, BlockPos blockpos, BlockState blockstate) {
+      // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+      if (blockstate.getBlock() instanceof net.minecraft.world.level.block.DoorBlock) {
+         boolean bottom = blockstate.getValue(net.minecraft.world.level.block.DoorBlock.HALF) == net.minecraft.world.level.block.state.properties.DoubleBlockHalf.LOWER;
+         p_9266_.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(p_9267_, bottom ? blockpos.above() : blockpos.below()));
+      } else if (blockstate.getBlock() instanceof net.minecraft.world.level.block.CakeBlock) {
+         p_9266_.getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
+      } else if (interactItemStack.getItem() instanceof net.minecraft.world.item.DoubleHighBlockItem) {
+         // send a correcting update to the client, as it already placed the upper half of the bisected item
+         p_9266_.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(p_9267_, blockpos.relative(p_9270_.getDirection()).above()));
+         // send a correcting update to the client for the block above as well, this because of replaceable blocks (such as grass, sea grass etc)
+         p_9266_.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket(p_9267_, blockpos.above()));
+      }
+      p_9266_.getBukkitEntity().updateInventory(); // SPIGOT-2867
+      useItemOn_result = (eventCB.useItemInHand() != org.bukkit.event.Event.Result.ALLOW) ? InteractionResult.SUCCESS : InteractionResult.PASS;
+   }
+   //Magma end
 
    public void setLevel(ServerLevel p_9261_) {
       this.level = p_9261_;
