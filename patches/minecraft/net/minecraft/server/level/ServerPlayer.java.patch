--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -174,7 +_,7 @@
    private Vec3 enteredNetherPosition;
    @Nullable
    private Vec3 enteredLavaOnVehiclePosition;
-   private SectionPos lastSectionPos = SectionPos.of(0, 0, 0);
+   private SectionPos lastSectionPos = SectionPos.of( 0, 0, 0 );
    private ResourceKey<Level> respawnDimension = Level.OVERWORLD;
    @Nullable
    private BlockPos respawnPosition;
@@ -185,36 +_,36 @@
    private boolean allowsListing = true;
    private final ContainerSynchronizer containerSynchronizer = new ContainerSynchronizer() {
       public void sendInitialData(AbstractContainerMenu p_143448_, NonNullList<ItemStack> p_143449_, ItemStack p_143450_, int[] p_143451_) {
-         ServerPlayer.this.connection.send(new ClientboundContainerSetContentPacket(p_143448_.containerId, p_143448_.incrementStateId(), p_143449_, p_143450_));
+         ServerPlayer.this.connection.send( new ClientboundContainerSetContentPacket( p_143448_.containerId, p_143448_.incrementStateId(), p_143449_, p_143450_ ) );
 
-         for(int i = 0; i < p_143451_.length; ++i) {
-            this.broadcastDataValue(p_143448_, i, p_143451_[i]);
+         for (int i = 0; i < p_143451_.length; ++i) {
+            this.broadcastDataValue( p_143448_, i, p_143451_[i] );
          }
 
       }
 
       public void sendSlotChange(AbstractContainerMenu p_143441_, int p_143442_, ItemStack p_143443_) {
-         ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(p_143441_.containerId, p_143441_.incrementStateId(), p_143442_, p_143443_));
+         ServerPlayer.this.connection.send( new ClientboundContainerSetSlotPacket( p_143441_.containerId, p_143441_.incrementStateId(), p_143442_, p_143443_ ) );
       }
 
       public void sendCarriedChange(AbstractContainerMenu p_143445_, ItemStack p_143446_) {
-         ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(-1, p_143445_.incrementStateId(), -1, p_143446_));
+         ServerPlayer.this.connection.send( new ClientboundContainerSetSlotPacket( -1, p_143445_.incrementStateId(), -1, p_143446_ ) );
       }
 
       public void sendDataChange(AbstractContainerMenu p_143437_, int p_143438_, int p_143439_) {
-         this.broadcastDataValue(p_143437_, p_143438_, p_143439_);
+         this.broadcastDataValue( p_143437_, p_143438_, p_143439_ );
       }
 
       private void broadcastDataValue(AbstractContainerMenu p_143455_, int p_143456_, int p_143457_) {
-         ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(p_143455_.containerId, p_143456_, p_143457_));
+         ServerPlayer.this.connection.send( new ClientboundContainerSetDataPacket( p_143455_.containerId, p_143456_, p_143457_ ) );
       }
    };
    private final ContainerListener containerListener = new ContainerListener() {
       public void slotChanged(AbstractContainerMenu p_143466_, int p_143467_, ItemStack p_143468_) {
-         Slot slot = p_143466_.getSlot(p_143467_);
+         Slot slot = p_143466_.getSlot( p_143467_ );
          if (!(slot instanceof ResultSlot)) {
             if (slot.container == ServerPlayer.this.getInventory()) {
-               CriteriaTriggers.INVENTORY_CHANGED.trigger(ServerPlayer.this, ServerPlayer.this.getInventory(), p_143468_);
+               CriteriaTriggers.INVENTORY_CHANGED.trigger( ServerPlayer.this, ServerPlayer.this.getInventory(), p_143468_ );
             }
 
          }
@@ -227,22 +_,88 @@
    public int latency;
    public boolean wonGame;
 
+   // CraftBukkit start
+   public String displayName;
+   public Component listName;
+   public org.bukkit.Location compassTarget;
+   public int newExp = 0;
+   public int newLevel = 0;
+   public int newTotalExp = 0;
+   public boolean keepLevel = false;
+   public double maxHealthCache;
+   public boolean joining = true;
+   public boolean sentListPacket = false;
+   public Integer clientViewDistance;
+   public String kickLeaveMessage = null; // SPIGOT-3034: Forward leave message to PlayerQuitEvent
+   public String locale = "en_us"; // CraftBukkit - add, lowercase
+
+   @Override
+   public org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer getBukkitEntity() {
+      return (org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer) super.getBukkitEntity();
+   }
+
+   // CraftBukkit end
+
    public ServerPlayer(MinecraftServer p_143384_, ServerLevel p_143385_, GameProfile p_143386_) {
-      super(p_143385_, p_143385_.getSharedSpawnPos(), p_143385_.getSharedSpawnAngle(), p_143386_);
-      this.textFilter = p_143384_.createTextFilterForPlayer(this);
-      this.gameMode = p_143384_.createGameModeForPlayer(this);
+      super( p_143385_, p_143385_.getSharedSpawnPos(), p_143385_.getSharedSpawnAngle(), p_143386_ );
+      this.textFilter = p_143384_.createTextFilterForPlayer( this );
+      this.gameMode = p_143384_.createGameModeForPlayer( this );
       this.server = p_143384_;
-      this.stats = p_143384_.getPlayerList().getPlayerStats(this);
-      this.advancements = p_143384_.getPlayerList().getPlayerAdvancements(this);
+      this.stats = p_143384_.getPlayerList().getPlayerStats( this );
+      this.advancements = p_143384_.getPlayerList().getPlayerAdvancements( this );
       this.maxUpStep = 1.0F;
-      this.fudgeSpawnLocation(p_143385_);
-   }
+      this.fudgeSpawnLocation( p_143385_ );
+
+      // CraftBukkit start
+      this.displayName = this.getScoreboardName();
+      this.bukkitPickUpLoot = true;
+      this.maxHealthCache = this.getMaxHealth();
+   }
+
+   // Yes, this doesn't match Vanilla, but it's the best we can do for now.
+   // If this is an issue, PRs are welcome
+   public final BlockPos getSpawnPoint(ServerLevel worldserver) {
+      BlockPos blockposition = worldserver.getSharedSpawnPos();
+
+      if (worldserver.dimensionType().hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
+         int i = Math.max( 0, this.server.getSpawnRadius( worldserver ) );
+         int j = Mth.floor( worldserver.getWorldBorder().getDistanceToBorder( (double) blockposition.getX(), (double) blockposition.getZ() ) );
+
+         if (j < i) {
+            i = j;
+         }
+
+         if (j <= 1) {
+            i = 1;
+         }
+
+         long k = (long) (i * 2 + 1);
+         long l = k * k;
+         int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+         int j1 = this.getCoprime( i1 );
+         int k1 = (new Random()).nextInt( i1 );
+
+         for (int l1 = 0; l1 < i1; ++l1) {
+            int i2 = (k1 + j1 * l1) % i1;
+            int j2 = i2 % (i * 2 + 1);
+            int k2 = i2 / (i * 2 + 1);
+            BlockPos blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos( worldserver, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i );
+
+            if (blockposition1 != null) {
+               return blockposition1;
+            }
+         }
+      }
+
+      return blockposition;
+   }
+   // CraftBukkit end
 
    private void fudgeSpawnLocation(ServerLevel p_9202_) {
       BlockPos blockpos = p_9202_.getSharedSpawnPos();
-      if (p_9202_.dimensionType().hasSkyLight() && p_9202_.getServer().getWorldData().getGameType() != GameType.ADVENTURE) {
-         int i = Math.max(0, this.server.getSpawnRadius(p_9202_));
-         int j = Mth.floor(p_9202_.getWorldBorder().getDistanceToBorder((double)blockpos.getX(), (double)blockpos.getZ()));
+      if (p_9202_.dimensionType().hasSkyLight() && p_9202_.serverLevelData.getGameType() != GameType.ADVENTURE) {
+         int i = Math.max( 0, this.server.getSpawnRadius( p_9202_ ) );
+         int j = Mth.floor( p_9202_.getWorldBorder().getDistanceToBorder( (double) blockpos.getX(), (double) blockpos.getZ() ) );
          if (j < i) {
             i = j;
          }
@@ -251,29 +_,29 @@
             i = 1;
          }
 
-         long k = (long)(i * 2 + 1);
+         long k = (long) (i * 2 + 1);
          long l = k * k;
-         int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int)l;
-         int j1 = this.getCoprime(i1);
-         int k1 = (new Random()).nextInt(i1);
+         int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+         int j1 = this.getCoprime( i1 );
+         int k1 = (new Random()).nextInt( i1 );
 
-         for(int l1 = 0; l1 < i1; ++l1) {
+         for (int l1 = 0; l1 < i1; ++l1) {
             int i2 = (k1 + j1 * l1) % i1;
             int j2 = i2 % (i * 2 + 1);
             int k2 = i2 / (i * 2 + 1);
-            BlockPos blockpos1 = PlayerRespawnLogic.getOverworldRespawnPos(p_9202_, blockpos.getX() + j2 - i, blockpos.getZ() + k2 - i);
+            BlockPos blockpos1 = PlayerRespawnLogic.getOverworldRespawnPos( p_9202_, blockpos.getX() + j2 - i, blockpos.getZ() + k2 - i );
             if (blockpos1 != null) {
-               this.moveTo(blockpos1, 0.0F, 0.0F);
-               if (p_9202_.noCollision(this)) {
+               this.moveTo( blockpos1, 0.0F, 0.0F );
+               if (p_9202_.noCollision( this )) {
                   break;
                }
             }
          }
       } else {
-         this.moveTo(blockpos, 0.0F, 0.0F);
+         this.moveTo( blockpos, 0.0F, 0.0F );
 
-         while(!p_9202_.noCollision(this) && this.getY() < (double)(p_9202_.getMaxBuildHeight() - 1)) {
-            this.setPos(this.getX(), this.getY() + 1.0D, this.getZ());
+         while (!p_9202_.noCollision( this ) && this.getY() < (double) (p_9202_.getMaxBuildHeight() - 1)) {
+            this.setPos( this.getX(), this.getY() + 1.0D, this.getZ() );
          }
       }
 
@@ -284,74 +_,131 @@
    }
 
    public void readAdditionalSaveData(CompoundTag p_9131_) {
-      super.readAdditionalSaveData(p_9131_);
-      if (p_9131_.contains("enteredNetherPosition", 10)) {
-         CompoundTag compoundtag = p_9131_.getCompound("enteredNetherPosition");
-         this.enteredNetherPosition = new Vec3(compoundtag.getDouble("x"), compoundtag.getDouble("y"), compoundtag.getDouble("z"));
-      }
-
-      this.seenCredits = p_9131_.getBoolean("seenCredits");
-      if (p_9131_.contains("recipeBook", 10)) {
-         this.recipeBook.fromNbt(p_9131_.getCompound("recipeBook"), this.server.getRecipeManager());
-      }
+      super.readAdditionalSaveData( p_9131_ );
+      if (p_9131_.contains( "enteredNetherPosition", 10 )) {
+         CompoundTag compoundtag = p_9131_.getCompound( "enteredNetherPosition" );
+         this.enteredNetherPosition = new Vec3( compoundtag.getDouble( "x" ), compoundtag.getDouble( "y" ), compoundtag.getDouble( "z" ) );
+      }
+
+      this.seenCredits = p_9131_.getBoolean( "seenCredits" );
+      if (p_9131_.contains( "recipeBook", 10 )) {
+         this.recipeBook.fromNbt( p_9131_.getCompound( "recipeBook" ), this.server.getRecipeManager() );
+      }
+
+      this.getBukkitEntity().readExtraData( p_9131_ ); // CraftBukkit
 
       if (this.isSleeping()) {
          this.stopSleeping();
       }
 
-      if (p_9131_.contains("SpawnX", 99) && p_9131_.contains("SpawnY", 99) && p_9131_.contains("SpawnZ", 99)) {
-         this.respawnPosition = new BlockPos(p_9131_.getInt("SpawnX"), p_9131_.getInt("SpawnY"), p_9131_.getInt("SpawnZ"));
-         this.respawnForced = p_9131_.getBoolean("SpawnForced");
-         this.respawnAngle = p_9131_.getFloat("SpawnAngle");
-         if (p_9131_.contains("SpawnDimension")) {
-            this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse(NbtOps.INSTANCE, p_9131_.get("SpawnDimension")).resultOrPartial(LOGGER::error).orElse(Level.OVERWORLD);
+      // CraftBukkit start
+      String spawnWorld = p_9131_.getString( "SpawnWorld" );
+      org.bukkit.craftbukkit.v1_18_R2.CraftWorld oldWorld = (org.bukkit.craftbukkit.v1_18_R2.CraftWorld) org.bukkit.Bukkit.getWorld( spawnWorld );
+      if (oldWorld != null) {
+         this.respawnDimension = oldWorld.getHandle().dimension();
+      }
+      // CraftBukkit end
+
+      if (p_9131_.contains( "SpawnX", 99 ) && p_9131_.contains( "SpawnY", 99 ) && p_9131_.contains( "SpawnZ", 99 )) {
+         this.respawnPosition = new BlockPos( p_9131_.getInt( "SpawnX" ), p_9131_.getInt( "SpawnY" ), p_9131_.getInt( "SpawnZ" ) );
+         this.respawnForced = p_9131_.getBoolean( "SpawnForced" );
+         this.respawnAngle = p_9131_.getFloat( "SpawnAngle" );
+         if (p_9131_.contains( "SpawnDimension" )) {
+            this.respawnDimension = Level.RESOURCE_KEY_CODEC.parse( NbtOps.INSTANCE, p_9131_.get( "SpawnDimension" ) ).resultOrPartial( LOGGER::error ).orElse( Level.OVERWORLD );
          }
       }
+
+      //Magma start - load forge captures
+      net.minecraft.nbt.ListTag forgeCaptures = p_9131_.getList("ForgeCaptures", 10);
+      setForgeCaptures(this, forgeCaptures);
+      //Magma end
 
    }
 
    public void addAdditionalSaveData(CompoundTag p_9197_) {
-      super.addAdditionalSaveData(p_9197_);
-      this.storeGameTypes(p_9197_);
-      p_9197_.putBoolean("seenCredits", this.seenCredits);
+      super.addAdditionalSaveData( p_9197_ );
+      this.storeGameTypes( p_9197_ );
+      p_9197_.putBoolean( "seenCredits", this.seenCredits );
       if (this.enteredNetherPosition != null) {
          CompoundTag compoundtag = new CompoundTag();
-         compoundtag.putDouble("x", this.enteredNetherPosition.x);
-         compoundtag.putDouble("y", this.enteredNetherPosition.y);
-         compoundtag.putDouble("z", this.enteredNetherPosition.z);
-         p_9197_.put("enteredNetherPosition", compoundtag);
+         compoundtag.putDouble( "x", this.enteredNetherPosition.x );
+         compoundtag.putDouble( "y", this.enteredNetherPosition.y );
+         compoundtag.putDouble( "z", this.enteredNetherPosition.z );
+         p_9197_.put( "enteredNetherPosition", compoundtag );
       }
 
       Entity entity1 = this.getRootVehicle();
       Entity entity = this.getVehicle();
-      if (entity != null && entity1 != this && entity1.hasExactlyOnePlayerPassenger()) {
+      // CraftBukkit start - handle non-persistent vehicles
+      boolean persistVehicle = true;
+      if (entity1 != null) {
+         Entity vehicle;
+         for (vehicle = entity1; vehicle != null; vehicle = vehicle.getVehicle()) {
+            if (!vehicle.persist) {
+               persistVehicle = false;
+               break;
+            }
+         }
+      }
+
+      if (persistVehicle && entity1 != null && entity != null && entity != this && entity.hasExactlyOnePlayerPassenger()) {
+         // CraftBukkit end
          CompoundTag compoundtag1 = new CompoundTag();
          CompoundTag compoundtag2 = new CompoundTag();
-         entity1.save(compoundtag2);
-         compoundtag1.putUUID("Attach", entity.getUUID());
-         compoundtag1.put("Entity", compoundtag2);
-         p_9197_.put("RootVehicle", compoundtag1);
+         entity1.save( compoundtag2 );
+         compoundtag1.putUUID( "Attach", entity.getUUID() );
+         compoundtag1.put( "Entity", compoundtag2 );
+         p_9197_.put( "RootVehicle", compoundtag1 );
       }
 
-      p_9197_.put("recipeBook", this.recipeBook.toNbt());
-      p_9197_.putString("Dimension", this.level.dimension().location().toString());
+      p_9197_.put( "recipeBook", this.recipeBook.toNbt() );
+      p_9197_.putString( "Dimension", this.level.dimension().location().toString() );
       if (this.respawnPosition != null) {
-         p_9197_.putInt("SpawnX", this.respawnPosition.getX());
-         p_9197_.putInt("SpawnY", this.respawnPosition.getY());
-         p_9197_.putInt("SpawnZ", this.respawnPosition.getZ());
-         p_9197_.putBoolean("SpawnForced", this.respawnForced);
-         p_9197_.putFloat("SpawnAngle", this.respawnAngle);
-         ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location()).resultOrPartial(LOGGER::error).ifPresent((p_9134_) -> {
-            p_9197_.put("SpawnDimension", p_9134_);
-         });
-      }
-
-   }
+         p_9197_.putInt( "SpawnX", this.respawnPosition.getX() );
+         p_9197_.putInt( "SpawnY", this.respawnPosition.getY() );
+         p_9197_.putInt( "SpawnZ", this.respawnPosition.getZ() );
+         p_9197_.putBoolean( "SpawnForced", this.respawnForced );
+         p_9197_.putFloat( "SpawnAngle", this.respawnAngle );
+         ResourceLocation.CODEC.encodeStart( NbtOps.INSTANCE, this.respawnDimension.location() ).resultOrPartial( LOGGER::error ).ifPresent( (p_9134_) -> {
+            p_9197_.put( "SpawnDimension", p_9134_ );
+         } );
+      }
+
+      this.getBukkitEntity().setExtraData( p_9197_ ); // CraftBukkit
+
+      //Magma start - save forge captures
+      Inventory forgeCaptures = getForgeCaptures();
+      if (forgeCaptures != null) p_9197_.put("ForgeCaptures", forgeCaptures.save(new net.minecraft.nbt.ListTag()));
+      //Magma end
+   }
+
+   // CraftBukkit start - World fallback code, either respawn location or global spawn
+   public void spawnIn(Level world) {
+      this.level = world;
+      if (world == null) {
+         this.unsetRemoved();
+         Vec3 position = null;
+         if (this.respawnDimension != null) {
+            world = this.getLevel().getCraftServer().getHandle().getServer().getLevel( this.respawnDimension );
+            if (world != null && this.getRespawnPosition() != null) {
+               position = Player.findRespawnPositionAndUseSpawnBlock( (ServerLevel) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false ).orElse( null );
+            }
+         }
+         if (world == null || position == null) {
+            world = ((org.bukkit.craftbukkit.v1_18_R2.CraftWorld) org.bukkit.Bukkit.getServer().getWorlds().get( 0 )).getHandle();
+            position = Vec3.atCenterOf( ((ServerLevel) world).getSharedSpawnPos() );
+         }
+         this.level = world;
+         this.setPos( position.x(), position.y(), position.z() );
+      }
+      this.gameMode.setLevel( (ServerLevel) world );
+   }
+   // CraftBukkit end
 
    public void setExperiencePoints(int p_8986_) {
-      float f = (float)this.getXpNeededForNextLevel();
+      float f = (float) this.getXpNeededForNextLevel();
       float f1 = (f - 1.0F) / f;
-      this.experienceProgress = Mth.clamp((float)p_8986_ / f, 0.0F, f1);
+      this.experienceProgress = Mth.clamp( (float) p_8986_ / f, 0.0F, f1 );
       this.lastSentExp = -1;
    }
 
@@ -361,43 +_,46 @@
    }
 
    public void giveExperienceLevels(int p_9200_) {
-      super.giveExperienceLevels(p_9200_);
+      super.giveExperienceLevels( p_9200_ );
       this.lastSentExp = -1;
    }
 
    public void onEnchantmentPerformed(ItemStack p_9079_, int p_9080_) {
-      super.onEnchantmentPerformed(p_9079_, p_9080_);
+      super.onEnchantmentPerformed( p_9079_, p_9080_ );
       this.lastSentExp = -1;
    }
 
    public void initMenu(AbstractContainerMenu p_143400_) {
-      p_143400_.addSlotListener(this.containerListener);
-      p_143400_.setSynchronizer(this.containerSynchronizer);
+      p_143400_.addSlotListener( this.containerListener );
+      p_143400_.setSynchronizer( this.containerSynchronizer );
    }
 
    public void initInventoryMenu() {
-      this.initMenu(this.inventoryMenu);
+      this.initMenu( this.inventoryMenu );
    }
 
    public void onEnterCombat() {
       super.onEnterCombat();
-      this.connection.send(new ClientboundPlayerCombatEnterPacket());
+      this.connection.send( new ClientboundPlayerCombatEnterPacket() );
    }
 
    public void onLeaveCombat() {
       super.onLeaveCombat();
-      this.connection.send(new ClientboundPlayerCombatEndPacket(this.getCombatTracker()));
+      this.connection.send( new ClientboundPlayerCombatEndPacket( this.getCombatTracker() ) );
    }
 
    protected void onInsideBlock(BlockState p_9103_) {
-      CriteriaTriggers.ENTER_BLOCK.trigger(this, p_9103_);
+      CriteriaTriggers.ENTER_BLOCK.trigger( this, p_9103_ );
    }
 
    protected ItemCooldowns createItemCooldowns() {
-      return new ServerItemCooldowns(this);
+      return new ServerItemCooldowns( this );
    }
 
    public void tick() {
+      //CraftBukkit start
+      if (this.joining) joining = false;
+      // CraftBukkit end
       this.gameMode.tick();
       --this.spawnInvulnerableTime;
       if (this.invulnerableTime > 0) {
@@ -405,7 +_,7 @@
       }
 
       this.containerMenu.broadcastChanges();
-      if (!this.level.isClientSide && !this.containerMenu.stillValid(this)) {
+      if (!this.level.isClientSide && !this.containerMenu.stillValid( this )) {
          this.closeContainer();
          this.containerMenu = this.inventoryMenu;
       }
@@ -413,44 +_,46 @@
       Entity entity = this.getCamera();
       if (entity != this) {
          if (entity.isAlive()) {
-            this.absMoveTo(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
-            this.getLevel().getChunkSource().move(this);
+            this.absMoveTo( entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot() );
+            this.getLevel().getChunkSource().move( this );
             if (this.wantsToStopRiding()) {
-               this.setCamera(this);
+               this.setCamera( this );
             }
          } else {
-            this.setCamera(this);
+            this.setCamera( this );
          }
       }
 
-      CriteriaTriggers.TICK.trigger(this);
+      CriteriaTriggers.TICK.trigger( this );
       if (this.levitationStartPos != null) {
-         CriteriaTriggers.LEVITATION.trigger(this, this.levitationStartPos, this.tickCount - this.levitationStartTime);
+         CriteriaTriggers.LEVITATION.trigger( this, this.levitationStartPos, this.tickCount - this.levitationStartTime );
       }
 
       this.trackStartFallingPosition();
       this.trackEnteredOrExitedLavaOnVehicle();
-      this.advancements.flushDirty(this);
+      this.advancements.flushDirty( this );
    }
 
    public void doTick() {
       try {
-         if (!this.isSpectator() || !this.touchingUnloadedChunk()) {
+         //Magma start - spigot calls doTick() once more after the player disconnects, ticking the player after disconnecting is not a good idea
+         if (!hasDisconnected() && (!this.isSpectator() || !this.touchingUnloadedChunk())) {
             super.tick();
          }
+         //Magma end
 
-         for(int i = 0; i < this.getInventory().getContainerSize(); ++i) {
-            ItemStack itemstack = this.getInventory().getItem(i);
+         for (int i = 0; i < this.getInventory().getContainerSize(); ++i) {
+            ItemStack itemstack = this.getInventory().getItem( i );
             if (itemstack.getItem().isComplex()) {
-               Packet<?> packet = ((ComplexItem)itemstack.getItem()).getUpdatePacket(itemstack, this.level, this);
+               Packet<?> packet = ((ComplexItem) itemstack.getItem()).getUpdatePacket( itemstack, this.level, this );
                if (packet != null) {
-                  this.connection.send(packet);
+                  this.connection.send( packet );
                }
             }
          }
 
          if (this.getHealth() != this.lastSentHealth || this.lastSentFood != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.lastFoodSaturationZero) {
-            this.connection.send(new ClientboundSetHealthPacket(this.getHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel()));
+            this.connection.send( new ClientboundSetHealthPacket( this.getBukkitEntity().getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel() ) ); //CraftBukkit
             this.lastSentHealth = this.getHealth();
             this.lastSentFood = this.foodData.getFoodLevel();
             this.lastFoodSaturationZero = this.foodData.getSaturationLevel() == 0.0F;
@@ -458,54 +_,75 @@
 
          if (this.getHealth() + this.getAbsorptionAmount() != this.lastRecordedHealthAndAbsorption) {
             this.lastRecordedHealthAndAbsorption = this.getHealth() + this.getAbsorptionAmount();
-            this.updateScoreForCriteria(ObjectiveCriteria.HEALTH, Mth.ceil(this.lastRecordedHealthAndAbsorption));
+            this.updateScoreForCriteria( ObjectiveCriteria.HEALTH, Mth.ceil( this.lastRecordedHealthAndAbsorption ) );
          }
 
          if (this.foodData.getFoodLevel() != this.lastRecordedFoodLevel) {
             this.lastRecordedFoodLevel = this.foodData.getFoodLevel();
-            this.updateScoreForCriteria(ObjectiveCriteria.FOOD, Mth.ceil((float)this.lastRecordedFoodLevel));
+            this.updateScoreForCriteria( ObjectiveCriteria.FOOD, Mth.ceil( (float) this.lastRecordedFoodLevel ) );
          }
 
          if (this.getAirSupply() != this.lastRecordedAirLevel) {
             this.lastRecordedAirLevel = this.getAirSupply();
-            this.updateScoreForCriteria(ObjectiveCriteria.AIR, Mth.ceil((float)this.lastRecordedAirLevel));
+            this.updateScoreForCriteria( ObjectiveCriteria.AIR, Mth.ceil( (float) this.lastRecordedAirLevel ) );
          }
 
          if (this.getArmorValue() != this.lastRecordedArmor) {
             this.lastRecordedArmor = this.getArmorValue();
-            this.updateScoreForCriteria(ObjectiveCriteria.ARMOR, Mth.ceil((float)this.lastRecordedArmor));
+            this.updateScoreForCriteria( ObjectiveCriteria.ARMOR, Mth.ceil( (float) this.lastRecordedArmor ) );
          }
 
          if (this.totalExperience != this.lastRecordedExperience) {
             this.lastRecordedExperience = this.totalExperience;
-            this.updateScoreForCriteria(ObjectiveCriteria.EXPERIENCE, Mth.ceil((float)this.lastRecordedExperience));
-         }
+            this.updateScoreForCriteria( ObjectiveCriteria.EXPERIENCE, Mth.ceil( (float) this.lastRecordedExperience ) );
+         }
+
+         // CraftBukkit start - Force max health updates
+         if (this.maxHealthCache != this.getMaxHealth()) {
+            this.getBukkitEntity().updateScaledHealth();
+         }
+         // CraftBukkit end
 
          if (this.experienceLevel != this.lastRecordedLevel) {
             this.lastRecordedLevel = this.experienceLevel;
-            this.updateScoreForCriteria(ObjectiveCriteria.LEVEL, Mth.ceil((float)this.lastRecordedLevel));
+            this.updateScoreForCriteria( ObjectiveCriteria.LEVEL, Mth.ceil( (float) this.lastRecordedLevel ) );
          }
 
          if (this.totalExperience != this.lastSentExp) {
             this.lastSentExp = this.totalExperience;
-            this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
+            this.connection.send( new ClientboundSetExperiencePacket( this.experienceProgress, this.totalExperience, this.experienceLevel ) );
          }
 
          if (this.tickCount % 20 == 0) {
-            CriteriaTriggers.LOCATION.trigger(this);
-         }
+            CriteriaTriggers.LOCATION.trigger( this );
+         }
+
+
+         // CraftBukkit start - initialize oldLevel and fire PlayerLevelChangeEvent
+         if (this.oldLevel == -1) {
+            this.oldLevel = this.experienceLevel;
+         }
+
+         if (this.oldLevel != this.experienceLevel) {
+            org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerLevelChangeEvent( this.getBukkitEntity(), this.oldLevel, this.experienceLevel );
+            this.oldLevel = this.experienceLevel;
+         }
+         if (this.getBukkitEntity().hasClientWorldBorder()) {
+            ((org.bukkit.craftbukkit.v1_18_R2.CraftWorldBorder) this.getBukkitEntity().getWorldBorder()).getHandle().tick();
+         }
+         // CraftBukkit end
 
       } catch (Throwable throwable) {
-         CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking player");
-         CrashReportCategory crashreportcategory = crashreport.addCategory("Player being ticked");
-         this.fillCrashReportCategory(crashreportcategory);
-         throw new ReportedException(crashreport);
+         CrashReport crashreport = CrashReport.forThrowable( throwable, "Ticking player" );
+         CrashReportCategory crashreportcategory = crashreport.addCategory( "Player being ticked" );
+         this.fillCrashReportCategory( crashreportcategory );
+         throw new ReportedException( crashreport );
       }
    }
 
    public void resetFallDistance() {
       if (this.getHealth() > 0.0F && this.startingToFallPosition != null) {
-         CriteriaTriggers.FALL_FROM_HEIGHT.trigger(this, this.startingToFallPosition);
+         CriteriaTriggers.FALL_FROM_HEIGHT.trigger( this, this.startingToFallPosition );
       }
 
       this.startingToFallPosition = null;
@@ -524,7 +_,7 @@
          if (this.enteredLavaOnVehiclePosition == null) {
             this.enteredLavaOnVehiclePosition = this.position();
          } else {
-            CriteriaTriggers.RIDE_ENTITY_IN_LAVA_TRIGGER.trigger(this, this.enteredLavaOnVehiclePosition);
+            CriteriaTriggers.RIDE_ENTITY_IN_LAVA_TRIGGER.trigger( this, this.enteredLavaOnVehiclePosition );
          }
       }
 
@@ -535,36 +_,69 @@
    }
 
    private void updateScoreForCriteria(ObjectiveCriteria p_9105_, int p_9106_) {
-      this.getScoreboard().forAllObjectives(p_9105_, this.getScoreboardName(), (p_9178_) -> {
-         p_9178_.setScore(p_9106_);
-      });
+      // CraftBukkit - Use our scores instead
+      this.level.getCraftServer().getScoreboardManager().getScoreboardScores( p_9105_, this.getScoreboardName(), (p_9178_) -> {
+         p_9178_.setScore( p_9106_ );
+      } );
    }
 
+   //Magma start - rewrite
    public void die(DamageSource p_9035_) {
+      if (net.minecraftforge.common.ForgeHooks.onLivingDeath(this, p_9035_)) return;
       boolean flag = this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
-      if (flag) {
-         Component component = this.getCombatTracker().getDeathMessage();
-         this.connection.send(new ClientboundPlayerCombatKillPacket(this.getCombatTracker(), component), (p_9142_) -> {
-            if (!p_9142_.isSuccess()) {
+      // CraftBukkit start - fire PlayerDeathEvent
+      if (this.dead) {
+         return;
+      }
+      boolean keepInventory = this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY);
+
+      Inventory copy = new Inventory(this);
+      copy.replaceWith(getInventory()); // Create a deep copy
+
+      if (!this.isSpectator()) {
+         this.dropAllDeathLoot(p_9035_);
+      }
+
+      List<org.bukkit.inventory.ItemStack> capturedDrops = new java.util.ArrayList<>(this.drops);
+      this.drops.clear();
+
+      Component defaultMessage = this.getCombatTracker().getDeathMessage();
+      String deathmessage = defaultMessage.getString();
+      keepLevel = keepInventory; // SPIGOT-2222: pre-set keepLevel
+      org.bukkit.event.entity.PlayerDeathEvent event = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerDeathEvent(this, capturedDrops, deathmessage, keepInventory);
+      // SPIGOT-943 - only call if they have an inventory open
+      if (this.containerMenu != this.inventoryMenu) {
+         this.doCloseContainer();
+      }
+      String deathMessage = event.getDeathMessage();
+      if (deathMessage != null && deathMessage.length() > 0 && flag) {
+         Component itextcomponent;
+         if (deathMessage.equals(deathmessage)) {
+            itextcomponent = this.getCombatTracker().getDeathMessage();
+         } else {
+            itextcomponent = org.bukkit.craftbukkit.v1_18_R2.util.CraftChatMessage.fromStringOrNull(deathMessage);
+         }
+         this.connection.send(new ClientboundPlayerCombatKillPacket(this.getCombatTracker(), itextcomponent), (future) -> {
+            if (!future.isSuccess()) {
                int i = 256;
-               String s = component.getString(256);
-               Component component1 = new TranslatableComponent("death.attack.message_too_long", (new TextComponent(s)).withStyle(ChatFormatting.YELLOW));
-               Component component2 = (new TranslatableComponent("death.attack.even_more_magic", this.getDisplayName())).withStyle((p_143420_) -> {
-                  return p_143420_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component1));
+               String s = itextcomponent.getString(256);
+               Component itextcomponent1 = new TranslatableComponent("death.attack.message_too_long", (new TextComponent(s)).withStyle(ChatFormatting.YELLOW));
+               Component itextcomponent2 = (new TranslatableComponent("death.attack.even_more_magic", this.getDisplayName())).withStyle((p_212357_1_) -> {
+                  return p_212357_1_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, itextcomponent1));
                });
-               this.connection.send(new ClientboundPlayerCombatKillPacket(this.getCombatTracker(), component2));
+               this.connection.send(new ClientboundPlayerCombatKillPacket(this.getCombatTracker(), itextcomponent2));
             }
 
          });
-         Team team = this.getTeam();
-         if (team != null && team.getDeathMessageVisibility() != Team.Visibility.ALWAYS) {
-            if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OTHER_TEAMS) {
-               this.server.getPlayerList().broadcastToTeam(this, component);
-            } else if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM) {
-               this.server.getPlayerList().broadcastToAllExceptTeam(this, component);
+         Team scoreboardteambase = this.getTeam();
+         if (scoreboardteambase != null && scoreboardteambase.getDeathMessageVisibility() != Team.Visibility.ALWAYS) {
+            if (scoreboardteambase.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OTHER_TEAMS) {
+               this.server.getPlayerList().broadcastToTeam(this, itextcomponent);
+            } else if (scoreboardteambase.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM) {
+               this.server.getPlayerList().broadcastToAllExceptTeam(this, itextcomponent);
             }
          } else {
-            this.server.getPlayerList().broadcastMessage(component, ChatType.SYSTEM, Util.NIL_UUID);
+            this.server.getPlayerList().broadcastMessage(itextcomponent, ChatType.SYSTEM, Util.NIL_UUID);
          }
       } else {
          this.connection.send(new ClientboundPlayerCombatKillPacket(this.getCombatTracker(), TextComponent.EMPTY));
@@ -575,11 +_,23 @@
          this.tellNeutralMobsThatIDied();
       }
 
-      if (!this.isSpectator()) {
-         this.dropAllDeathLoot(p_9035_);
+      // SPIGOT-5478 must be called manually now
+      this.dropExperience();
+      // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
+      if (!event.getKeepInventory()) {
+         this.getInventory().clearContent();
+      } else { //Magma - if keepInventory is modified by a plugin, reset the inventory and clear the forge captures
+         this.getInventory().replaceWith(copy);
+         getForgeCapturesAndClear();
       }
 
-      this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
+      //      this.getWorldScoreboard().forAllObjectives(ScoreCriteria.DEATH_COUNT, this.getScoreboardName(), Score::incrementScore);
+      this.setCamera(this); // Remove spectated target
+      // CraftBukkit end
+
+      // CraftBukkit - Get our scores instead
+      this.level.getCraftServer().getScoreboardManager().getScoreboardScores(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
+
       LivingEntity livingentity = this.getKillCredit();
       if (livingentity != null) {
          this.awardStat(Stats.ENTITY_KILLED_BY.get(livingentity.getType()));
@@ -592,93 +_,105 @@
       this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_DEATH));
       this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
       this.clearFire();
-      this.setTicksFrozen(0);
-      this.setSharedFlagOnFire(false);
+      this.setSharedFlag(0, false);
       this.getCombatTracker().recheckStatus();
    }
+   //Magma end
 
    private void tellNeutralMobsThatIDied() {
-      AABB aabb = (new AABB(this.blockPosition())).inflate(32.0D, 10.0D, 32.0D);
-      this.level.getEntitiesOfClass(Mob.class, aabb, EntitySelector.NO_SPECTATORS).stream().filter((p_9188_) -> {
+      AABB aabb = (new AABB( this.blockPosition() )).inflate( 32.0D, 10.0D, 32.0D );
+      this.level.getEntitiesOfClass( Mob.class, aabb, EntitySelector.NO_SPECTATORS ).stream().filter( (p_9188_) -> {
          return p_9188_ instanceof NeutralMob;
-      }).forEach((p_9057_) -> {
-         ((NeutralMob)p_9057_).playerDied(this);
-      });
+      } ).forEach( (p_9057_) -> {
+         ((NeutralMob) p_9057_).playerDied( this );
+      } );
    }
 
    public void awardKillScore(Entity p_9050_, int p_9051_, DamageSource p_9052_) {
       if (p_9050_ != this) {
-         super.awardKillScore(p_9050_, p_9051_, p_9052_);
-         this.increaseScore(p_9051_);
+         super.awardKillScore( p_9050_, p_9051_, p_9052_ );
+         this.increaseScore( p_9051_ );
          String s = this.getScoreboardName();
          String s1 = p_9050_.getScoreboardName();
-         this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment);
+
+         // CraftBukkit - Get our scores instead
+         this.level.getCraftServer().getScoreboardManager().getScoreboardScores( ObjectiveCriteria.KILL_COUNT_ALL, s, Score::increment );
          if (p_9050_ instanceof Player) {
-            this.awardStat(Stats.PLAYER_KILLS);
-            this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment);
+            this.awardStat( Stats.PLAYER_KILLS );
+            // CraftBukkit - Get our scores instead
+            this.level.getCraftServer().getScoreboardManager().getScoreboardScores( ObjectiveCriteria.KILL_COUNT_PLAYERS, s, Score::increment );
          } else {
-            this.awardStat(Stats.MOB_KILLS);
+            this.awardStat( Stats.MOB_KILLS );
          }
 
-         this.handleTeamKill(s, s1, ObjectiveCriteria.TEAM_KILL);
-         this.handleTeamKill(s1, s, ObjectiveCriteria.KILLED_BY_TEAM);
-         CriteriaTriggers.PLAYER_KILLED_ENTITY.trigger(this, p_9050_, p_9052_);
+         this.handleTeamKill( s, s1, ObjectiveCriteria.TEAM_KILL );
+         this.handleTeamKill( s1, s, ObjectiveCriteria.KILLED_BY_TEAM );
+         CriteriaTriggers.PLAYER_KILLED_ENTITY.trigger( this, p_9050_, p_9052_ );
       }
    }
 
    private void handleTeamKill(String p_9125_, String p_9126_, ObjectiveCriteria[] p_9127_) {
-      PlayerTeam playerteam = this.getScoreboard().getPlayersTeam(p_9126_);
+      PlayerTeam playerteam = this.getScoreboard().getPlayersTeam( p_9126_ );
       if (playerteam != null) {
          int i = playerteam.getColor().getId();
          if (i >= 0 && i < p_9127_.length) {
-            this.getScoreboard().forAllObjectives(p_9127_[i], p_9125_, Score::increment);
+            // CraftBukkit - Get our scores instead
+            this.level.getCraftServer().getScoreboardManager().getScoreboardScores( p_9127_[i], p_9126_, Score::increment );
          }
       }
 
    }
 
    public boolean hurt(DamageSource p_9037_, float p_9038_) {
-      if (this.isInvulnerableTo(p_9037_)) {
+      if (this.isInvulnerableTo( p_9037_ )) {
          return false;
       } else {
-         boolean flag = this.server.isDedicatedServer() && this.isPvpAllowed() && "fall".equals(p_9037_.msgId);
+         boolean flag = this.server.isDedicatedServer() && this.isPvpAllowed() && "fall".equals( p_9037_.msgId );
          if (!flag && this.spawnInvulnerableTime > 0 && p_9037_ != DamageSource.OUT_OF_WORLD) {
             return false;
          } else {
             if (p_9037_ instanceof EntityDamageSource) {
                Entity entity = p_9037_.getEntity();
-               if (entity instanceof Player && !this.canHarmPlayer((Player)entity)) {
+               if (entity instanceof Player && !this.canHarmPlayer( (Player) entity )) {
                   return false;
                }
 
                if (entity instanceof AbstractArrow) {
-                  AbstractArrow abstractarrow = (AbstractArrow)entity;
+                  AbstractArrow abstractarrow = (AbstractArrow) entity;
                   Entity entity1 = abstractarrow.getOwner();
-                  if (entity1 instanceof Player && !this.canHarmPlayer((Player)entity1)) {
+                  if (entity1 instanceof Player && !this.canHarmPlayer( (Player) entity1 )) {
                      return false;
                   }
                }
             }
 
-            return super.hurt(p_9037_, p_9038_);
+            return super.hurt( p_9037_, p_9038_ );
          }
       }
    }
 
    public boolean canHarmPlayer(Player p_9064_) {
-      return !this.isPvpAllowed() ? false : super.canHarmPlayer(p_9064_);
+      return !this.isPvpAllowed() ? false : super.canHarmPlayer( p_9064_ );
    }
 
    private boolean isPvpAllowed() {
-      return this.server.isPvpAllowed();
+      // CraftBukkit - this.server.isPvpAllowed() -> this.world.pvpMode
+      return this.level.pvpMode;
    }
 
    @Nullable
    protected PortalInfo findDimensionEntryPoint(ServerLevel p_8998_) {
-      PortalInfo portalinfo = super.findDimensionEntryPoint(p_8998_);
-      if (portalinfo != null && this.level.dimension() == Level.OVERWORLD && p_8998_.dimension() == Level.END) {
-         Vec3 vec3 = portalinfo.pos.add(0.0D, -1.0D, 0.0D);
-         return new PortalInfo(vec3, Vec3.ZERO, 90.0F, 0.0F);
+      PortalInfo portalinfo = super.findDimensionEntryPoint( p_8998_ );
+      //Magma start - fix for null world in PortalInfo
+      p_8998_ = (portalinfo == null || portalinfo.world == null) ? p_8998_ : portalinfo.world; //CraftBukkit
+      if (portalinfo != null && portalinfo.world == null)
+         portalinfo.world = p_8998_;
+      //Magma end
+      if (portalinfo != null && this.level.dimension() == Level.OVERWORLD && p_8998_.dimension() == Level.NETHER) {
+         Vec3 vec3 = portalinfo.pos.add( 0.0D, 0.0D, 0.0D );
+         PortalInfo info = new PortalInfo( vec3, Vec3.ZERO, 90.0F, 0.0F );
+         info.setCBPortalEvent( p_8998_, portalinfo.portalEventInfo );
+         return info;
       } else {
          return portalinfo;
       }
@@ -686,76 +_,149 @@
 
    @Nullable
    public Entity changeDimension(ServerLevel p_9180_) {
-      this.isChangingDimension = true;
-      ServerLevel serverlevel = this.getLevel();
-      ResourceKey<Level> resourcekey = serverlevel.dimension();
-      if (resourcekey == Level.END && p_9180_.dimension() == Level.OVERWORLD) {
+      // CraftBukkit start
+      return changeDimension( p_9180_, p_9180_.getPortalForcer(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN );
+   }
+
+   @Nullable
+   public Entity changeDimension(ServerLevel p_9180_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      return changeDimension( p_9180_, teleporter, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN );
+   }
+
+   @Nullable
+   public Entity changeDimension(ServerLevel p_9180_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      return changeDimension( p_9180_, p_9180_.getPortalForcer(), cause );
+   }
+
+   @Nullable
+   public Entity changeDimension(ServerLevel p_9180_, net.minecraftforge.common.util.ITeleporter teleporter, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      // CraftBukkit end
+      if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension( this, p_9180_.dimension() )) return null;
+      if (this.isSleeping()) return this; // CraftBukkit - SPIGOT-3154
+      // this.isChangingDimension = true; // CraftBukkit - Moved down and into PlayerList#changeDimension
+      java.util.concurrent.atomic.AtomicReference<ServerLevel> serverlevel = new java.util.concurrent.atomic.AtomicReference<>( this.getLevel() ); // For use in lambda
+      ResourceKey<Level> resourcekey = serverlevel.get().dimension();
+      if (resourcekey == Level.END && p_9180_.dimension() == Level.OVERWORLD && teleporter.isVanilla()) { //Forge: Fix non-vanilla teleporters triggering end credits
+         this.isChangingDimension = true;
          this.unRide();
-         this.getLevel().removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+         this.getLevel().removePlayerImmediately( this, Entity.RemovalReason.CHANGED_DIMENSION );
          if (!this.wonGame) {
             this.wonGame = true;
-            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, this.seenCredits ? 0.0F : 1.0F));
+            this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.WIN_GAME, this.seenCredits ? 0.0F : 1.0F ) );
             this.seenCredits = true;
          }
 
          return this;
       } else {
          LevelData leveldata = p_9180_.getLevelData();
-         this.connection.send(new ClientboundRespawnPacket(p_9180_.dimensionTypeRegistration(), p_9180_.dimension(), BiomeManager.obfuscateSeed(p_9180_.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_9180_.isDebug(), p_9180_.isFlat(), true));
-         this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
+         this.connection.send( new ClientboundRespawnPacket( p_9180_.dimensionTypeRegistration(), p_9180_.dimension(), BiomeManager.obfuscateSeed( p_9180_.getSeed() ), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_9180_.isDebug(), p_9180_.isFlat(), true ) );
+         this.connection.send( new ClientboundChangeDifficultyPacket( leveldata.getDifficulty(), leveldata.isDifficultyLocked() ) );
          PlayerList playerlist = this.server.getPlayerList();
-         playerlist.sendPlayerPermissionLevel(this);
-         serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-         this.unsetRemoved();
-         PortalInfo portalinfo = this.findDimensionEntryPoint(p_9180_);
+         playerlist.sendPlayerPermissionLevel( this );
+         serverlevel.get().removePlayerImmediately( this, Entity.RemovalReason.CHANGED_DIMENSION );
+         this.revive();
+         PortalInfo portalinfo = teleporter.getPortalInfo( this, p_9180_, this::findDimensionEntryPoint );
          if (portalinfo != null) {
-            serverlevel.getProfiler().push("moving");
-            if (resourcekey == Level.OVERWORLD && p_9180_.dimension() == Level.NETHER) {
-               this.enteredNetherPosition = this.position();
-            } else if (p_9180_.dimension() == Level.END) {
-               this.createEndPlatform(p_9180_, new BlockPos(portalinfo.pos));
-            }
-
-            serverlevel.getProfiler().pop();
-            serverlevel.getProfiler().push("placing");
-            this.setLevel(p_9180_);
-            p_9180_.addDuringPortalTeleport(this);
-            this.setRot(portalinfo.yRot, portalinfo.xRot);
-            this.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z);
-            serverlevel.getProfiler().pop();
-            this.triggerDimensionChangeTriggers(serverlevel);
-            this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
-            playerlist.sendLevelInfo(this, p_9180_);
-            playerlist.sendAllPlayerInfo(this);
-
-            for(MobEffectInstance mobeffectinstance : this.getActiveEffects()) {
-               this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), mobeffectinstance));
-            }
-
-            this.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
+            serverlevel.set(portalinfo.world == null ? p_9180_ : portalinfo.world);
+            Entity e = teleporter.placeEntity( this, serverlevel.get(), p_9180_, this.getYRot(), spawnPortal -> {//Forge: Start vanilla logic
+               serverlevel.get().getProfiler().push( "moving" );
+               if (serverlevel.get() == null) {
+               } else //CraftBukkit - empty to fall trough to null to event
+                  if (resourcekey == Level.OVERWORLD && p_9180_.dimension() == Level.NETHER) {
+                     this.enteredNetherPosition = this.position();
+                  } else if (spawnPortal && p_9180_.dimension() == Level.END && portalinfo.portalEventInfo != null && portalinfo.portalEventInfo.getCanCreatePortal()) {
+                     this.createEndPlatform( p_9180_, new BlockPos( portalinfo.pos ) );
+                  }
+
+               org.bukkit.Location enter = this.getBukkitEntity().getLocation();
+               org.bukkit.Location exit = (serverlevel.get() == null) ? null : new org.bukkit.Location( p_9180_.getWorld(), portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z, portalinfo.yRot, portalinfo.xRot );
+               org.bukkit.event.player.PlayerTeleportEvent tpEvent = new org.bukkit.event.player.PlayerTeleportEvent( this.getBukkitEntity(), enter, exit, cause );
+               org.bukkit.Bukkit.getServer().getPluginManager().callEvent( tpEvent );
+               if (tpEvent.isCancelled() || tpEvent.getTo() == null) {
+                  return null;
+               }
+               exit = tpEvent.getTo();
+               serverlevel.set( ((org.bukkit.craftbukkit.v1_18_R2.CraftWorld) exit.getWorld()).getHandle() );
+               // CraftBukkit end
+
+               serverlevel.get().getProfiler().pop();
+               serverlevel.get().getProfiler().push( "placing" );
+               this.isChangingDimension = true;
+
+               this.connection.send( new ClientboundRespawnPacket( serverlevel.get().dimensionTypeRegistration(), serverlevel.get().dimension(), BiomeManager.obfuscateSeed( serverlevel.get().getSeed() ), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), serverlevel.get().isDebug(), serverlevel.get().isFlat(), true ) );
+               this.connection.send( new ClientboundChangeDifficultyPacket( serverlevel.get().getLevelData().getDifficulty(), serverlevel.get().getLevelData().isDifficultyLocked() ) );
+               PlayerList playerList = this.server.getPlayerList();
+
+               playerList.sendPlayerPermissionLevel( this );
+               serverlevel.get().removePlayerImmediately( this, Entity.RemovalReason.CHANGED_DIMENSION );
+               this.revive();
+
+               this.setLevel( p_9180_ );
+               p_9180_.addDuringPortalTeleport( this );
+               this.connection.teleport( exit );
+               this.connection.resetPosition();
+               this.setRot( portalinfo.yRot, portalinfo.xRot );
+               serverlevel.get().getProfiler().pop();
+               this.triggerDimensionChangeTriggers( serverlevel.get() );
+               return this;//forge: this is part of the ITeleporter patch
+            } );//Forge: End vanilla logic
+
+
+            if (e != this)
+               throw new java.lang.IllegalArgumentException( String.format( java.util.Locale.ENGLISH, "Teleporter %s returned not the player entity but instead %s, expected PlayerEntity %s", teleporter, e, this ) );
+            this.connection.send( new ClientboundPlayerAbilitiesPacket( this.getAbilities() ) );
+            playerlist.sendLevelInfo( this, p_9180_ );
+            playerlist.sendAllPlayerInfo( this );
+
+            for (MobEffectInstance mobeffectinstance : this.getActiveEffects()) {
+               this.connection.send( new ClientboundUpdateMobEffectPacket( this.getId(), mobeffectinstance ) );
+            }
+
+            if (teleporter.playTeleportSound( this, serverlevel.get(), p_9180_ ))
+               this.connection.send( new ClientboundLevelEventPacket( 1032, BlockPos.ZERO, 0, false ) );
             this.lastSentExp = -1;
             this.lastSentHealth = -1.0F;
             this.lastSentFood = -1;
+            net.minecraftforge.event.ForgeEventFactory.firePlayerChangedDimensionEvent( this, resourcekey, p_9180_.dimension() );
+            // CraftBukkit start
+            org.bukkit.event.player.PlayerChangedWorldEvent changeEvent = new org.bukkit.event.player.PlayerChangedWorldEvent( this.getBukkitEntity(), serverlevel.get().getWorld() );
+            this.level.getCraftServer().getPluginManager().callEvent( changeEvent );
+            // CraftBukkit end
          }
 
          return this;
       }
    }
+
+   // CraftBukkit start
+   @Override
+   protected org.bukkit.craftbukkit.v1_18_R2.event.CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitServerLevel, BlockPos exitPosition, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+      org.bukkit.Location enter = this.getBukkitEntity().getLocation();
+      org.bukkit.Location exit = new org.bukkit.Location( exitServerLevel.getWorld(), exitPosition.getX(), exitPosition.getY(), exitPosition.getZ(), getYRot(), getXRot() );
+      org.bukkit.event.player.PlayerPortalEvent event = new org.bukkit.event.player.PlayerPortalEvent( this.getBukkitEntity(), enter, exit, cause, searchRadius, true, creationRadius );
+      org.bukkit.Bukkit.getServer().getPluginManager().callEvent( event );
+      if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null) {
+         return null;
+      }
+      return new org.bukkit.craftbukkit.v1_18_R2.event.CraftPortalEvent( event );
+   }
+   // CraftBukkit end
 
    private void createEndPlatform(ServerLevel p_9007_, BlockPos p_9008_) {
       BlockPos.MutableBlockPos blockpos$mutableblockpos = p_9008_.mutable();
 
-      for(int i = -2; i <= 2; ++i) {
-         for(int j = -2; j <= 2; ++j) {
-            for(int k = -1; k < 3; ++k) {
+      for (int i = -2; i <= 2; ++i) {
+         for (int j = -2; j <= 2; ++j) {
+            for (int k = -1; k < 3; ++k) {
                BlockState blockstate = k == -1 ? Blocks.OBSIDIAN.defaultBlockState() : Blocks.AIR.defaultBlockState();
-               p_9007_.setBlockAndUpdate(blockpos$mutableblockpos.set(p_9008_).move(j, k, i), blockstate);
+               p_9007_.setBlockAndUpdate( blockpos$mutableblockpos.set( p_9008_ ).move( j, k, i ), blockstate );
             }
          }
       }
 
    }
 
+   //Magma start - add original method
    protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_184131_, BlockPos p_184132_, boolean p_184133_, WorldBorder p_184134_) {
       Optional<BlockUtil.FoundRectangle> optional = super.getExitPortal(p_184131_, p_184132_, p_184133_, p_184134_);
       if (optional.isPresent()) {
@@ -763,9 +_,27 @@
       } else {
          Direction.Axis direction$axis = this.level.getBlockState(this.portalEntrancePos).getOptionalValue(NetherPortalBlock.AXIS).orElse(Direction.Axis.X);
          Optional<BlockUtil.FoundRectangle> optional1 = p_184131_.getPortalForcer().createPortal(p_184132_, direction$axis);
-         if (!optional1.isPresent()) {
+         /*if (!optional1.isPresent()) {
             LOGGER.error("Unable to create a portal, likely target out of worldborder");
-         }
+         }*/ //CraftBukkit commented this out for some reason, but I'm not sure why.
+
+         return optional1;
+      }
+   }
+   //Magma end
+
+   protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_184131_, BlockPos p_184132_, boolean p_184133_, WorldBorder p_184134_, int searchRadius, boolean canCreatePortal, int createRadius) { // CraftBukkit
+      Optional<BlockUtil.FoundRectangle> optional = super.getExitPortal( p_184131_, p_184132_, p_184133_, p_184134_, searchRadius, canCreatePortal, createRadius ); // CraftBukkit
+      if (optional.isPresent() || !canCreatePortal) { // CraftBukkit
+         return optional;
+      } else {
+         Direction.Axis direction$axis = this.level.getBlockState( this.portalEntrancePos ).getOptionalValue( NetherPortalBlock.AXIS ).orElse( Direction.Axis.X );
+         Optional<BlockUtil.FoundRectangle> optional1 = p_184131_.getPortalForcer().createPortal( p_184132_, direction$axis, this, createRadius );
+         // CraftBukkit start
+            /*if (!optional1.isPresent()) {
+                LOGGER.error( "Unable to create a portal, likely target out of worldborder" );
+            }*/
+         // CraftBukkit end
 
          return optional1;
       }
@@ -774,12 +_,22 @@
    public void triggerDimensionChangeTriggers(ServerLevel p_9210_) {
       ResourceKey<Level> resourcekey = p_9210_.dimension();
       ResourceKey<Level> resourcekey1 = this.level.dimension();
-      CriteriaTriggers.CHANGED_DIMENSION.trigger(this, resourcekey, resourcekey1);
-      if (resourcekey == Level.NETHER && resourcekey1 == Level.OVERWORLD && this.enteredNetherPosition != null) {
-         CriteriaTriggers.NETHER_TRAVEL.trigger(this, this.enteredNetherPosition);
-      }
-
-      if (resourcekey1 != Level.NETHER) {
+
+      // CraftBukkit start
+      ResourceKey<Level> maindimensionkey = org.bukkit.craftbukkit.v1_18_R2.util.CraftDimensionUtil.getMainDimensionKey( p_9210_ );
+      ResourceKey<Level> maindimensionkey1 = org.bukkit.craftbukkit.v1_18_R2.util.CraftDimensionUtil.getMainDimensionKey( this.level );
+
+      CriteriaTriggers.CHANGED_DIMENSION.trigger( this, maindimensionkey, maindimensionkey1 );
+      if (maindimensionkey != resourcekey || maindimensionkey1 != resourcekey1) {
+         CriteriaTriggers.CHANGED_DIMENSION.trigger( this, resourcekey, resourcekey1 );
+      }
+
+      if (maindimensionkey == Level.NETHER && maindimensionkey1 == Level.OVERWORLD && this.enteredNetherPosition != null) {
+         // CraftBukkit end
+         CriteriaTriggers.NETHER_TRAVEL.trigger( this, this.enteredNetherPosition );
+      }
+
+      if (maindimensionkey1 != Level.NETHER) { // CraftBukkit
          this.enteredNetherPosition = null;
       }
 
@@ -789,97 +_,145 @@
       if (p_9014_.isSpectator()) {
          return this.getCamera() == this;
       } else {
-         return this.isSpectator() ? false : super.broadcastToPlayer(p_9014_);
+         return this.isSpectator() ? false : super.broadcastToPlayer( p_9014_ );
       }
    }
 
    public void take(Entity p_9047_, int p_9048_) {
-      super.take(p_9047_, p_9048_);
+      super.take( p_9047_, p_9048_ );
       this.containerMenu.broadcastChanges();
    }
 
+   //Magma start - original method (fixes mixin inject)
+   @Override
    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_) {
-      Direction direction = this.level.getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
+      boolean force = startSleepInBed_force; //Magma
+      startSleepInBed_force = false; //reset
+
+      Direction enumdirection = (Direction) this.level.getBlockState( p_9115_ ).getValue( HorizontalDirectionalBlock.FACING );
+      Either<Player.BedSleepingProblem, Unit> bedResult = null;
+
+      java.util.Optional<BlockPos> optAt = java.util.Optional.of( p_9115_ );
+      Player.BedSleepingProblem ret = net.minecraftforge.event.ForgeEventFactory.onPlayerSleepInBed( this, optAt );
+      if (ret != null)
+         bedResult = Either.left( ret );
       if (!this.isSleeping() && this.isAlive()) {
          if (!this.level.dimensionType().natural()) {
-            return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
-         } else if (!this.bedInRange(p_9115_, direction)) {
-            return Either.left(Player.BedSleepingProblem.TOO_FAR_AWAY);
-         } else if (this.bedBlocked(p_9115_, direction)) {
-            return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
+            bedResult = Either.left( Player.BedSleepingProblem.NOT_POSSIBLE_HERE );
+         } else if (!this.bedInRange( p_9115_, enumdirection )) {
+            bedResult = Either.left( Player.BedSleepingProblem.TOO_FAR_AWAY );
+         } else if (this.bedBlocked( p_9115_, enumdirection )) {
+            bedResult = Either.left( Player.BedSleepingProblem.OBSTRUCTED );
          } else {
-            this.setRespawnPosition(this.level.dimension(), p_9115_, this.getYRot(), false, true);
-            if (this.level.isDay()) {
-               return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
+            this.setRespawnPosition( this.level.dimension(), p_9115_, this.getYRot(), false, true );
+            if (!net.minecraftforge.event.ForgeEventFactory.fireSleepingTimeCheck( this, optAt )) {
+               bedResult = Either.left( Player.BedSleepingProblem.NOT_POSSIBLE_NOW );
             } else {
                if (!this.isCreative()) {
                   double d0 = 8.0D;
                   double d1 = 5.0D;
-                  Vec3 vec3 = Vec3.atBottomCenterOf(p_9115_);
-                  List<Monster> list = this.level.getEntitiesOfClass(Monster.class, new AABB(vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D), (p_9062_) -> {
-                     return p_9062_.isPreventingPlayerRest(this);
-                  });
+                  Vec3 vec3 = Vec3.atBottomCenterOf( p_9115_ );
+                  List<Monster> list = this.level.getEntitiesOfClass( Monster.class, new AABB( vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D ), (p_9062_) -> {
+                     return p_9062_.isPreventingPlayerRest( this );
+                  } );
                   if (!list.isEmpty()) {
-                     return Either.left(Player.BedSleepingProblem.NOT_SAFE);
+                     bedResult = Either.left( Player.BedSleepingProblem.NOT_SAFE );
                   }
                }
 
-               Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight((p_9029_) -> {
-                  this.awardStat(Stats.SLEEP_IN_BED);
-                  CriteriaTriggers.SLEPT_IN_BED.trigger(this);
-               });
-               if (!this.getLevel().canSleepThroughNights()) {
-                  this.displayClientMessage(new TranslatableComponent("sleep.not_possible"), true);
-               }
-
-               ((ServerLevel)this.level).updateSleepingPlayerList();
-               return either;
+               if (bedResult == null)
+                  bedResult = Either.right( Unit.INSTANCE );
             }
          }
       } else {
-         return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
-      }
+         bedResult = Either.left( Player.BedSleepingProblem.OTHER_PROBLEM );
+      }
+
+      if (bedResult.left().orElse( null ) == Player.BedSleepingProblem.OTHER_PROBLEM) {
+         return bedResult; // return immediately if the result is not bypassable by plugins
+      }
+
+      if (force) {
+         bedResult = Either.right( Unit.INSTANCE );
+      }
+
+      bedResult = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callPlayerBedEnterEvent( this, p_9115_, bedResult );
+      if (bedResult.left().isPresent()) {
+         return bedResult;
+      }
+
+
+      Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed( p_9115_ ).ifRight( (unit) -> {
+         this.awardStat( Stats.SLEEP_IN_BED );
+         CriteriaTriggers.SLEPT_IN_BED.trigger( this );
+      } );
+      if (!this.getLevel().canSleepThroughNights()) {
+         this.displayClientMessage( new TranslatableComponent( "sleep.not_possible" ), true );
+      }
+
+      ((ServerLevel) this.level).updateSleepingPlayerList();
+      return either;
    }
+   //Magma end
 
    public void startSleeping(BlockPos p_9190_) {
-      this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
-      super.startSleeping(p_9190_);
+      this.resetStat( Stats.CUSTOM.get( Stats.TIME_SINCE_REST ) );
+      super.startSleeping( p_9190_ );
    }
 
    private boolean bedInRange(BlockPos p_9117_, Direction p_9118_) {
-      return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
+      if (p_9118_ == null) return false;
+      return this.isReachableBedBlock( p_9117_ ) || this.isReachableBedBlock( p_9117_.relative( p_9118_.getOpposite() ) );
    }
 
    private boolean isReachableBedBlock(BlockPos p_9223_) {
-      Vec3 vec3 = Vec3.atBottomCenterOf(p_9223_);
-      return Math.abs(this.getX() - vec3.x()) <= 3.0D && Math.abs(this.getY() - vec3.y()) <= 2.0D && Math.abs(this.getZ() - vec3.z()) <= 3.0D;
+      Vec3 vec3 = Vec3.atBottomCenterOf( p_9223_ );
+      return Math.abs( this.getX() - vec3.x() ) <= 3.0D && Math.abs( this.getY() - vec3.y() ) <= 2.0D && Math.abs( this.getZ() - vec3.z() ) <= 3.0D;
    }
 
    private boolean bedBlocked(BlockPos p_9192_, Direction p_9193_) {
       BlockPos blockpos = p_9192_.above();
-      return !this.freeAt(blockpos) || !this.freeAt(blockpos.relative(p_9193_.getOpposite()));
+      return !this.freeAt( blockpos ) || !this.freeAt( blockpos.relative( p_9193_.getOpposite() ) );
    }
 
    public void stopSleepInBed(boolean p_9165_, boolean p_9166_) {
+      if (!this.isSleeping()) return; // CraftBukkit - Can't leave bed if not in one!
+      // CraftBukkit start - fire PlayerBedLeaveEvent
+      org.bukkit.craftbukkit.v1_18_R2.entity.CraftPlayer player = this.getBukkitEntity();
+      BlockPos bedPosition = this.getSleepingPos().orElse( null );
+
+      org.bukkit.block.Block bed;
+      if (bedPosition != null) {
+         bed = this.level.getWorld().getBlockAt( bedPosition.getX(), bedPosition.getY(), bedPosition.getZ() );
+      } else {
+         bed = this.level.getWorld().getBlockAt( player.getLocation() );
+      }
+
+      org.bukkit.event.player.PlayerBedLeaveEvent event = new org.bukkit.event.player.PlayerBedLeaveEvent( player, bed, true );
+      this.level.getCraftServer().getPluginManager().callEvent( event );
+      if (event.isCancelled()) {
+         return;
+      }
+      // CraftBukkit end
       if (this.isSleeping()) {
-         this.getLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(this, 2));
+         this.getLevel().getChunkSource().broadcastAndSend( this, new ClientboundAnimatePacket( this, 2 ) );
       }
 
-      super.stopSleepInBed(p_9165_, p_9166_);
+      super.stopSleepInBed( p_9165_, p_9166_ );
       if (this.connection != null) {
-         this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+         this.connection.teleport( this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot() );
       }
 
    }
 
    public boolean startRiding(Entity p_9054_, boolean p_9055_) {
       Entity entity = this.getVehicle();
-      if (!super.startRiding(p_9054_, p_9055_)) {
+      if (!super.startRiding( p_9054_, p_9055_ )) {
          return false;
       } else {
          Entity entity1 = this.getVehicle();
          if (entity1 != entity && this.connection != null) {
-            this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+            this.connection.teleport( this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot() );
          }
 
          return true;
@@ -891,7 +_,7 @@
       super.stopRiding();
       Entity entity1 = this.getVehicle();
       if (entity1 != entity && this.connection != null) {
-         this.connection.dismount(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+         this.connection.dismount( this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot() );
       }
 
    }
@@ -899,13 +_,13 @@
    public void dismountTo(double p_143389_, double p_143390_, double p_143391_) {
       this.removeVehicle();
       if (this.connection != null) {
-         this.connection.dismount(p_143389_, p_143390_, p_143391_, this.getYRot(), this.getXRot());
+         this.connection.dismount( p_143389_, p_143390_, p_143391_, this.getYRot(), this.getXRot() );
       }
 
    }
 
    public boolean isInvulnerableTo(DamageSource p_9182_) {
-      return super.isInvulnerableTo(p_9182_) || this.isChangingDimension() || this.getAbilities().invulnerable && p_9182_ == DamageSource.WITHER;
+      return super.isInvulnerableTo( p_9182_ ) || this.isChangingDimension() || this.getAbilities().invulnerable && p_9182_ == DamageSource.WITHER;
    }
 
    protected void checkFallDamage(double p_8976_, boolean p_8977_, BlockState p_8978_, BlockPos p_8979_) {
@@ -913,7 +_,7 @@
 
    protected void onChangedBlock(BlockPos p_9206_) {
       if (!this.isSpectator()) {
-         super.onChangedBlock(p_9206_);
+         super.onChangedBlock( p_9206_ );
       }
 
    }
@@ -921,83 +_,140 @@
    public void doCheckFallDamage(double p_8973_, boolean p_8974_) {
       if (!this.touchingUnloadedChunk()) {
          BlockPos blockpos = this.getOnPos();
-         super.checkFallDamage(p_8973_, p_8974_, this.level.getBlockState(blockpos), blockpos);
+         super.checkFallDamage( p_8973_, p_8974_, this.level.getBlockState( blockpos ), blockpos );
       }
    }
 
    public void openTextEdit(SignBlockEntity p_9101_) {
-      p_9101_.setAllowedPlayerEditor(this.getUUID());
-      this.connection.send(new ClientboundBlockUpdatePacket(this.level, p_9101_.getBlockPos()));
-      this.connection.send(new ClientboundOpenSignEditorPacket(p_9101_.getBlockPos()));
+      p_9101_.setAllowedPlayerEditor( this.getUUID() );
+      this.connection.send( new ClientboundBlockUpdatePacket( this.level, p_9101_.getBlockPos() ) );
+      this.connection.send( new ClientboundOpenSignEditorPacket( p_9101_.getBlockPos() ) );
    }
 
    public void nextContainerCounter() {
       this.containerCounter = this.containerCounter % 100 + 1;
    }
 
+   // CraftBukkit start
+   public int nextContainerCounterInt() {
+      this.containerCounter = this.containerCounter % 100 + 1;
+      return containerCounter; // CraftBukkit
+   }
+   // CraftBukkit end
+
    public OptionalInt openMenu(@Nullable MenuProvider p_9033_) {
       if (p_9033_ == null) {
          return OptionalInt.empty();
       } else {
+         // CraftBukkit start - SPIGOT-6552: Handle inventory closing in CraftEventFactory#callInventoryOpenEvent(...)
+          /*
          if (this.containerMenu != this.inventoryMenu) {
             this.closeContainer();
          }
+         */
+         // CraftBukkit end
 
          this.nextContainerCounter();
-         AbstractContainerMenu abstractcontainermenu = p_9033_.createMenu(this.containerCounter, this.getInventory(), this);
+         AbstractContainerMenu abstractcontainermenu = p_9033_.createMenu( this.containerCounter, this.getInventory(), this );
+
+         // CraftBukkit start - Inventory open hook
+         if (abstractcontainermenu != null) {
+            abstractcontainermenu.setTitle( p_9033_.getDisplayName() );
+            boolean cancelled = false;
+            // magma start - capture container owner
+            org.magmafoundation.magma.helpers.InventoryViewHelper.captureContainerOwner(this);
+            abstractcontainermenu = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callInventoryOpenEvent( this, abstractcontainermenu, cancelled );
+            org.magmafoundation.magma.helpers.InventoryViewHelper.resetContainerOwner();
+            if (abstractcontainermenu == null && !cancelled) { // Let pre-cancelled events fall through
+               // SPIGOT-5263 - close chest if cancelled
+               if (p_9033_ instanceof Container) {
+                  ((Container) p_9033_).stopOpen( this );
+               } else if (p_9033_ instanceof net.minecraft.world.level.block.ChestBlock.DoubleInventory) {
+                  // SPIGOT-5355 - double chests too :(
+                  ((net.minecraft.world.level.block.ChestBlock.DoubleInventory) p_9033_).inventorylargechest.stopOpen( this );
+               }
+               return OptionalInt.empty();
+            }
+         }
+         // CraftBukkit end
+
          if (abstractcontainermenu == null) {
             if (this.isSpectator()) {
-               this.displayClientMessage((new TranslatableComponent("container.spectatorCantOpen")).withStyle(ChatFormatting.RED), true);
+               this.displayClientMessage( (new TranslatableComponent( "container.spectatorCantOpen" )).withStyle( ChatFormatting.RED ), true );
             }
 
             return OptionalInt.empty();
          } else {
-            this.connection.send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
-            this.initMenu(abstractcontainermenu);
+            // CraftBukkit start
             this.containerMenu = abstractcontainermenu;
-            return OptionalInt.of(this.containerCounter);
+            this.connection.send( new ClientboundOpenScreenPacket( abstractcontainermenu.containerId, abstractcontainermenu.getType(), abstractcontainermenu.getTitle() ) );
+            // CraftBukkit end
+            this.initMenu( abstractcontainermenu );
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post( new net.minecraftforge.event.entity.player.PlayerContainerEvent.Open( this, this.containerMenu ) );
+            return OptionalInt.of( this.containerCounter );
          }
       }
    }
 
    public void sendMerchantOffers(int p_8988_, MerchantOffers p_8989_, int p_8990_, int p_8991_, boolean p_8992_, boolean p_8993_) {
-      this.connection.send(new ClientboundMerchantOffersPacket(p_8988_, p_8989_, p_8990_, p_8991_, p_8992_, p_8993_));
+      this.connection.send( new ClientboundMerchantOffersPacket( p_8988_, p_8989_, p_8990_, p_8991_, p_8992_, p_8993_ ) );
    }
 
    public void openHorseInventory(AbstractHorse p_9059_, Container p_9060_) {
-      if (this.containerMenu != this.inventoryMenu) {
-         this.closeContainer();
-      }
-
+      // CraftBukkit start - Inventory open hook
       this.nextContainerCounter();
-      this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, p_9060_.getContainerSize(), p_9059_.getId()));
-      this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_);
-      this.initMenu(this.containerMenu);
+      AbstractContainerMenu container = new HorseInventoryMenu( this.containerCounter, this.getInventory(), p_9060_, p_9059_ );
+      container.setTitle( p_9059_.getDisplayName() );
+      container = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callInventoryOpenEvent( this, container );
+      if (container == null) {
+         p_9060_.stopOpen( this );
+         return;
+      }
+      // CraftBukkit end
+      if (this.containerMenu != this.inventoryMenu) {
+         this.closeContainer();
+      }
+
+      // this.nextContainerCounter();  // CraftBukkit - moved up
+      this.connection.send( new ClientboundHorseScreenOpenPacket( this.containerCounter, p_9060_.getContainerSize(), p_9059_.getId() ) );
+      this.containerMenu = container; // CraftBukkit
+      this.initMenu( this.containerMenu );
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post( new net.minecraftforge.event.entity.player.PlayerContainerEvent.Open( this, this.containerMenu ) );
    }
 
    public void openItemGui(ItemStack p_9082_, InteractionHand p_9083_) {
-      if (p_9082_.is(Items.WRITTEN_BOOK)) {
-         if (WrittenBookItem.resolveBookComponents(p_9082_, this.createCommandSourceStack(), this)) {
+      if (p_9082_.is( Items.WRITTEN_BOOK )) {
+         if (WrittenBookItem.resolveBookComponents( p_9082_, this.createCommandSourceStack(), this )) {
             this.containerMenu.broadcastChanges();
          }
 
-         this.connection.send(new ClientboundOpenBookPacket(p_9083_));
+         this.connection.send( new ClientboundOpenBookPacket( p_9083_ ) );
       }
 
    }
 
    public void openCommandBlock(CommandBlockEntity p_9099_) {
-      this.connection.send(ClientboundBlockEntityDataPacket.create(p_9099_, BlockEntity::saveWithoutMetadata));
+      this.connection.send( ClientboundBlockEntityDataPacket.create( p_9099_, BlockEntity::saveWithoutMetadata ) );
    }
 
    public void closeContainer() {
-      this.connection.send(new ClientboundContainerClosePacket(this.containerMenu.containerId));
+      this.connection.send( new ClientboundContainerClosePacket( this.containerMenu.containerId ) );
       this.doCloseContainer();
    }
 
    public void doCloseContainer() {
-      this.containerMenu.removed(this);
-      this.inventoryMenu.transferState(this.containerMenu);
+      //Magma start - fix inventory closing
+      if (this.containerMenu != this.inventoryMenu) {
+         Player old = org.magmafoundation.magma.helpers.InventoryViewHelper.getContainerOwner();
+         org.magmafoundation.magma.helpers.InventoryViewHelper.captureContainerOwner(this);
+         org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.handleInventoryCloseEvent(this);
+         org.magmafoundation.magma.helpers.InventoryViewHelper.captureContainerOwner(old);
+      }
+      //Magma end
+
+      this.containerMenu.removed( this );
+      this.inventoryMenu.transferState( this.containerMenu );
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post( new net.minecraftforge.event.entity.player.PlayerContainerEvent.Close( this, this.containerMenu ) );
       this.containerMenu = this.inventoryMenu;
    }
 
@@ -1012,43 +_,46 @@
          }
 
          this.jumping = p_8983_;
-         this.setShiftKeyDown(p_8984_);
+         this.setShiftKeyDown( p_8984_ );
       }
 
    }
 
    public void awardStat(Stat<?> p_9026_, int p_9027_) {
-      this.stats.increment(this, p_9026_, p_9027_);
-      this.getScoreboard().forAllObjectives(p_9026_, this.getScoreboardName(), (p_8996_) -> {
-         p_8996_.add(p_9027_);
-      });
+      this.stats.increment( this, p_9026_, p_9027_ );
+      // CraftBukkit - Get our scores instead
+      this.level.getCraftServer().getScoreboardManager().getScoreboardScores( p_9026_, this.getScoreboardName(), (p_8996_) -> {
+         p_8996_.add( p_9027_ );
+      } );
    }
 
    public void resetStat(Stat<?> p_9024_) {
-      this.stats.setValue(this, p_9024_, 0);
-      this.getScoreboard().forAllObjectives(p_9024_, this.getScoreboardName(), Score::reset);
+      this.stats.setValue( this, p_9024_, 0 );
+
+      // CraftBukkit - Get our scores instead
+      this.level.getCraftServer().getScoreboardManager().getScoreboardScores( p_9024_, this.getScoreboardName(), Score::reset );
    }
 
    public int awardRecipes(Collection<Recipe<?>> p_9129_) {
-      return this.recipeBook.addRecipes(p_9129_, this);
+      return this.recipeBook.addRecipes( p_9129_, this );
    }
 
    public void awardRecipesByKey(ResourceLocation[] p_9168_) {
       List<Recipe<?>> list = Lists.newArrayList();
 
-      for(ResourceLocation resourcelocation : p_9168_) {
-         this.server.getRecipeManager().byKey(resourcelocation).ifPresent(list::add);
+      for (ResourceLocation resourcelocation : p_9168_) {
+         this.server.getRecipeManager().byKey( resourcelocation ).ifPresent( list::add );
       }
 
-      this.awardRecipes(list);
+      this.awardRecipes( list );
    }
 
    public int resetRecipes(Collection<Recipe<?>> p_9195_) {
-      return this.recipeBook.removeRecipes(p_9195_, this);
+      return this.recipeBook.removeRecipes( p_9195_, this );
    }
 
    public void giveExperiencePoints(int p_9208_) {
-      super.giveExperiencePoints(p_9208_);
+      super.giveExperiencePoints( p_9208_ );
       this.lastSentExp = -1;
    }
 
@@ -1056,7 +_,7 @@
       this.disconnected = true;
       this.ejectPassengers();
       if (this.isSleeping()) {
-         this.stopSleepInBed(true, false);
+         this.stopSleepInBed( true, false );
       }
 
    }
@@ -1067,129 +_,154 @@
 
    public void resetSentInfo() {
       this.lastSentHealth = -1.0E8F;
-   }
+      this.lastSentExp = -1; // CraftBukkit - Added to reset
+   }
+
+   // CraftBukkit start - Support multi-line messages
+   public void sendMessage(UUID uuid, Component[] components) {
+      for (Component component : components) {
+         this.sendMessage( component, (uuid == null) ? Util.NIL_UUID : uuid );
+      }
+   }
+   // CraftBukkit end
+
 
    public void displayClientMessage(Component p_9154_, boolean p_9155_) {
-      this.sendMessage(p_9154_, p_9155_ ? ChatType.GAME_INFO : ChatType.CHAT, Util.NIL_UUID);
+      this.sendMessage( p_9154_, p_9155_ ? ChatType.GAME_INFO : ChatType.CHAT, Util.NIL_UUID );
    }
 
    protected void completeUsingItem() {
       if (!this.useItem.isEmpty() && this.isUsingItem()) {
-         this.connection.send(new ClientboundEntityEventPacket(this, (byte)9));
+         this.connection.send( new ClientboundEntityEventPacket( this, (byte) 9 ) );
          super.completeUsingItem();
       }
 
    }
 
    public void lookAt(EntityAnchorArgument.Anchor p_9112_, Vec3 p_9113_) {
-      super.lookAt(p_9112_, p_9113_);
-      this.connection.send(new ClientboundPlayerLookAtPacket(p_9112_, p_9113_.x, p_9113_.y, p_9113_.z));
+      super.lookAt( p_9112_, p_9113_ );
+      this.connection.send( new ClientboundPlayerLookAtPacket( p_9112_, p_9113_.x, p_9113_.y, p_9113_.z ) );
    }
 
    public void lookAt(EntityAnchorArgument.Anchor p_9108_, Entity p_9109_, EntityAnchorArgument.Anchor p_9110_) {
-      Vec3 vec3 = p_9110_.apply(p_9109_);
-      super.lookAt(p_9108_, vec3);
-      this.connection.send(new ClientboundPlayerLookAtPacket(p_9108_, p_9109_, p_9110_));
+      Vec3 vec3 = p_9110_.apply( p_9109_ );
+      super.lookAt( p_9108_, vec3 );
+      this.connection.send( new ClientboundPlayerLookAtPacket( p_9108_, p_9109_, p_9110_ ) );
    }
 
    public void restoreFrom(ServerPlayer p_9016_, boolean p_9017_) {
       this.textFilteringEnabled = p_9016_.textFilteringEnabled;
-      this.gameMode.setGameModeForPlayer(p_9016_.gameMode.getGameModeForPlayer(), p_9016_.gameMode.getPreviousGameModeForPlayer());
+      this.gameMode.setGameModeForPlayer( p_9016_.gameMode.getGameModeForPlayer(), p_9016_.gameMode.getPreviousGameModeForPlayer() );
       if (p_9017_) {
-         this.getInventory().replaceWith(p_9016_.getInventory());
-         this.setHealth(p_9016_.getHealth());
+         this.getInventory().replaceWith( p_9016_.getInventory() );
+         this.setHealth( p_9016_.getHealth() );
          this.foodData = p_9016_.foodData;
          this.experienceLevel = p_9016_.experienceLevel;
          this.totalExperience = p_9016_.totalExperience;
          this.experienceProgress = p_9016_.experienceProgress;
-         this.setScore(p_9016_.getScore());
+         this.setScore( p_9016_.getScore() );
          this.portalEntrancePos = p_9016_.portalEntrancePos;
-      } else if (this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || p_9016_.isSpectator()) {
-         this.getInventory().replaceWith(p_9016_.getInventory());
+      } else if (this.level.getGameRules().getBoolean( GameRules.RULE_KEEPINVENTORY ) || p_9016_.isSpectator()) {
+         this.getInventory().replaceWith( p_9016_.getInventory() );
          this.experienceLevel = p_9016_.experienceLevel;
          this.totalExperience = p_9016_.totalExperience;
          this.experienceProgress = p_9016_.experienceProgress;
-         this.setScore(p_9016_.getScore());
+         this.setScore( p_9016_.getScore() );
       }
+
+      Inventory forgeCaptures = p_9016_.getForgeCapturesAndClear();
+      if (forgeCaptures != null)
+         forgeCaptures.items.stream().filter(item -> !item.isEmpty()).forEach(item -> this.getInventory().add(item));
+
+      this.getInventory().setChanged();
 
       this.enchantmentSeed = p_9016_.enchantmentSeed;
       this.enderChestInventory = p_9016_.enderChestInventory;
-      this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, p_9016_.getEntityData().get(DATA_PLAYER_MODE_CUSTOMISATION));
+      this.getEntityData().set( DATA_PLAYER_MODE_CUSTOMISATION, p_9016_.getEntityData().get( DATA_PLAYER_MODE_CUSTOMISATION ) );
       this.lastSentExp = -1;
       this.lastSentHealth = -1.0F;
       this.lastSentFood = -1;
-      this.recipeBook.copyOverData(p_9016_.recipeBook);
+      //this.recipeBook.copyOverData( p_9016_.recipeBook ); // CraftBukkit
       this.seenCredits = p_9016_.seenCredits;
       this.enteredNetherPosition = p_9016_.enteredNetherPosition;
-      this.setShoulderEntityLeft(p_9016_.getShoulderEntityLeft());
-      this.setShoulderEntityRight(p_9016_.getShoulderEntityRight());
+      this.setShoulderEntityLeft( p_9016_.getShoulderEntityLeft() );
+      this.setShoulderEntityRight( p_9016_.getShoulderEntityRight() );
+
+      //Copy over a section of the Entity Data from the old player.
+      //Allows mods to specify data that persists after players respawn.
+      CompoundTag old = p_9016_.getPersistentData();
+      if (old.contains( PERSISTED_NBT_TAG ))
+         getPersistentData().put( PERSISTED_NBT_TAG, old.get( PERSISTED_NBT_TAG ) );
+      net.minecraftforge.event.ForgeEventFactory.onPlayerClone( this, p_9016_, !p_9017_ );
    }
 
    protected void onEffectAdded(MobEffectInstance p_143393_, @Nullable Entity p_143394_) {
-      super.onEffectAdded(p_143393_, p_143394_);
-      this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), p_143393_));
+      super.onEffectAdded( p_143393_, p_143394_ );
+      this.connection.send( new ClientboundUpdateMobEffectPacket( this.getId(), p_143393_ ) );
       if (p_143393_.getEffect() == MobEffects.LEVITATION) {
          this.levitationStartTime = this.tickCount;
          this.levitationStartPos = this.position();
       }
 
-      CriteriaTriggers.EFFECTS_CHANGED.trigger(this, p_143394_);
+      CriteriaTriggers.EFFECTS_CHANGED.trigger( this, p_143394_ );
    }
 
    protected void onEffectUpdated(MobEffectInstance p_143396_, boolean p_143397_, @Nullable Entity p_143398_) {
-      super.onEffectUpdated(p_143396_, p_143397_, p_143398_);
-      this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), p_143396_));
-      CriteriaTriggers.EFFECTS_CHANGED.trigger(this, p_143398_);
+      super.onEffectUpdated( p_143396_, p_143397_, p_143398_ );
+      this.connection.send( new ClientboundUpdateMobEffectPacket( this.getId(), p_143396_ ) );
+      CriteriaTriggers.EFFECTS_CHANGED.trigger( this, p_143398_ );
    }
 
    protected void onEffectRemoved(MobEffectInstance p_9184_) {
-      super.onEffectRemoved(p_9184_);
-      this.connection.send(new ClientboundRemoveMobEffectPacket(this.getId(), p_9184_.getEffect()));
+      super.onEffectRemoved( p_9184_ );
+      this.connection.send( new ClientboundRemoveMobEffectPacket( this.getId(), p_9184_.getEffect() ) );
       if (p_9184_.getEffect() == MobEffects.LEVITATION) {
          this.levitationStartPos = null;
       }
 
-      CriteriaTriggers.EFFECTS_CHANGED.trigger(this, (Entity)null);
+      CriteriaTriggers.EFFECTS_CHANGED.trigger( this, (Entity) null );
    }
 
    public void teleportTo(double p_8969_, double p_8970_, double p_8971_) {
-      this.connection.teleport(p_8969_, p_8970_, p_8971_, this.getYRot(), this.getXRot());
+      this.connection.teleport( p_8969_, p_8970_, p_8971_, this.getYRot(), this.getXRot() );
    }
 
    public void moveTo(double p_9171_, double p_9172_, double p_9173_) {
-      this.teleportTo(p_9171_, p_9172_, p_9173_);
+      this.teleportTo( p_9171_, p_9172_, p_9173_ );
       this.connection.resetPosition();
    }
 
    public void crit(Entity p_9045_) {
-      this.getLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(p_9045_, 4));
+      this.getLevel().getChunkSource().broadcastAndSend( this, new ClientboundAnimatePacket( p_9045_, 4 ) );
    }
 
    public void magicCrit(Entity p_9186_) {
-      this.getLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(p_9186_, 5));
+      this.getLevel().getChunkSource().broadcastAndSend( this, new ClientboundAnimatePacket( p_9186_, 5 ) );
    }
 
    public void onUpdateAbilities() {
       if (this.connection != null) {
-         this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
+         this.connection.send( new ClientboundPlayerAbilitiesPacket( this.getAbilities() ) );
          this.updateInvisibilityStatus();
       }
    }
 
    public ServerLevel getLevel() {
-      return (ServerLevel)this.level;
+      return (ServerLevel) this.level;
    }
 
    public boolean setGameMode(GameType p_143404_) {
-      if (!this.gameMode.changeGameModeForPlayer(p_143404_)) {
+      p_143404_ = net.minecraftforge.common.ForgeHooks.onChangeGameType( this, this.gameMode.getGameModeForPlayer(), p_143404_ );
+      if (p_143404_ == null) return false;
+      if (!this.gameMode.changeGameModeForPlayer( p_143404_ )) {
          return false;
       } else {
-         this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, (float)p_143404_.getId()));
+         this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.CHANGE_GAME_MODE, (float) p_143404_.getId() ) );
          if (p_143404_ == GameType.SPECTATOR) {
             this.removeEntitiesOnShoulder();
             this.stopRiding();
          } else {
-            this.setCamera(this);
+            this.setCamera( this );
          }
 
          this.onUpdateAbilities();
@@ -1207,36 +_,49 @@
    }
 
    public void sendMessage(Component p_9144_, UUID p_9145_) {
-      this.sendMessage(p_9144_, ChatType.SYSTEM, p_9145_);
+      this.sendMessage( p_9144_, ChatType.SYSTEM, p_9145_ );
    }
 
    public void sendMessage(Component p_9147_, ChatType p_9148_, UUID p_9149_) {
-      if (this.acceptsChat(p_9148_)) {
-         this.connection.send(new ClientboundChatPacket(p_9147_, p_9148_, p_9149_), (p_9139_) -> {
-            if (!p_9139_.isSuccess() && (p_9148_ == ChatType.GAME_INFO || p_9148_ == ChatType.SYSTEM) && this.acceptsChat(ChatType.SYSTEM)) {
+      if (this.acceptsChat( p_9148_ )) {
+         this.connection.send( new ClientboundChatPacket( p_9147_, p_9148_, p_9149_ ), (p_9139_) -> {
+            if (!p_9139_.isSuccess() && (p_9148_ == ChatType.GAME_INFO || p_9148_ == ChatType.SYSTEM) && this.acceptsChat( ChatType.SYSTEM )) {
                int i = 256;
-               String s = p_9147_.getString(256);
-               Component component = (new TextComponent(s)).withStyle(ChatFormatting.YELLOW);
-               this.connection.send(new ClientboundChatPacket((new TranslatableComponent("multiplayer.message_not_delivered", component)).withStyle(ChatFormatting.RED), ChatType.SYSTEM, p_9149_));
+               String s = p_9147_.getString( 256 );
+               Component component = (new TextComponent( s )).withStyle( ChatFormatting.YELLOW );
+               this.connection.send( new ClientboundChatPacket( (new TranslatableComponent( "multiplayer.message_not_delivered", component )).withStyle( ChatFormatting.RED ), ChatType.SYSTEM, p_9149_ ) );
             }
 
-         });
+         } );
       }
    }
 
    public String getIpAddress() {
       String s = this.connection.connection.getRemoteAddress().toString();
-      s = s.substring(s.indexOf("/") + 1);
-      return s.substring(0, s.indexOf(":"));
+      s = s.substring( s.indexOf( "/" ) + 1 );
+      return s.substring( 0, s.indexOf( ":" ) );
    }
 
    public void updateOptions(ServerboundClientInformationPacket p_9157_) {
+      // CraftBukkit start
+      if (getMainArm() != p_9157_.mainHand()) {
+         org.bukkit.event.player.PlayerChangedMainHandEvent event = new org.bukkit.event.player.PlayerChangedMainHandEvent( getBukkitEntity(), getMainArm() == HumanoidArm.LEFT ? org.bukkit.inventory.MainHand.LEFT : org.bukkit.inventory.MainHand.RIGHT );
+         this.server.server.getPluginManager().callEvent( event );
+      }
+      if (!this.locale.equals( p_9157_.language() )) {
+         org.bukkit.event.player.PlayerLocaleChangeEvent event = new org.bukkit.event.player.PlayerLocaleChangeEvent( getBukkitEntity(), p_9157_.language() );
+         this.server.server.getPluginManager().callEvent( event );
+      }
+      this.locale = p_9157_.language();
+      this.clientViewDistance = p_9157_.viewDistance();
+      // CraftBukkit end
       this.chatVisibility = p_9157_.chatVisibility();
       this.canChatColor = p_9157_.chatColors();
       this.textFilteringEnabled = p_9157_.textFilteringEnabled();
       this.allowsListing = p_9157_.allowsListing();
-      this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, (byte)p_9157_.modelCustomisation());
-      this.getEntityData().set(DATA_PLAYER_MAIN_HAND, (byte)(p_9157_.mainHand() == HumanoidArm.LEFT ? 0 : 1));
+      this.getEntityData().set( DATA_PLAYER_MODE_CUSTOMISATION, (byte) p_9157_.modelCustomisation() );
+      this.getEntityData().set( DATA_PLAYER_MAIN_HAND, (byte) (p_9157_.mainHand() == HumanoidArm.LEFT ? 0 : 1) );
+      this.language = p_9157_.language();
    }
 
    public boolean canChatInColor() {
@@ -1248,23 +_,23 @@
    }
 
    private boolean acceptsChat(ChatType p_143417_) {
-      switch(this.chatVisibility) {
-      case HIDDEN:
-         return p_143417_ == ChatType.GAME_INFO;
-      case SYSTEM:
-         return p_143417_ == ChatType.SYSTEM || p_143417_ == ChatType.GAME_INFO;
-      case FULL:
-      default:
-         return true;
+      switch (this.chatVisibility) {
+         case HIDDEN:
+            return p_143417_ == ChatType.GAME_INFO;
+         case SYSTEM:
+            return p_143417_ == ChatType.SYSTEM || p_143417_ == ChatType.GAME_INFO;
+         case FULL:
+         default:
+            return true;
       }
    }
 
    public void sendTexturePack(String p_143409_, String p_143410_, boolean p_143411_, @Nullable Component p_143412_) {
-      this.connection.send(new ClientboundResourcePackPacket(p_143409_, p_143410_, p_143411_, p_143412_));
+      this.connection.send( new ClientboundResourcePackPacket( p_143409_, p_143410_, p_143411_, p_143412_ ) );
    }
 
    protected int getPermissionLevel() {
-      return this.server.getProfilePermissions(this.getGameProfile());
+      return this.server.getProfilePermissions( this.getGameProfile() );
    }
 
    public void resetLastActionTime() {
@@ -1282,7 +_,7 @@
    protected void updateInvisibilityStatus() {
       if (this.isSpectator()) {
          this.removeEffectParticles();
-         this.setInvisible(true);
+         this.setInvisible( true );
       } else {
          super.updateInvisibilityStatus();
       }
@@ -1290,15 +_,17 @@
    }
 
    public Entity getCamera() {
-      return (Entity)(this.camera == null ? this : this.camera);
+      return (Entity) (this.camera == null ? this : this.camera);
    }
 
    public void setCamera(@Nullable Entity p_9214_) {
       Entity entity = this.getCamera();
-      this.camera = (Entity)(p_9214_ == null ? this : p_9214_);
+      this.camera = (Entity) (p_9214_ == null ? this : p_9214_);
+      while (this.camera instanceof net.minecraftforge.entity.PartEntity<?> partEntity)
+         this.camera = partEntity.getParent(); // FORGE: fix MC-46486
       if (entity != this.camera) {
-         this.connection.send(new ClientboundSetCameraPacket(this.camera));
-         this.teleportTo(this.camera.getX(), this.camera.getY(), this.camera.getZ());
+         this.connection.send( new ClientboundSetCameraPacket( this.camera ) );
+         this.connection.teleport( this.camera.getX(), this.camera.getY(), this.camera.getZ(), this.camera.getYRot(), this.camera.getXRot(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE ); // CraftBukkit
       }
 
    }
@@ -1312,9 +_,9 @@
 
    public void attack(Entity p_9220_) {
       if (this.gameMode.getGameModeForPlayer() == GameType.SPECTATOR) {
-         this.setCamera(p_9220_);
+         this.setCamera( p_9220_ );
       } else {
-         super.attack(p_9220_);
+         super.attack( p_9220_ );
       }
 
    }
@@ -1325,11 +_,17 @@
 
    @Nullable
    public Component getTabListDisplayName() {
-      return null;
+      if (!this.hasTabListName) {
+         this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName( this );
+         this.hasTabListName = true;
+      } else {
+         this.tabListDisplayName = listName;
+      }
+      return this.tabListDisplayName;
    }
 
    public void swing(InteractionHand p_9031_) {
-      super.swing(p_9031_);
+      super.swing( p_9031_ );
       this.resetAttackStrengthTicker();
    }
 
@@ -1345,26 +_,42 @@
       return this.advancements;
    }
 
+   // CraftBukkit start
    public void teleportTo(ServerLevel p_9000_, double p_9001_, double p_9002_, double p_9003_, float p_9004_, float p_9005_) {
+      this.teleportTo(p_9000_, p_9001_, p_9002_, p_9003_, p_9004_, p_9005_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+   }
+
+   public void teleportTo(ServerLevel p_9000_, double p_9001_, double p_9002_, double p_9003_, float p_9004_, float p_9005_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      // CraftBukkit end
       this.setCamera(this);
       this.stopRiding();
+
+      //Magma start - use bukkit teleporting if not caused by a mod calling teleportTo
+      if (cause != org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN) {
+         this.getBukkitEntity().teleport(new org.bukkit.Location(p_9000_.getWorld(), p_9001_, p_9002_, p_9003_, p_9004_, p_9005_), cause);
+         return;
+      }
+      //Magma end
+
       if (p_9000_ == this.level) {
          this.connection.teleport(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
-      } else {
+      } else if (net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, p_9000_.dimension())) {
          ServerLevel serverlevel = this.getLevel();
          LevelData leveldata = p_9000_.getLevelData();
          this.connection.send(new ClientboundRespawnPacket(p_9000_.dimensionTypeRegistration(), p_9000_.dimension(), BiomeManager.obfuscateSeed(p_9000_.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_9000_.isDebug(), p_9000_.isFlat(), true));
          this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
          this.server.getPlayerList().sendPlayerPermissionLevel(this);
          serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-         this.unsetRemoved();
+         this.revive();
          this.moveTo(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
          this.setLevel(p_9000_);
          p_9000_.addDuringCommandTeleport(this);
          this.triggerDimensionChangeTriggers(serverlevel);
          this.connection.teleport(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
+         this.gameMode.setLevel(p_9000_);
          this.server.getPlayerList().sendLevelInfo(this, p_9000_);
          this.server.getPlayerList().sendAllPlayerInfo(this);
+         net.minecraftforge.event.ForgeEventFactory.firePlayerChangedDimensionEvent(this, serverlevel.dimension(), p_9000_.dimension());
       }
 
    }
@@ -1387,10 +_,12 @@
    }
 
    public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPlayerSpawnSet( this, p_9160_ == null ? Level.OVERWORLD : p_9159_, p_9160_, p_9162_ ))
+         return;
       if (p_9160_ != null) {
-         boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
+         boolean flag = p_9160_.equals( this.respawnPosition ) && p_9159_.equals( this.respawnDimension );
          if (p_9163_ && !flag) {
-            this.sendMessage(new TranslatableComponent("block.minecraft.set_spawn"), Util.NIL_UUID);
+            this.sendMessage( new TranslatableComponent( "block.minecraft.set_spawn" ), Util.NIL_UUID );
          }
 
          this.respawnPosition = p_9160_;
@@ -1407,12 +_,12 @@
    }
 
    public void trackChunk(ChunkPos p_184136_, Packet<?> p_184137_) {
-      this.connection.send(p_184137_);
+      this.connection.send( p_184137_ );
    }
 
    public void untrackChunk(ChunkPos p_9089_) {
       if (this.isAlive()) {
-         this.connection.send(new ClientboundForgetLevelChunkPacket(p_9089_.x, p_9089_.z));
+         this.connection.send( new ClientboundForgetLevelChunkPacket( p_9089_.x, p_9089_.z ) );
       }
 
    }
@@ -1426,44 +_,71 @@
    }
 
    public void playNotifySound(SoundEvent p_9019_, SoundSource p_9020_, float p_9021_, float p_9022_) {
-      this.connection.send(new ClientboundSoundPacket(p_9019_, p_9020_, this.getX(), this.getY(), this.getZ(), p_9021_, p_9022_));
+      this.connection.send( new ClientboundSoundPacket( p_9019_, p_9020_, this.getX(), this.getY(), this.getZ(), p_9021_, p_9022_ ) );
    }
 
    public Packet<?> getAddEntityPacket() {
-      return new ClientboundAddPlayerPacket(this);
+      return new ClientboundAddPlayerPacket( this );
    }
 
    public ItemEntity drop(ItemStack p_9085_, boolean p_9086_, boolean p_9087_) {
-      ItemEntity itementity = super.drop(p_9085_, p_9086_, p_9087_);
+      ItemEntity itementity = super.drop( p_9085_, p_9086_, p_9087_ );
       if (itementity == null) {
          return null;
       } else {
-         this.level.addFreshEntity(itementity);
+         if (captureDrops() != null) captureDrops().add( itementity );
+         else
+            this.level.addFreshEntity( itementity );
          ItemStack itemstack = itementity.getItem();
          if (p_9087_) {
             if (!itemstack.isEmpty()) {
-               this.awardStat(Stats.ITEM_DROPPED.get(itemstack.getItem()), p_9085_.getCount());
+               this.awardStat( Stats.ITEM_DROPPED.get( itemstack.getItem() ), p_9085_.getCount() );
             }
 
-            this.awardStat(Stats.DROP);
+            this.awardStat( Stats.DROP );
          }
 
          return itementity;
       }
    }
 
+   private String language = "en_us";
+
+   /**
+    * Returns the language last reported by the player as their local language.
+    * Defaults to en_us if the value is unknown.
+    */
+   public String getLanguage() {
+      return this.language;
+   }
+
+   // We need this as tablistDisplayname may be null even if the the event was fired.
+   private boolean hasTabListName = false;
+   private Component tabListDisplayName = null;
+
+   /**
+    * Force the name displayed in the tab list to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+    */
+   public void refreshTabListName() {
+      Component oldName = this.tabListDisplayName;
+      this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName( this );
+      if (!java.util.Objects.equals( oldName, this.tabListDisplayName )) {
+         this.getServer().getPlayerList().broadcastAll( new net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket( net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket.Action.UPDATE_DISPLAY_NAME, this ) );
+      }
+   }
+
    public TextFilter getTextFilter() {
       return this.textFilter;
    }
 
    public void setLevel(ServerLevel p_143426_) {
       this.level = p_143426_;
-      this.gameMode.setLevel(p_143426_);
+      this.gameMode.setLevel( p_143426_ );
    }
 
    @Nullable
    private static GameType readPlayerMode(@Nullable CompoundTag p_143414_, String p_143415_) {
-      return p_143414_ != null && p_143414_.contains(p_143415_, 99) ? GameType.byId(p_143414_.getInt(p_143415_)) : null;
+      return p_143414_ != null && p_143414_.contains( p_143415_, 99 ) ? GameType.byId( p_143414_.getInt( p_143415_ ) ) : null;
    }
 
    private GameType calculateGameModeForNewPlayer(@Nullable GameType p_143424_) {
@@ -1476,14 +_,14 @@
    }
 
    public void loadGameTypes(@Nullable CompoundTag p_143428_) {
-      this.gameMode.setGameModeForPlayer(this.calculateGameModeForNewPlayer(readPlayerMode(p_143428_, "playerGameType")), readPlayerMode(p_143428_, "previousPlayerGameType"));
+      this.gameMode.setGameModeForPlayer( this.calculateGameModeForNewPlayer( readPlayerMode( p_143428_, "playerGameType" ) ), readPlayerMode( p_143428_, "previousPlayerGameType" ) );
    }
 
    private void storeGameTypes(CompoundTag p_143431_) {
-      p_143431_.putInt("playerGameType", this.gameMode.getGameModeForPlayer().getId());
+      p_143431_.putInt( "playerGameType", this.gameMode.getGameModeForPlayer().getId() );
       GameType gametype = this.gameMode.getPreviousGameModeForPlayer();
       if (gametype != null) {
-         p_143431_.putInt("previousPlayerGameType", gametype.getId());
+         p_143431_.putInt( "previousPlayerGameType", gametype.getId() );
       }
 
    }
@@ -1501,24 +_,158 @@
    }
 
    public boolean mayInteract(Level p_143406_, BlockPos p_143407_) {
-      return super.mayInteract(p_143406_, p_143407_) && p_143406_.mayInteract(this, p_143407_);
+      return super.mayInteract( p_143406_, p_143407_ ) && p_143406_.mayInteract( this, p_143407_ );
    }
 
    protected void updateUsingItem(ItemStack p_143402_) {
-      CriteriaTriggers.USING_ITEM.trigger(this, p_143402_);
-      super.updateUsingItem(p_143402_);
+      CriteriaTriggers.USING_ITEM.trigger( this, p_143402_ );
+      super.updateUsingItem( p_143402_ );
    }
 
    public boolean drop(boolean p_182295_) {
       Inventory inventory = this.getInventory();
-      ItemStack itemstack = inventory.removeFromSelected(p_182295_);
-      this.containerMenu.findSlot(inventory, inventory.selected).ifPresent((p_182293_) -> {
-         this.containerMenu.setRemoteSlot(p_182293_, inventory.getSelected());
-      });
-      return this.drop(itemstack, false, true) != null;
+      ItemStack selected = inventory.getSelected();
+      if (selected.isEmpty() || !selected.onDroppedByPlayer( this )) return false;
+      ItemStack itemstack = inventory.removeFromSelected( p_182295_ );
+      this.containerMenu.findSlot( inventory, inventory.selected ).ifPresent( (p_182293_) -> {
+         this.containerMenu.setRemoteSlot( p_182293_, inventory.getSelected() );
+      } );
+      return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent( this, itemstack, true ) != null;
    }
 
    public boolean allowsListing() {
       return this.allowsListing;
    }
+
+   // CraftBukkit start - Add per-player time and weather.
+   public long timeOffset = 0;
+   public boolean relativeTime = true;
+
+   public long getPlayerTime() {
+      if (this.relativeTime) {
+         // Adds timeOffset to the current server time.
+         return this.level.getDayTime() + this.timeOffset;
+      } else {
+         // Adds timeOffset to the beginning of this day.
+         return this.level.getDayTime() - (this.level.getDayTime() % 24000) + this.timeOffset;
+      }
+   }
+
+   public org.bukkit.WeatherType weather = null;
+
+   public org.bukkit.WeatherType getPlayerWeather() {
+      return this.weather;
+   }
+
+   public void setPlayerWeather(org.bukkit.WeatherType type, boolean plugin) {
+      if (!plugin && this.weather != null) {
+         return;
+      }
+
+      if (plugin) {
+         this.weather = type;
+      }
+
+      if (type == org.bukkit.WeatherType.DOWNFALL) {
+         this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.STOP_RAINING, 0 ) );
+      } else {
+         this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.START_RAINING, 0 ) );
+      }
+   }
+
+   public void resetPlayerWeather() {
+      this.weather = null;
+      this.setPlayerWeather( this.level.getLevelData().isRaining() ? org.bukkit.WeatherType.DOWNFALL : org.bukkit.WeatherType.CLEAR, false );
+   }
+
+   private float pluginRainPosition;
+   private float pluginRainPositionPrevious;
+
+   public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder) {
+      if (this.weather == null) {
+         // Vanilla
+         if (oldRain != newRain) {
+            this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, newRain ) );
+         }
+      } else {
+         // Plugin
+         if (pluginRainPositionPrevious != pluginRainPosition) {
+            this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, pluginRainPosition ) );
+         }
+      }
+
+      if (oldThunder != newThunder) {
+         if (weather == org.bukkit.WeatherType.DOWNFALL || weather == null) {
+            this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, newThunder ) );
+         } else {
+            this.connection.send( new ClientboundGameEventPacket( ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, 0 ) );
+         }
+      }
+   }
+
+   public void tickWeather() {
+      if (this.weather == null) return;
+
+      pluginRainPositionPrevious = pluginRainPosition;
+      if (weather == org.bukkit.WeatherType.DOWNFALL) {
+         pluginRainPosition += 0.01;
+      } else {
+         pluginRainPosition -= 0.01;
+      }
+
+      pluginRainPosition = Mth.clamp( pluginRainPosition, 0.0F, 1.0F );
+   }
+
+   // SPIGOT-1903, MC-98153
+   public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
+      this.moveTo( x, y, z, yaw, pitch );
+      this.connection.resetPosition();
+   }
+
+   @Override
+   public boolean isImmobile() {
+      return super.isImmobile() || !getBukkitEntity().isOnline();
+   }
+
+   @Override
+   public net.minecraft.world.scores.Scoreboard getScoreboard() {
+      return getBukkitEntity().getScoreboard().getHandle();
+   }
+
+   public void reset() {
+      float exp = 0;
+      boolean keepInventory = this.level.getGameRules().getBoolean( GameRules.RULE_KEEPINVENTORY );
+
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         exp = this.experienceProgress;
+         this.newTotalExp = this.totalExperience;
+         this.newLevel = this.experienceLevel;
+      }
+
+      this.setHealth( this.getMaxHealth() );
+      this.stopUsingItem(); // CraftBukkit - SPIGOT-6682: Clear active item on reset
+      this.remainingFireTicks = 0;
+      this.fallDistance = 0;
+      this.foodData = new net.minecraft.world.food.FoodData( this );
+      this.experienceLevel = this.newLevel;
+      this.totalExperience = this.newTotalExp;
+      this.experienceProgress = 0;
+      this.deathTime = 0;
+      this.setArrowCount( 0, true ); // CraftBukkit - ArrowBodyCountChangeEvent
+      this.removeAllEffects( org.bukkit.event.entity.EntityPotionEffectEvent.Cause.DEATH );
+      this.effectsDirty = true;
+      this.containerMenu = this.inventoryMenu;
+      this.lastHurtByPlayer = null;
+      this.lastHurtByMob = null;
+      this.combatTracker = new net.minecraft.world.damagesource.CombatTracker( this );
+      this.lastSentExp = -1;
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         this.experienceProgress = exp;
+      } else {
+         this.giveExperiencePoints( this.newExp );
+      }
+      this.keepLevel = false;
+      this.setDeltaMovement(0, 0, 0); // CraftBukkit - SPIGOT-6948: Reset velocity on death
+   }
+   // CraftBukkit end
 }
