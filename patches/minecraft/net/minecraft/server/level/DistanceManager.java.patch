--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -59,6 +_,8 @@
    private long ticketTickCounter;
    private int simulationDistance = 10;
 
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
    protected DistanceManager(Executor p_140774_, Executor p_140775_) {
       ProcessorHandle<Runnable> processorhandle = ProcessorHandle.of("player ticket throttler", p_140775_::execute);
       ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorhandle), p_140774_, 4);
@@ -119,10 +_,22 @@
       }
 
       if (!this.chunksToUpdateFutures.isEmpty()) {
-         this.chunksToUpdateFutures.forEach((p_183908_) -> {
+         // CraftBukkit start
+         // Iterate pending chunk updates with protection against concurrent modification exceptions
+         java.util.Iterator<ChunkHolder> iter = this.chunksToUpdateFutures.iterator();
+         int expectedSize = this.chunksToUpdateFutures.size();
+         do {
+            ChunkHolder p_183908_ = iter.next();
+            iter.remove();
+            expectedSize--;
             p_183908_.updateFutures(p_140806_, this.mainThreadExecutor);
-         });
-         this.chunksToUpdateFutures.clear();
+            // Reset iterator if set was modified using add()
+            if (this.chunksToUpdateFutures.size() != expectedSize) {
+               expectedSize = this.chunksToUpdateFutures.size();
+               iter = this.chunksToUpdateFutures.iterator();
+            }
+         } while (iter.hasNext());
+            // CraftBukkit end
          return true;
       } else {
          if (!this.ticketsToRelease.isEmpty()) {
@@ -164,6 +_,25 @@
          this.ticketTracker.update(p_140785_, p_140786_.getTicketLevel(), true);
       }
 
+      if (p_140786_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_140785_, e -> SortedArraySet.create(4));
+          tickets.addOrGet(ticket);
+      }
+   }
+
+   boolean addTicketCB(long p_140785_, Ticket<?> p_140786_) {
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(p_140785_);
+      int i = getTicketLevelAt(sortedarrayset);
+      Ticket<?> ticket = sortedarrayset.addOrGet(p_140786_);
+      ticket.setCreatedTick(this.ticketTickCounter);
+      if (p_140786_.getTicketLevel() < i) {
+         this.ticketTracker.update(p_140785_, p_140786_.getTicketLevel(), true);
+      }
+      if (p_140786_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_140785_, e -> SortedArraySet.create(4));
+          tickets.addOrGet(ticket);
+      }
+      return p_140786_ == ticket; // CraftBukkit
    }
 
    void removeTicket(long p_140819_, Ticket<?> p_140820_) {
@@ -176,31 +_,108 @@
       }
 
       this.ticketTracker.update(p_140819_, getTicketLevelAt(sortedarrayset), false);
+
+      if (p_140820_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_140819_);
+          if (tickets != null) {
+              tickets.remove(p_140820_);
+          }
+      }
+   }
+
+   boolean removeTicketCB(long p_140819_, Ticket<?> p_140820_) {
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(p_140819_);
+      if (sortedarrayset.remove(p_140820_)) {
+      }
+      boolean removed = false; // CraftBukkit
+      if (sortedarrayset.isEmpty()) {
+         this.tickets.remove(p_140819_);
+         removed = true; // CraftBukkit
+      }
+
+      this.ticketTracker.update(p_140819_, getTicketLevelAt(sortedarrayset), false);
+
+      if (p_140820_.isForceTicks()) {
+         SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_140819_);
+         if (tickets != null) {
+            tickets.remove(p_140820_);
+         }
+      }
+      return removed; // CraftBukkit
    }
 
    public <T> void addTicket(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
       this.addTicket(p_140794_.toLong(), new Ticket<>(p_140793_, p_140795_, p_140796_));
    }
 
+   public <T> boolean addRegionTicketAtDistance(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      return this.addTicketCB(chunkcoordintpair.toLong(), new Ticket<>(ticketType, level, identifier));
+      // CraftBukkit end
+   }
+
    public <T> void removeTicket(TicketType<T> p_140824_, ChunkPos p_140825_, int p_140826_, T p_140827_) {
       Ticket<T> ticket = new Ticket<>(p_140824_, p_140826_, p_140827_);
       this.removeTicket(p_140825_.toLong(), ticket);
    }
 
+   public <T> boolean removeTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      Ticket<T> ticket = new Ticket<>(ticketType, level, identifier);
+
+      return this.removeTicketCB(chunkcoordintpair.toLong(), ticket);
+      // CraftBukkit end
+   }
+
+   // CraftBukkit start
+   public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+      Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
+
+      for (java.util.Iterator<Entry<SortedArraySet<Ticket<?>>>> iterator = this.tickets.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+         Entry<SortedArraySet<Ticket<?>>> entry = iterator.next();
+         SortedArraySet<Ticket<?>> tickets = entry.getValue();
+         if (tickets.remove(target)) {
+            // copied from removeTicket
+            this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt(tickets), false);
+
+            // can't use entry after it's removed
+            if (tickets.isEmpty()) {
+               iterator.remove();
+            }
+         }
+      }
+   }
+   // CraftBukkit end
+
    public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_) {
-      Ticket<T> ticket = new Ticket<>(p_140841_, 33 - p_140843_, p_140844_);
+      addRegionTicket(p_140841_, p_140842_, p_140843_, p_140844_, false);
+   }
+   public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_, boolean forceTicks) {
+      Ticket<T> ticket = new Ticket<>(p_140841_, 33 - p_140843_, p_140844_, forceTicks);
       long i = p_140842_.toLong();
       this.addTicket(i, ticket);
       this.tickingTicketsTracker.addTicket(i, ticket);
    }
 
    public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_) {
-      Ticket<T> ticket = new Ticket<>(p_140850_, 33 - p_140852_, p_140853_);
+      removeRegionTicket(p_140850_, p_140851_, p_140852_, p_140853_, false);
+   }
+
+   public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_, boolean forceTicks) {
+      Ticket<T> ticket = new Ticket<>(p_140850_, 33 - p_140852_, p_140853_, forceTicks);
       long i = p_140851_.toLong();
       this.removeTicket(i, ticket);
       this.tickingTicketsTracker.removeTicket(i, ticket);
    }
 
+   @Deprecated(forRemoval = true, since = "1.18.2") // Use addRegionTicket overload
+   public <T> void registerTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      addRegionTicket(type, pos, distance, value, true);
+   }
+
+   @Deprecated(forRemoval = true, since = "1.18.2") // Use removeRegionTicket overload
+   public <T> void releaseTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      removeRegionTicket(type, pos, distance, value, true);
+   }
+
    private SortedArraySet<Ticket<?>> getTickets(long p_140858_) {
       return this.tickets.computeIfAbsent(p_140858_, (p_183923_) -> {
          return SortedArraySet.create(4);
@@ -286,6 +_,11 @@
 
    public String getDebugStatus() {
       return this.ticketThrottler.getDebugStatus();
+   }
+
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
    }
 
    private void dumpTickets(String p_143208_) {
