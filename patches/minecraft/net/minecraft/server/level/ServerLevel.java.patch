--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -181,23 +_,44 @@
    private final List<CustomSpawner> customSpawners;
    @Nullable
    private final EndDragonFight dragonFight;
-   final Int2ObjectMap<EnderDragonPart> dragonParts = new Int2ObjectOpenHashMap<>();
+   final Int2ObjectMap<net.minecraftforge.entity.PartEntity<?>> dragonParts = new Int2ObjectOpenHashMap<>();
    private final StructureFeatureManager structureFeatureManager;
    private final StructureCheck structureCheck;
    private final boolean tickTime;
+   private net.minecraftforge.common.util.WorldCapabilityData capabilityData;
+
+   // CraftBukkit start
+   public net.minecraft.world.level.storage.PrimaryLevelData worldDataServer;
+   private int tickPosition;
+   public final LevelStorageSource.LevelStorageAccess convertable;
+   public final UUID uuid;
+
+   public LevelChunk getChunkIfLoaded(int x, int z) {
+      return this.chunkSource.getChunk(x, z, false);
+   }
 
    public ServerLevel(MinecraftServer p_203762_, Executor p_203763_, LevelStorageSource.LevelStorageAccess p_203764_, ServerLevelData p_203765_, ResourceKey<Level> p_203766_, Holder<DimensionType> p_203767_, ChunkProgressListener p_203768_, ChunkGenerator p_203769_, boolean p_203770_, long p_203771_, List<CustomSpawner> p_203772_, boolean p_203773_) {
       super(p_203765_, p_203766_, p_203767_, p_203762_::getProfiler, false, p_203770_, p_203771_);
+      convertable = p_203764_;
+      setGeneratorAndEnv(generator, org.magmafoundation.magma.forge.ForgeInject.environments.getOrDefault(getTypeKey(), org.bukkit.World.Environment.CUSTOM));
+      this.pvpMode = p_203762_.isPvpAllowed();
+      if (org.magmafoundation.magma.configuration.MagmaConfig.instance.forceRandomizedUUIDForDimensions.getValues() && p_203765_ instanceof net.minecraft.world.level.storage.DerivedLevelData)
+         uuid = org.bukkit.craftbukkit.v1_18_R2.util.WorldUUID.getUUID(p_203764_.getDimensionPath(p_203766_).toFile());
+      else uuid = org.bukkit.craftbukkit.v1_18_R2.util.WorldUUID.getUUID(p_203764_.levelPath.toFile());
+      // CraftBukkit end
       this.tickTime = p_203773_;
       this.server = p_203762_;
       this.customSpawners = p_203772_;
       this.serverLevelData = p_203765_;
+      if (generator != null)
+         p_203769_ = new org.bukkit.craftbukkit.v1_18_R2.generator.CustomChunkGenerator(this, p_203769_, generator);
+      p_203769_.conf = spigotConfig; // Spigot
       p_203769_.ensureStructuresGenerated();
       boolean flag = p_203762_.forceSynchronousWrites();
       DataFixer datafixer = p_203762_.getFixerUpper();
       EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(this, p_203764_.getDimensionPath(p_203766_).resolve("entities"), datafixer, flag, p_203762_);
       this.entityManager = new PersistentEntitySectionManager<>(Entity.class, new ServerLevel.EntityCallbacks(), entitypersistentstorage);
-      this.chunkSource = new ServerChunkCache(this, p_203764_, datafixer, p_203762_.getStructureManager(), p_203763_, p_203769_, p_203762_.getPlayerList().getViewDistance(), p_203762_.getPlayerList().getSimulationDistance(), flag, p_203768_, this.entityManager::updateChunkStatus, () -> {
+      this.chunkSource = new ServerChunkCache(this, p_203764_, datafixer, p_203762_.getStructureManager(), p_203763_, p_203769_, this.spigotConfig.viewDistance, this.spigotConfig.simulationDistance, flag, p_203768_, this.entityManager::updateChunkStatus, () -> { // Spigot
          return p_203762_.overworld().getDataStorage();
       });
       this.portalForcer = new PortalForcer(this);
@@ -223,6 +_,30 @@
       }
 
       this.sleepStatus = new SleepStatus();
+      this.initCapabilities();
+
+      // CraftBukkit start
+      this.world = new org.bukkit.craftbukkit.v1_18_R2.CraftWorld((ServerLevel) this, generator, biomeProvider, environment);
+      getWorldBorder().world = this;
+      // CraftBukkit end
+
+      this.getCraftServer().addWorld(this.getWorld()); //Magma - add world to bukkit's world list
+
+      //Magma start
+      if (p_203765_ instanceof net.minecraft.world.level.storage.PrimaryLevelData data) {
+         this.worldDataServer = data;
+      } else if (p_203765_ instanceof net.minecraft.world.level.storage.DerivedLevelData derived) {
+         this.worldDataServer = org.magmafoundation.magma.helpers.DelegateWorldInfo.wrap(derived);
+      }
+
+      this.worldDataServer.setWorld(this);
+      //Magma end
+   }
+
+   public ResourceKey<net.minecraft.world.level.dimension.LevelStem> getTypeKey() {
+      if (convertable != null && convertable.dimensionType != null)
+         return convertable.dimensionType;
+      return super.getTypeKey();
    }
 
    public void setWeatherParameters(int p_8607_, int p_8608_, boolean p_8609_, boolean p_8610_) {
@@ -251,8 +_,8 @@
       int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
       if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
          if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-            long j = this.levelData.getDayTime() + 24000L;
-            this.setDayTime(j - j % 24000L);
+            long j = this.getDayTime() + 24000L;
+            this.setDayTime(net.minecraftforge.event.ForgeEventFactory.onSleepFinished(this, j - j % 24000L, this.getDayTime()));
          }
 
          this.wakeUpAllPlayers();
@@ -264,6 +_,7 @@
       this.updateSkyBrightness();
       this.tickTime();
       profilerfiller.popPush("tickPending");
+      timings.scheduledBlocks.startTiming(); // Paper
       if (!this.isDebug()) {
          long k = this.getGameTime();
          profilerfiller.push("blockTicks");
@@ -272,28 +_,38 @@
          this.fluidTicks.tick(k, 65536, this::tickFluid);
          profilerfiller.pop();
       }
+      timings.scheduledBlocks.stopTiming(); // Paper
 
       profilerfiller.popPush("raid");
+      this.timings.raids.startTiming(); // Paper - timings
       this.raids.tick();
+      this.timings.raids.stopTiming(); // Paper - timings
       profilerfiller.popPush("chunkSource");
+      this.timings.chunkProviderTick.startTiming(); // Paper - timings
       this.getChunkSource().tick(p_8794_, true);
+      this.timings.chunkProviderTick.stopTiming(); // Paper - timings
       profilerfiller.popPush("blockEvents");
+      timings.doSounds.startTiming(); // Spigot
       this.runBlockEvents();
+      timings.doSounds.stopTiming(); // Spigot
       this.handlingTick = false;
       profilerfiller.pop();
-      boolean flag = !this.players.isEmpty() || !this.getForcedChunks().isEmpty();
+      boolean flag = !this.players.isEmpty() || net.minecraftforge.common.world.ForgeChunkManager.hasForcedChunks(this); //Forge: Replace vanilla's has forced chunk check with forge's that checks both the vanilla and forge added ones
       if (flag) {
          this.resetEmptyTime();
       }
 
       if (flag || this.emptyTime++ < 300) {
          profilerfiller.push("entities");
+         timings.tickEntities.startTiming(); // Spigot
          if (this.dragonFight != null) {
             profilerfiller.push("dragonFight");
             this.dragonFight.tick();
             profilerfiller.pop();
          }
 
+         org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+         timings.entityTick.startTiming(); // Spigot
          this.entityTickList.forEach((p_184065_) -> {
             if (!p_184065_.isRemoved()) {
                if (this.shouldDiscardEntity(p_184065_)) {
@@ -313,12 +_,16 @@
                      }
 
                      profilerfiller.push("tick");
-                     this.guardEntityTick(this::tickNonPassenger, p_184065_);
+                     if (!p_184065_.isRemoved() && !(p_184065_ instanceof net.minecraftforge.entity.PartEntity)) {
+                        this.guardEntityTick(this::tickNonPassenger, p_184065_);
+                     }
                      profilerfiller.pop();
                   }
                }
             }
          });
+         timings.entityTick.stopTiming(); // Spigot
+         timings.tickEntities.stopTiming(); // Spigot
          profilerfiller.pop();
          this.tickBlockEntities();
       }
@@ -377,7 +_,7 @@
       int j = chunkpos.getMinBlockZ();
       ProfilerFiller profilerfiller = this.getProfiler();
       profilerfiller.push("thunder");
-      if (flag && this.isThundering() && this.random.nextInt(100000) == 0) {
+      if (flag && this.isThundering() && this.spigotConfig.thunderChance > 0 && this.random.nextInt(this.spigotConfig.thunderChance) == 0) { // Spigot
          BlockPos blockpos = this.findLightningTargetAround(this.getBlockRandomPos(i, 0, j, 15));
          if (this.isRainingAt(blockpos)) {
             DifficultyInstance difficultyinstance = this.getCurrentDifficultyAt(blockpos);
@@ -402,6 +_,7 @@
          BlockPos blockpos2 = this.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, this.getBlockRandomPos(i, 0, j, 15));
          BlockPos blockpos3 = blockpos2.below();
          Biome biome = this.getBiome(blockpos2).value();
+         if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
          if (biome.shouldFreeze(this, blockpos3)) {
             this.setBlockAndUpdate(blockpos3, Blocks.ICE.defaultBlockState());
          }
@@ -422,6 +_,7 @@
       }
 
       profilerfiller.popPush("tickBlocks");
+      timings.chunkTicksBlocks.startTiming(); // Paper
       if (p_8716_ > 0) {
          for(LevelChunkSection levelchunksection : p_8715_.getSections()) {
             if (levelchunksection.isRandomlyTicking()) {
@@ -446,6 +_,7 @@
          }
       }
 
+      timings.chunkTicksBlocks.stopTiming(); // Paper
       profilerfiller.pop();
    }
 
@@ -592,15 +_,19 @@
          this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
       }
 
+      /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+       * rather than to all players on the server. This is what causes the client-side rain, as the
+       * client believes that it has started raining locally, rather than in another dimension.
+       */
       if (flag != this.isRaining()) {
          if (flag) {
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F));
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F), this.dimension());
          } else {
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F), this.dimension());
          }
 
-         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel));
-         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel));
+         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
+         this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
       }
 
    }
@@ -633,6 +_,22 @@
    }
 
    public void tickNonPassenger(Entity p_8648_) {
+      ++co.aikar.timings.TimingHistory.entityTicks; // Paper - timings
+      // Spigot start
+      co.aikar.timings.Timing timer; // Paper
+      if (!org.spigotmc.ActivationRange.checkIfActive(p_8648_)) {
+         p_8648_.tickCount++;
+         timer = p_8648_.getType().inactiveTickTimer.startTiming(); try { // Paper - timings
+         p_8648_.inactiveTick();
+         } finally { timer.stopTiming(); } // Paper
+         return;
+      }
+      // Spigot end
+      // Paper start- timings
+      co.aikar.timings.TimingHistory.activatedEntityTicks++;
+      timer = p_8648_.getVehicle() != null ? p_8648_.getType().passengerTickTimer.startTiming() : p_8648_.getType().tickTimer.startTiming();
+      try {
+         // Paper end - timings
       p_8648_.setOldPosAndRot();
       ProfilerFiller profilerfiller = this.getProfiler();
       ++p_8648_.tickCount;
@@ -641,12 +_,13 @@
       });
       profilerfiller.incrementCounter("tickNonPassenger");
       p_8648_.tick();
+      p_8648_.postTick(); // CraftBukkit
       this.getProfiler().pop();
 
       for(Entity entity : p_8648_.getPassengers()) {
          this.tickPassenger(p_8648_, entity);
       }
-
+      } finally { timer.stopTiming(); } // Paper - timings
    }
 
    private void tickPassenger(Entity p_8663_, Entity p_8664_) {
@@ -656,10 +_,12 @@
             ++p_8664_.tickCount;
             ProfilerFiller profilerfiller = this.getProfiler();
             profilerfiller.push(() -> {
-               return Registry.ENTITY_TYPE.getKey(p_8664_.getType()).toString();
+               return p_8664_.getType().getRegistryName() == null ? p_8664_.getType().toString() : p_8664_.getType().getRegistryName().toString();
             });
             profilerfiller.incrementCounter("tickPassenger");
+            if (p_8664_.canUpdate())
             p_8664_.rideTick();
+            p_8664_.postTick(); // CraftBukkit
             profilerfiller.pop();
 
             for(Entity entity : p_8664_.getPassengers()) {
@@ -679,6 +_,8 @@
    public void save(@Nullable ProgressListener p_8644_, boolean p_8645_, boolean p_8646_) {
       ServerChunkCache serverchunkcache = this.getChunkSource();
       if (!p_8646_) {
+         org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
+         try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
          if (p_8644_ != null) {
             p_8644_.progressStartNoAbort(new TranslatableComponent("menu.savingLevel"));
          }
@@ -688,13 +_,17 @@
             p_8644_.progressStage(new TranslatableComponent("menu.savingChunks"));
          }
 
+         timings.worldSaveChunks.startTiming(); // Paper
          serverchunkcache.save(p_8645_);
+            timings.worldSaveChunks.stopTiming(); // Paper
+         }// Paper
          if (p_8645_) {
             this.entityManager.saveAll();
          } else {
             this.entityManager.autoSave();
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
       }
    }
 
@@ -740,15 +_,39 @@
    }
 
    public boolean addFreshEntity(Entity p_8837_) {
-      return this.addEntity(p_8837_);
+      // CraftBukkit start
+      return this.addFreshEntity(p_8837_, p_8837_.spawnReason);
+   }
+
+   public boolean addFreshEntity(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      prepareAddEntity(reason);
+      return this.addEntity(entity);
+      // CraftBukkit end
    }
 
    public boolean addWithUUID(Entity p_8848_) {
-      return this.addEntity(p_8848_);
+      // CraftBukkit start
+      return this.addWithUUID(p_8848_, p_8848_.spawnReason);
+   }
+
+   public boolean addWithUUID(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      prepareAddEntity(reason);
+      return this.addEntity(entity);
+      // CraftBukkit end
    }
 
    public void addDuringTeleport(Entity p_143335_) {
-      this.addEntity(p_143335_);
+      // CraftBukkit start
+      // SPIGOT-6415: Don't call spawn event for entities which travel trough worlds,
+      // since it is only an implementation detail, that a new entity is created when
+      // they are traveling between worlds.
+      this.addDuringTeleport(p_143335_, null);
+   }
+
+   public void addDuringTeleport(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      prepareAddEntity(reason);
+      this.addEntity(entity);
+      // CraftBukkit end
    }
 
    public void addDuringCommandTeleport(ServerPlayer p_8623_) {
@@ -767,7 +_,55 @@
       this.addPlayer(p_8846_);
    }
 
+   /** @deprecated To be removed in 1.19. See {@link #removePlayerImmediately(ServerPlayer, Entity.RemovalReason)} as a possible replacement. */
+   @Deprecated(forRemoval = true, since = "1.18.1")
+   public void removePlayer(ServerPlayer p_8850_, boolean keepData) {
+      p_8850_.discard();
+      this.removeEntity(p_8850_, keepData);
+   }
+
+   /** @deprecated To be removed in 1.19. See {@link Entity#setRemoved(Entity.RemovalReason)} as a possible replacement. */
+   @Deprecated(forRemoval = true, since = "1.18.1")
+   public void removeEntityComplete(Entity p_8865_, boolean keepData) {
+      if(p_8865_.isMultipartEntity()) {
+         for(net.minecraftforge.entity.PartEntity<?> parts : p_8865_.getParts()) {
+            parts.discard();
+         }
+      }
+
+      this.getChunkSource().removeEntity(p_8865_);
+      if (p_8865_ instanceof ServerPlayer) {
+         ServerPlayer serverplayerentity = (ServerPlayer)p_8865_;
+         this.players.remove(serverplayerentity);
+      }
+
+      this.getScoreboard().entityRemoved(p_8865_);
+      if (p_8865_ instanceof Mob) {
+         this.navigatingMobs.remove(((Mob)p_8865_).getNavigation());
+      }
+
+      p_8865_.discard();
+      // onRemovedFromWorld and EntityLeaveWorldEvent are called by discard, so no need to do it ourselves here lest we double-call
+   }
+
+   /** @deprecated To be removed in 1.19. See {@link Entity#setRemoved(Entity.RemovalReason)} as a possible replacement. */
+   @Deprecated(forRemoval = true, since = "1.18.1")
+   public void removeEntity(Entity entity) {
+      removeEntity(entity, false);
+   }
+
+   /** @deprecated To be removed in 1.19. See {@link Entity#setRemoved(Entity.RemovalReason)} as a possible replacement. */
+   @Deprecated(forRemoval = true, since = "1.18.1")
+   public void removeEntity(Entity p_8868_, boolean keepData) {
+      if (this.handlingTick) {
+         throw (IllegalStateException) net.minecraft.Util.pauseInIde(new IllegalStateException("Removing entity while ticking!"));
+      } else {
+         removeEntityComplete(p_8868_, keepData);
+      }
+   }
+
    private void addPlayer(ServerPlayer p_8854_) {
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_8854_, this))) return;
       Entity entity = this.getEntities().get(p_8854_.getUUID());
       if (entity != null) {
          LOGGER.warn("Force-added player with duplicate UUID {}", (Object)p_8854_.getUUID().toString());
@@ -775,28 +_,73 @@
          this.removePlayerImmediately((ServerPlayer)entity, Entity.RemovalReason.DISCARDED);
       }
 
-      this.entityManager.addNewEntity(p_8854_);
-   }
-
-   private boolean addEntity(Entity p_8873_) {
+      this.entityManager.addNewEntityWithoutEvent(p_8854_);
+      p_8854_.onAddedToWorld();
+   }
+
+   //Magma start - remove spawnReason from addEntity
+   private @Nullable org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason addEntity_spawnReason;
+   public void prepareAddEntity(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+      addEntity_spawnReason = spawnReason;
+   }
+
+   // CraftBukkit start
+   public boolean addEntity(Entity p_8873_) {
+      org.spigotmc.AsyncCatcher.catchOp("entity add"); // Spigot
       if (p_8873_.isRemoved()) {
-         LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityType.getKey(p_8873_.getType()));
+         // WorldServer.LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityTypes.getKey(entity.getType())); // CraftBukkit
          return false;
       } else {
-         return this.entityManager.addNewEntity(p_8873_);
+         org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason = addEntity_spawnReason;
+         addEntity_spawnReason = null; //reset
+         //Magma end
+
+         // SPIGOT-6415: Don't call spawn event when reason is null. For example when an entity teleports to a new world.
+         if (spawnReason != null && !org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.doEntityAddEventCalling(this, p_8873_, spawnReason)) {
+            return false;
+         }
+         // CraftBukkit end
+
+         if (this.entityManager.addNewEntity(p_8873_)) {
+            p_8873_.onAddedToWorld();
+            return true;
+         } else {
+            return false;
+         }
       }
+   }
+
+   public java.util.concurrent.atomic.AtomicReference<org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason> trySpawnReason = new java.util.concurrent.atomic.AtomicReference<>(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+
+   public void prepareTryAddFreshEntityWithPassengers(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+      trySpawnReason.set(spawnReason);
    }
 
    public boolean tryAddFreshEntityWithPassengers(Entity p_8861_) {
       if (p_8861_.getSelfAndPassengers().map(Entity::getUUID).anyMatch(this.entityManager::isLoaded)) {
          return false;
       } else {
+         this.prepareEntity(p_8861_, trySpawnReason.getAndSet(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT)); // Magma - add spawn reason
          this.addFreshEntityWithPassengers(p_8861_);
          return true;
       }
    }
 
+   public boolean tryAddFreshEntityWithPassengers(Entity p_8861_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+      trySpawnReason.set(reason);
+      return tryAddFreshEntityWithPassengers(p_8861_);
+   }
+
    public void unload(LevelChunk p_8713_) {
+      // Spigot Start
+      for (net.minecraft.world.level.block.entity.BlockEntity tileentity : p_8713_.getBlockEntities().values()) {
+         if (tileentity instanceof net.minecraft.world.Container) {
+            for (org.bukkit.entity.HumanEntity h : Lists.newArrayList(((net.minecraft.world.Container) tileentity).getViewers())) {
+               h.closeInventory();
+            }
+         }
+      }
+      // Spigot End
       p_8713_.clearAllBlockEntities();
       p_8713_.unregisterTickContainerFromLevel(this);
    }
@@ -805,12 +_,41 @@
       p_143262_.remove(p_143263_);
    }
 
+   // CraftBukkit start
+   public boolean strikeLightning(Entity entitylightning) {
+      return this.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.UNKNOWN);
+   }
+
+   public boolean strikeLightning(Entity entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause cause) {
+      org.bukkit.event.weather.LightningStrikeEvent lightning = org.bukkit.craftbukkit.v1_18_R2.event.CraftEventFactory.callLightningStrikeEvent((org.bukkit.entity.LightningStrike) entitylightning.getBukkitEntity(), cause);
+
+      if (lightning.isCancelled()) {
+         return false;
+      }
+
+      return this.addFreshEntity(entitylightning);
+   }
+   // CraftBukkit end
+
    public void destroyBlockProgress(int p_8612_, BlockPos p_8613_, int p_8614_) {
+      // CraftBukkit start
+      Player entityhuman = null;
+      Entity entity = this.getEntity(p_8612_);
+      if (entity instanceof Player) entityhuman = (Player) entity;
+      // CraftBukkit end
+
       for(ServerPlayer serverplayer : this.server.getPlayerList().getPlayers()) {
          if (serverplayer != null && serverplayer.level == this && serverplayer.getId() != p_8612_) {
             double d0 = (double)p_8613_.getX() - serverplayer.getX();
             double d1 = (double)p_8613_.getY() - serverplayer.getY();
             double d2 = (double)p_8613_.getZ() - serverplayer.getZ();
+
+            // CraftBukkit start
+            if (entityhuman != null && !serverplayer.getBukkitEntity().canSee(entityhuman.getBukkitEntity())) {
+               continue;
+            }
+            // CraftBukkit end
+
             if (d0 * d0 + d1 * d1 + d2 * d2 < 1024.0D) {
                serverplayer.connection.send(new ClientboundBlockDestructionPacket(p_8612_, p_8613_, p_8614_));
             }
@@ -820,10 +_,20 @@
    }
 
    public void playSound(@Nullable Player p_8675_, double p_8676_, double p_8677_, double p_8678_, SoundEvent p_8679_, SoundSource p_8680_, float p_8681_, float p_8682_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_8675_, p_8679_, p_8680_, p_8681_, p_8682_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_8679_ = event.getSound();
+      p_8680_ = event.getCategory();
+      p_8681_ = event.getVolume();
       this.server.getPlayerList().broadcast(p_8675_, p_8676_, p_8677_, p_8678_, p_8681_ > 1.0F ? (double)(16.0F * p_8681_) : 16.0D, this.dimension(), new ClientboundSoundPacket(p_8679_, p_8680_, p_8676_, p_8677_, p_8678_, p_8681_, p_8682_));
    }
 
    public void playSound(@Nullable Player p_8689_, Entity p_8690_, SoundEvent p_8691_, SoundSource p_8692_, float p_8693_, float p_8694_) {
+      net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_8689_, p_8691_, p_8692_, p_8693_, p_8694_);
+      if (event.isCanceled() || event.getSound() == null) return;
+      p_8691_ = event.getSound();
+      p_8692_ = event.getCategory();
+      p_8693_ = event.getVolume();
       this.server.getPlayerList().broadcast(p_8689_, p_8690_.getX(), p_8690_.getY(), p_8690_.getZ(), p_8693_ > 1.0F ? (double)(16.0F * p_8693_) : 16.0D, this.dimension(), new ClientboundSoundEntityPacket(p_8691_, p_8692_, p_8690_, p_8693_, p_8694_));
    }
 
@@ -840,6 +_,7 @@
    }
 
    public void gameEvent(@Nullable Entity p_143268_, GameEvent p_143269_, BlockPos p_143270_) {
+      if (net.minecraftforge.common.ForgeHooks.onVanillaGameEvent(this, p_143268_, p_143269_, p_143270_))
       this.postGameEventInRadius(p_143268_, p_143269_, p_143270_, p_143269_.getNotificationRadius());
    }
 
@@ -875,6 +_,35 @@
       }
    }
 
+   public void updateNeighborsAt(BlockPos p_215045_, Block p_215046_) {
+      if (!org.magmafoundation.magma.configuration.MagmaConfig.instance.patchUpdateSuppression.getValues()) {
+         super.updateNeighborsAt(p_215045_, p_215046_);
+         return;
+      }
+      net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_215045_, this.getBlockState(p_215045_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
+      this.neighborUpdater.updateNeighborsAtExceptFromFacing(p_215045_, p_215046_, (Direction)null);
+   }
+
+   public void updateNeighborsAtExceptFromFacing(BlockPos p_215052_, Block p_215053_, Direction p_215054_) {
+      if (!org.magmafoundation.magma.configuration.MagmaConfig.instance.patchUpdateSuppression.getValues()) {
+         super.updateNeighborsAtExceptFromFacing(p_215052_, p_215053_, p_215054_);
+         return;
+      }
+      java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+      directions.remove(p_215054_);
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_215052_, this.getBlockState(p_215052_), directions, false).isCanceled())
+         return;
+      this.neighborUpdater.updateNeighborsAtExceptFromFacing(p_215052_, p_215053_, p_215054_);
+   }
+
+   public void neighborChanged(BlockState p_215035_, BlockPos p_215036_, Block p_215037_, BlockPos p_215038_, boolean p_215039_) {
+      if (!org.magmafoundation.magma.configuration.MagmaConfig.instance.patchUpdateSuppression.getValues()) {
+         super.neighborChanged(p_215035_, p_215036_, p_215037_, p_215038_, p_215039_);
+         return;
+      }
+      this.neighborUpdater.neighborChanged(p_215035_, p_215036_, p_215037_, p_215038_, p_215039_);
+   }
+
    public void broadcastEntityEvent(Entity p_8650_, byte p_8651_) {
       this.getChunkSource().broadcastAndSend(p_8650_, new ClientboundEntityEventPacket(p_8650_, p_8651_));
    }
@@ -885,6 +_,7 @@
 
    public Explosion explode(@Nullable Entity p_8653_, @Nullable DamageSource p_8654_, @Nullable ExplosionDamageCalculator p_8655_, double p_8656_, double p_8657_, double p_8658_, float p_8659_, boolean p_8660_, Explosion.BlockInteraction p_8661_) {
       Explosion explosion = new Explosion(this, p_8653_, p_8654_, p_8655_, p_8656_, p_8657_, p_8658_, p_8659_, p_8660_, p_8661_);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.explode();
       explosion.finalizeExplosion(false);
       if (p_8661_ == Explosion.BlockInteraction.NONE) {
@@ -956,12 +_,21 @@
    }
 
    public <T extends ParticleOptions> int sendParticles(T p_8768_, double p_8769_, double p_8770_, double p_8771_, int p_8772_, double p_8773_, double p_8774_, double p_8775_, double p_8776_) {
-      ClientboundLevelParticlesPacket clientboundlevelparticlespacket = new ClientboundLevelParticlesPacket(p_8768_, false, p_8769_, p_8770_, p_8771_, (float)p_8773_, (float)p_8774_, (float)p_8775_, (float)p_8776_, p_8772_);
+
+      // CraftBukkit - visibility api support
+      return sendParticles(null, p_8768_, p_8769_, p_8770_, p_8771_, p_8772_, p_8773_, p_8774_, p_8775_, p_8776_, false);
+   }
+
+   public <T extends ParticleOptions> int sendParticles(ServerPlayer sender, T p_8768_,  double p_8769_, double p_8770_, double p_8771_, int p_8772_, double p_8773_, double p_8774_, double p_8775_, double p_8776_, boolean force) {
+      ClientboundLevelParticlesPacket clientboundlevelparticlespacket = new ClientboundLevelParticlesPacket(p_8768_, force, p_8769_, p_8770_, p_8771_, (float) p_8773_, (float) p_8774_, (float) p_8775_, (float) p_8776_, p_8772_);
+      // CraftBukkit end
       int i = 0;
 
       for(int j = 0; j < this.players.size(); ++j) {
          ServerPlayer serverplayer = this.players.get(j);
-         if (this.sendParticles(serverplayer, false, p_8769_, p_8770_, p_8771_, clientboundlevelparticlespacket)) {
+         if (sender != null && !serverplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+
+         if (this.sendParticles(serverplayer, force, p_8769_, p_8770_, p_8771_, clientboundlevelparticlespacket)) {  // CraftBukkit
             ++i;
          }
       }
@@ -1048,6 +_,7 @@
    }
 
    public void setMapData(String p_143305_, MapItemSavedData p_143306_) {
+      p_143306_.id = p_143305_; // CraftBukkit
       this.getServer().overworld().getDataStorage().set(p_143305_, p_143306_);
    }
 
@@ -1400,19 +_,42 @@
    }
 
    public static void makeObsidianPlatform(ServerLevel p_8618_) {
+      // CraftBukkit start
+      ServerLevel.makeObsidianPlatform(p_8618_, null);
+   }
+
+   public static void makeObsidianPlatform(ServerLevel p_8618_, Entity entity) {
+      // CraftBukkit end
       BlockPos blockpos = END_SPAWN_POINT;
       int i = blockpos.getX();
       int j = blockpos.getY() - 2;
       int k = blockpos.getZ();
+      // CraftBukkit start
+      org.bukkit.craftbukkit.v1_18_R2.util.BlockStateListPopulator blockList = new org.bukkit.craftbukkit.v1_18_R2.util.BlockStateListPopulator(p_8618_);
       BlockPos.betweenClosed(i - 2, j + 1, k - 2, i + 2, j + 3, k + 2).forEach((p_207578_) -> {
-         p_8618_.setBlockAndUpdate(p_207578_, Blocks.AIR.defaultBlockState());
+         blockList.setBlock(p_207578_, Blocks.AIR.defaultBlockState(), 3);
       });
       BlockPos.betweenClosed(i - 2, j, k - 2, i + 2, j, k + 2).forEach((p_184101_) -> {
-         p_8618_.setBlockAndUpdate(p_184101_, Blocks.OBSIDIAN.defaultBlockState());
+         blockList.setBlock(p_184101_, Blocks.OBSIDIAN.defaultBlockState(), 3);
       });
+      org.bukkit.World bworld = p_8618_.getWorld();
+      org.bukkit.event.world.PortalCreateEvent portalEvent = new org.bukkit.event.world.PortalCreateEvent((List<org.bukkit.block.BlockState>) (List) blockList.getList(), bworld, (entity == null) ? null : entity.getBukkitEntity(), org.bukkit.event.world.PortalCreateEvent.CreateReason.END_PLATFORM);
+
+      p_8618_.getCraftServer().getPluginManager().callEvent(portalEvent);
+      if (!portalEvent.isCancelled()) {
+         blockList.updateList();
+      }
+      // CraftBukkit end
+   }
+
+   protected void initCapabilities() {
+      this.gatherCapabilities();
+      capabilityData = this.getDataStorage().computeIfAbsent(e -> net.minecraftforge.common.util.WorldCapabilityData.load(e, getCapabilities()), () -> new net.minecraftforge.common.util.WorldCapabilityData(getCapabilities()), net.minecraftforge.common.util.WorldCapabilityData.ID);
+      capabilityData.setCapabilities(getCapabilities());
    }
 
    public LevelEntityGetter<Entity> getEntities() {
+      org.spigotmc.AsyncCatcher.catchOp("Chunk getEntities call"); // Spigot
       return this.entityManager.getEntityGetter();
    }
 
@@ -1480,6 +_,7 @@
       }
 
       public void onTrackingStart(Entity p_143371_) {
+         org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
          ServerLevel.this.getChunkSource().addEntity(p_143371_);
          if (p_143371_ instanceof ServerPlayer) {
             ServerPlayer serverplayer = (ServerPlayer)p_143371_;
@@ -1497,17 +_,41 @@
             ServerLevel.this.navigatingMobs.add(mob);
          }
 
-         if (p_143371_ instanceof EnderDragon) {
-            EnderDragon enderdragon = (EnderDragon)p_143371_;
-
-            for(EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+         if (p_143371_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpart : p_143371_.getParts()) {
                ServerLevel.this.dragonParts.put(enderdragonpart.getId(), enderdragonpart);
             }
          }
 
+         p_143371_.valid = true; // CraftBukkit
       }
 
       public void onTrackingEnd(Entity p_143375_) {
+         org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
+         // Spigot start
+         if ( p_143375_ instanceof Player )
+         {
+            getServer().levels.values().stream().map( ServerLevel::getDataStorage ).forEach( (worldData) ->
+            {
+               for (Object o : worldData.cache.values() )
+               {
+                  if ( o instanceof MapItemSavedData )
+                  {
+                     MapItemSavedData map = (MapItemSavedData) o;
+                     map.carriedByPlayers.remove( (Player) p_143375_ );
+                     map.carriedBy.removeIf( holdingPlayer -> holdingPlayer.player == p_143375_ );
+                  }
+               }
+            } );
+         }
+         // Spigot end
+         // Spigot Start
+         if (p_143375_.getBukkitEntity() instanceof org.bukkit.inventory.InventoryHolder && (!(p_143375_ instanceof ServerPlayer) || p_143375_.getRemovalReason() != Entity.RemovalReason.KILLED)) { // SPIGOT-6876: closeInventory clears death message
+            for (org.bukkit.entity.HumanEntity h : Lists.newArrayList(((org.bukkit.inventory.InventoryHolder) p_143375_.getBukkitEntity()).getInventory().getViewers())) {
+               h.closeInventory();
+            }
+         }
+         // Spigot End
          ServerLevel.this.getChunkSource().removeEntity(p_143375_);
          if (p_143375_ instanceof ServerPlayer) {
             ServerPlayer serverplayer = (ServerPlayer)p_143375_;
@@ -1525,10 +_,8 @@
             ServerLevel.this.navigatingMobs.remove(mob);
          }
 
-         if (p_143375_ instanceof EnderDragon) {
-            EnderDragon enderdragon = (EnderDragon)p_143375_;
-
-            for(EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+         if (p_143375_.isMultipartEntity()) {
+            for(net.minecraftforge.entity.PartEntity<?> enderdragonpart : p_143375_.getParts()) {
                ServerLevel.this.dragonParts.remove(enderdragonpart.getId());
             }
          }
@@ -1538,6 +_,22 @@
             gameeventlistenerregistrar.onListenerRemoved(p_143375_.level);
          }
 
+         // CraftBukkit start
+         p_143375_.valid = false;
+         if (!(p_143375_ instanceof ServerPlayer)) {
+            for (ServerPlayer player : players) {
+               player.getBukkitEntity().onEntityRemove(p_143375_);
+            }
+         }
+         // CraftBukkit end
+
+         p_143375_.onRemovedFromWorld();
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityLeaveWorldEvent(p_143375_, ServerLevel.this));
       }
+   }
+
+   @Override
+   public java.util.Collection<net.minecraftforge.entity.PartEntity<?>> getPartEntities() {
+      return this.dragonParts.values();
    }
 }
