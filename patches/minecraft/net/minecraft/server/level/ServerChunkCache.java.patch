--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -79,6 +_,16 @@
       this.clearCache();
    }
 
+   // CraftBukkit start - properly implement isChunkLoaded
+   public boolean isChunkLoaded(int chunkX, int chunkZ) {
+      ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+      if (chunk == null) {
+         return false;
+      }
+      return chunk.getFullChunkNow() != null;
+   }
+   // CraftBukkit end
+
    public ThreadedLevelLightEngine getLightEngine() {
       return this.lightEngine;
    }
@@ -126,7 +_,9 @@
 
          profilerfiller.incrementCounter("getChunkCacheMiss");
          CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_8362_, p_8363_);
+         this.level.timings.syncChunkLoad.startTiming(); // Paper
          this.mainThreadProcessor.managedBlock(completablefuture::isDone);
+         this.level.timings.syncChunkLoad.stopTiming(); // Paper
          ChunkAccess chunkaccess1 = completablefuture.join().map((p_8406_) -> {
             return p_8406_;
          }, (p_8423_) -> {
@@ -152,7 +_,9 @@
          for(int j = 0; j < 4; ++j) {
             if (i == this.lastChunkPos[j] && this.lastChunkStatus[j] == ChunkStatus.FULL) {
                ChunkAccess chunkaccess = this.lastChunk[j];
-               return chunkaccess instanceof LevelChunk ? (LevelChunk)chunkaccess : null;
+               if (chunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
+                  return chunkaccess instanceof LevelChunk ? (LevelChunk)chunkaccess : null;
+               }
             }
          }
 
@@ -160,6 +_,7 @@
          if (chunkholder == null) {
             return null;
          } else {
+            if (chunkholder.currentlyLoading != null) return chunkholder.currentlyLoading; // Forge: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
             Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.getFutureIfPresent(ChunkStatus.FULL).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
             if (either == null) {
                return null;
@@ -206,7 +_,15 @@
       long i = chunkpos.toLong();
       int j = 33 + ChunkStatus.getDistance(p_8459_);
       ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-      if (p_8460_) {
+      // CraftBukkit start - don't add new ticket for currently unloading chunk
+      boolean currentlyUnloading = false;
+      if (chunkholder != null) {
+         ChunkHolder.FullChunkStatus oldChunkState = ChunkHolder.getFullChunkStatus(chunkholder.oldTicketLevel);
+         ChunkHolder.FullChunkStatus currentChunkState = ChunkHolder.getFullChunkStatus(chunkholder.getTicketLevel());
+         currentlyUnloading = (oldChunkState.isOrAfter(ChunkHolder.FullChunkStatus.BORDER) && !currentChunkState.isOrAfter(ChunkHolder.FullChunkStatus.BORDER));
+      }
+      if (p_8460_ && !currentlyUnloading) {
+         // CraftBukkit end
          this.distanceManager.addTicket(TicketType.UNKNOWN, chunkpos, j, chunkpos);
          if (this.chunkAbsent(chunkholder, j)) {
             ProfilerFiller profilerfiller = this.level.getProfiler();
@@ -224,7 +_,7 @@
    }
 
    private boolean chunkAbsent(@Nullable ChunkHolder p_8417_, int p_8418_) {
-      return p_8417_ == null || p_8417_.getTicketLevel() > p_8418_;
+      return p_8417_ == null || p_8417_.oldTicketLevel > p_8418_; // CraftBukkit using oldTicketLevel for isLoaded checks
    }
 
    public boolean hasChunk(int p_8429_, int p_8430_) {
@@ -276,6 +_,12 @@
       }
    }
 
+   // Paper start - helper
+   public boolean isPositionTicking(Entity entity) {
+      return this.isPositionTicking(ChunkPos.asLong(net.minecraft.util.Mth.floor(entity.getX()) >> 4, net.minecraft.util.Mth.floor(entity.getZ()) >> 4));
+   }
+   // Paper end
+
    public boolean isPositionTicking(long p_143240_) {
       ChunkHolder chunkholder = this.getVisibleChunkIfPresent(p_143240_);
       if (chunkholder == null) {
@@ -290,26 +_,55 @@
 
    public void save(boolean p_8420_) {
       this.runDistanceManagerUpdates();
-      this.chunkMap.saveAllChunks(p_8420_);
+      try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
+         this.chunkMap.saveAllChunks(p_8420_);
+      } // Paper - Timings
    }
 
    public void close() throws IOException {
+      // CraftBukkit start
+      close(true);
+   }
+
+   public void close(boolean save) throws IOException {
+      if (save) {
+         this.save(true);
+      }
+      // CraftBukkit end
       this.save(true);
       this.lightEngine.close();
       this.chunkMap.close();
    }
 
+   // CraftBukkit start - modelled on below
+   public void purgeUnload() {
+      this.level.getProfiler().push("purge");
+      this.distanceManager.purgeStaleTickets();
+      this.runDistanceManagerUpdates();
+      this.level.getProfiler().popPush("unload");
+      this.chunkMap.tick(() -> true);
+      this.level.getProfiler().pop();
+      this.clearCache();
+   }
+   // CraftBukkit end
+
    public void tick(BooleanSupplier p_201913_, boolean p_201914_) {
       this.level.getProfiler().push("purge");
+      this.level.timings.doChunkMap.startTiming(); // Spigot
       this.distanceManager.purgeStaleTickets();
       this.runDistanceManagerUpdates();
+      this.level.timings.doChunkMap.stopTiming(); // Spigot
       this.level.getProfiler().popPush("chunks");
       if (p_201914_) {
+         this.level.timings.chunks.startTiming(); // Paper - timings
          this.tickChunks();
+         this.level.timings.chunks.stopTiming(); // Paper - timings
       }
 
+      this.level.timings.doChunkUnload.startTiming(); // Spigot
       this.level.getProfiler().popPush("unload");
       this.chunkMap.tick(p_201913_);
+      this.level.timings.doChunkUnload.stopTiming(); // Spigot
       this.level.getProfiler().pop();
       this.clearCache();
    }
@@ -326,14 +_,17 @@
          ProfilerFiller profilerfiller = this.level.getProfiler();
          profilerfiller.push("pollingChunks");
          int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
-         boolean flag1 = leveldata.getGameTime() % 400L == 0L;
+         boolean flag1 = level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && leveldata.getGameTime() % level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
          profilerfiller.push("naturalSpawnCount");
+         this.level.timings.countNaturalMobs.startTiming(); // Paper - timings
          int l = this.distanceManager.getNaturalSpawnChunkCount();
          NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.createState(l, this.level.getAllEntities(), this::getFullChunk, new LocalMobCapCalculator(this.chunkMap));
+         this.level.timings.countNaturalMobs.stopTiming(); // Paper - timings
          this.lastSpawnState = naturalspawner$spawnstate;
          profilerfiller.popPush("filteringLoadedChunks");
          List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(l);
 
+         this.level.timings.chunkTicks.startTiming(); // Paper
          for(ChunkHolder chunkholder : this.chunkMap.getChunks()) {
             LevelChunk levelchunk = chunkholder.getTickingChunk();
             if (levelchunk != null) {
@@ -342,15 +_,15 @@
          }
 
          profilerfiller.popPush("spawnAndTick");
-         boolean flag2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
+         boolean flag2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !level.players().isEmpty(); // CraftBukkit
          Collections.shuffle(list);
 
          for(ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
             LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
             ChunkPos chunkpos = levelchunk1.getPos();
-            if (this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) {
+            if ((this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) || this.distanceManager.shouldForceTicks(chunkpos.toLong())) {
                levelchunk1.incrementInhabitedTime(j);
-               if (flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos)) {
+               if (flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos, true)) { // Spigot
                   NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag1);
                }
 
@@ -359,15 +_,20 @@
                }
             }
          }
+         this.level.timings.chunkTicks.stopTiming(); // Paper
 
          profilerfiller.popPush("customSpawners");
          if (flag2) {
-            this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
+            try (co.aikar.timings.Timing ignored = this.level.timings.miscMobSpawning.startTiming()) { // Paper - timings
+               this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
+            } // Paper - timings
          }
 
          profilerfiller.popPush("broadcast");
          list.forEach((p_184022_) -> {
+            this.level.timings.broadcastChunkUpdates.startTiming(); // Paper - timing
             p_184022_.holder.broadcastChanges(p_184022_.chunk);
+            this.level.timings.broadcastChunkUpdates.stopTiming(); // Paper - timing
          });
          profilerfiller.pop();
          profilerfiller.pop();
@@ -421,11 +_,29 @@
    }
 
    public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-      this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_);
+      addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+   }
+
+   public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+      this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, forceTicks);
    }
 
    public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-      this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_);
+      removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+   }
+
+   public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+      this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, forceTicks);
+   }
+
+   @Deprecated(forRemoval = true, since = "1.18.2") // Use addRegionTicket overload
+   public <T> void registerTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.distanceManager.registerTicking(type, pos, distance, value);
+   }
+
+   @Deprecated(forRemoval = true, since = "1.18.2") // Use removeRegionTicket overload
+   public <T> void releaseTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.distanceManager.releaseTicking(type, pos, distance, value);
    }
 
    public void updateChunkForced(ChunkPos p_8400_, boolean p_8401_) {
@@ -524,11 +_,16 @@
       }
 
       public boolean pollTask() {
-         if (ServerChunkCache.this.runDistanceManagerUpdates()) {
-            return true;
-         } else {
-            ServerChunkCache.this.lightEngine.tryScheduleUpdate();
-            return super.pollTask();
+         try {
+            if (ServerChunkCache.this.runDistanceManagerUpdates()) {
+               return true;
+            } else {
+               ServerChunkCache.this.lightEngine.tryScheduleUpdate();
+               return super.pollTask();
+            }
+         } finally {
+            ServerChunkCache.this.chunkMap.callbackExecutor.run();
+            net.minecraft.server.MinecraftServer.getServerInstance().drainQueuedTasks();
          }
       }
    }
