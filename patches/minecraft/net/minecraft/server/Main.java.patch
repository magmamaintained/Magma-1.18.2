--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -56,184 +_,319 @@
 import org.slf4j.Logger;
 
 public class Main {
-   private static final Logger LOGGER = LogUtils.getLogger();
-
-   @DontObfuscate
-   public static void main(String[] p_129699_) {
-      SharedConstants.tryDetectVersion();
-      OptionParser optionparser = new OptionParser();
-      OptionSpec<Void> optionspec = optionparser.accepts("nogui");
-      OptionSpec<Void> optionspec1 = optionparser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
-      OptionSpec<Void> optionspec2 = optionparser.accepts("demo");
-      OptionSpec<Void> optionspec3 = optionparser.accepts("bonusChest");
-      OptionSpec<Void> optionspec4 = optionparser.accepts("forceUpgrade");
-      OptionSpec<Void> optionspec5 = optionparser.accepts("eraseCache");
-      OptionSpec<Void> optionspec6 = optionparser.accepts("safeMode", "Loads level with vanilla datapack only");
-      OptionSpec<Void> optionspec7 = optionparser.accepts("help").forHelp();
-      OptionSpec<String> optionspec8 = optionparser.accepts("singleplayer").withRequiredArg();
-      OptionSpec<String> optionspec9 = optionparser.accepts("universe").withRequiredArg().defaultsTo(".");
-      OptionSpec<String> optionspec10 = optionparser.accepts("world").withRequiredArg();
-      OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
-      OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
-      OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
-      OptionSpec<String> optionspec14 = optionparser.nonOptions();
-
-      try {
-         OptionSet optionset = optionparser.parse(p_129699_);
-         if (optionset.has(optionspec7)) {
-            optionparser.printHelpOn(System.err);
-            return;
-         }
-
-         CrashReport.preload();
-         if (optionset.has(optionspec13)) {
-            JvmProfiler.INSTANCE.start(Environment.SERVER);
-         }
-
-         Bootstrap.bootStrap();
-         Bootstrap.validate();
-         Util.startTimerHackThread();
-         Path path = Paths.get("server.properties");
-         DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path);
-         dedicatedserversettings.forceSave();
-         Path path1 = Paths.get("eula.txt");
-         Eula eula = new Eula(path1);
-         if (optionset.has(optionspec1)) {
-            LOGGER.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
-            return;
-         }
-
-         if (!eula.hasAgreedToEULA()) {
-            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
-         File file1 = new File(optionset.valueOf(optionspec9));
-         YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
-         MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
-         GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
-         GameProfileCache gameprofilecache = new GameProfileCache(gameprofilerepository, new File(file1, MinecraftServer.USERID_CACHE_FILE.getName()));
-         String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(dedicatedserversettings.getProperties().levelName);
-         LevelStorageSource levelstoragesource = LevelStorageSource.createDefault(file1.toPath());
-         LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.createAccess(s);
-         LevelSummary levelsummary = levelstoragesource$levelstorageaccess.getSummary();
-         if (levelsummary != null) {
-            if (levelsummary.requiresManualConversion()) {
-               LOGGER.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
-               return;
-            }
-
-            if (!levelsummary.isCompatible()) {
-               LOGGER.info("This world was created by an incompatible version.");
-               return;
-            }
-         }
-
-         boolean flag = optionset.has(optionspec6);
-         if (flag) {
-            LOGGER.warn("Safe mode active, only vanilla datapack will be loaded");
-         }
-
-         PackRepository packrepository = new PackRepository(PackType.SERVER_DATA, new ServerPacksSource(), new FolderRepositorySource(levelstoragesource$levelstorageaccess.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), PackSource.WORLD));
-
-         WorldStem worldstem;
-         try {
-            WorldStem.InitConfig worldstem$initconfig = new WorldStem.InitConfig(packrepository, Commands.CommandSelection.DEDICATED, dedicatedserversettings.getProperties().functionPermissionLevel, flag);
-            worldstem = WorldStem.load(worldstem$initconfig, () -> {
-               DataPackConfig datapackconfig = levelstoragesource$levelstorageaccess.getDataPacks();
-               return datapackconfig == null ? DataPackConfig.DEFAULT : datapackconfig;
-            }, (p_206543_, p_206544_) -> {
-               RegistryAccess.Writable registryaccess$writable = RegistryAccess.builtinCopy();
-               DynamicOps<Tag> dynamicops = RegistryOps.createAndLoad(NbtOps.INSTANCE, registryaccess$writable, p_206543_);
-               WorldData worlddata1 = levelstoragesource$levelstorageaccess.getDataTag(dynamicops, p_206544_, registryaccess$writable.allElementsLifecycle());
-               if (worlddata1 != null) {
-                  return Pair.of(worlddata1, registryaccess$writable.freeze());
-               } else {
-                  LevelSettings levelsettings;
-                  WorldGenSettings worldgensettings;
-                  if (optionset.has(optionspec2)) {
-                     levelsettings = MinecraftServer.DEMO_SETTINGS;
-                     worldgensettings = WorldGenSettings.demoSettings(registryaccess$writable);
-                  } else {
-                     DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.getProperties();
-                     levelsettings = new LevelSettings(dedicatedserverproperties.levelName, dedicatedserverproperties.gamemode, dedicatedserverproperties.hardcore, dedicatedserverproperties.difficulty, false, new GameRules(), p_206544_);
-                     worldgensettings = optionset.has(optionspec3) ? dedicatedserverproperties.getWorldGenSettings(registryaccess$writable).withBonusChest() : dedicatedserverproperties.getWorldGenSettings(registryaccess$writable);
-                  }
-
-                  PrimaryLevelData primaryleveldata = new PrimaryLevelData(levelsettings, worldgensettings, Lifecycle.stable());
-                  return Pair.of(primaryleveldata, registryaccess$writable.freeze());
-               }
-            }, Util.backgroundExecutor(), Runnable::run).get();
-         } catch (Exception exception) {
-            LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (Throwable)exception);
-            packrepository.close();
-            return;
-         }
-
-         worldstem.updateGlobals();
-         RegistryAccess.Frozen registryaccess$frozen = worldstem.registryAccess();
-         dedicatedserversettings.getProperties().getWorldGenSettings(registryaccess$frozen);
-         WorldData worlddata = worldstem.worldData();
-         if (optionset.has(optionspec4)) {
-            forceUpgrade(levelstoragesource$levelstorageaccess, DataFixers.getDataFixer(), optionset.has(optionspec5), () -> {
-               return true;
-            }, worlddata.worldGenSettings());
-         }
-
-         levelstoragesource$levelstorageaccess.saveDataTag(registryaccess$frozen, worlddata);
-         final DedicatedServer dedicatedserver = MinecraftServer.spin((p_206536_) -> {
-            DedicatedServer dedicatedserver1 = new DedicatedServer(p_206536_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), minecraftsessionservice, gameprofilerepository, gameprofilecache, LoggerChunkProgressListener::new);
-            dedicatedserver1.setSingleplayerName(optionset.valueOf(optionspec8));
-            dedicatedserver1.setPort(optionset.valueOf(optionspec11));
-            dedicatedserver1.setDemo(optionset.has(optionspec2));
-            dedicatedserver1.setId(optionset.valueOf(optionspec12));
-            boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec14).contains("nogui");
-            if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.showGui();
-            }
-
-            return dedicatedserver1;
-         });
+    private static final Logger LOGGER = LogUtils.getLogger();
+
+    @DontObfuscate
+    public static void main(String[] p_129699_) {
+        SharedConstants.tryDetectVersion();
+        OptionParser optionparser = new OptionParser();
+        OptionSpec<Void> optionspec = optionparser.accepts("nogui");
+        OptionSpec<Void> optionspec1 = optionparser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
+        OptionSpec<Void> optionspec2 = optionparser.accepts("demo");
+        OptionSpec<Void> optionspec3 = optionparser.accepts("bonusChest");
+        OptionSpec<Void> optionspec4 = optionparser.accepts("forceUpgrade");
+        OptionSpec<Void> optionspec5 = optionparser.accepts("eraseCache");
+        OptionSpec<Void> optionspec6 = optionparser.accepts("safeMode", "Loads level with vanilla datapack only");
+        OptionSpec<Void> optionspec7 = optionparser.accepts("help").forHelp();
+        OptionSpec<String> optionspec8 = optionparser.accepts("singleplayer").withRequiredArg();
+        OptionSpec<String> optionspec9 = optionparser.accepts("universe").withRequiredArg().defaultsTo(".");
+        OptionSpec<String> optionspec10 = optionparser.accepts("world").withRequiredArg();
+        OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
+        OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
+        OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
+        OptionSpec<String> optionspec14 = optionparser.nonOptions();
+        optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+        optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+        final OptionSpec<net.minecraft.core.BlockPos> spawnPosOpt;
+        boolean gametestEnabled = Boolean.getBoolean("forge.gameTestServer");
+        if (gametestEnabled) {
+            spawnPosOpt = optionparser.accepts("spawnPos").withRequiredArg().withValuesConvertedBy(new net.minecraftforge.gametest.BlockPosValueConverter()).defaultsTo(new net.minecraft.core.BlockPos(0, 60, 0));
+        } else {
+            spawnPosOpt = null;
+        }
+
+        optionparser.acceptsAll(java.util.Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("bukkit.yml"))
+                .describedAs("Yml file");
+
+        optionparser.acceptsAll(java.util.Arrays.asList("S", "spigot-settings"), "File for spigot settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("spigot.yml"))
+                .describedAs("Yml file");
+
+        optionparser.acceptsAll(java.util.Arrays.asList("p", "paper-settings"), "File for paper settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("paper.yml"))
+                .describedAs("Yml file");
+
+        optionparser.acceptsAll(java.util.Arrays.asList("C", "commands-settings"), "File for command settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("commands.yml"))
+                .describedAs("Yml file");
+
+        optionparser.acceptsAll(java.util.Arrays.asList("P", "plugins"), "Plugin directory to use")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("plugins"))
+                .describedAs("Plugin directory");
+
+        try {
+            OptionSet optionset = optionparser.parse(p_129699_);
+            if (optionset.has(optionspec7)) {
+                optionparser.printHelpOn(System.err);
+                return;
+            }
+            Path path1 = Paths.get("eula.txt");
+            Eula eula = new Eula(path1);
+
+            // Spigot Start
+            boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
+            if ( eulaAgreed )
+            {
+                System.err.println( "You have used the Spigot command line EULA agreement flag." );
+                System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
+                System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
+            }
+            // Spigot End
+            if (!eula.hasAgreedToEULA() && !eulaAgreed) { // Spigot
+                LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+                return;
+            }
+
+            CrashReport.preload();
+            if (optionset.has(optionspec13)) {
+                JvmProfiler.INSTANCE.start(Environment.SERVER);
+            }
+
+            //Magma start - Boot Inject Protection
+            org.magmafoundation.magma.protect.InjectProtect.init();
+
+            try {
+                Bootstrap.bootStrap();
+            } catch (org.spongepowered.asm.mixin.throwables.MixinError e) {
+                org.magmafoundation.magma.protect.InjectProtect.onBootErrorCaught(e);
+            }
+            //Magma end
+
+            Bootstrap.validate();
+            Util.startTimerHackThread();
+            if (!optionset.has(optionspec1))
+                net.minecraftforge.server.loading.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
+            //TODO-PATCHING: Figure out how to handle the delayed initialization.
+            Path path = Paths.get("server.properties");
+            DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path);
+            dedicatedserversettings.forceSave();
+            // Paper start - load config files for access below if needed
+            org.bukkit.configuration.file.YamlConfiguration bukkitConfiguration = loadConfigFile((File) optionset.valueOf("bukkit-settings"));
+            org.bukkit.configuration.file.YamlConfiguration spigotConfiguration = loadConfigFile((File) optionset.valueOf("spigot-settings"));
+            org.bukkit.configuration.file.YamlConfiguration paperConfiguration = loadConfigFile((File) optionset.valueOf("paper-settings"));
+            // Paper end
+            if (optionset.has(optionspec1)) {
+                LOGGER.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
+                return;
+            }
+
+            File file1 = new File(optionset.valueOf(optionspec9));
+            YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
+            MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
+            GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
+            GameProfileCache gameprofilecache = new GameProfileCache(gameprofilerepository, new File(file1, MinecraftServer.USERID_CACHE_FILE.getName()));
+            String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(dedicatedserversettings.getProperties().levelName);
+            if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+                LOGGER.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+                return;
+            }
+            LevelStorageSource levelstoragesource = LevelStorageSource.createDefault(file1.toPath());
+            LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.createAccess(s);
+            levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData();
+            LevelSummary levelsummary = levelstoragesource$levelstorageaccess.getSummary();
+            if (levelsummary != null) {
+                if (levelsummary.requiresManualConversion()) {
+                    LOGGER.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
+                    return;
+                }
+
+                if (!levelsummary.isCompatible()) {
+                    LOGGER.info("This world was created by an incompatible version.");
+                    return;
+                }
+            }
+
+            boolean flag = optionset.has(optionspec6);
+            if (flag) {
+                LOGGER.warn("Safe mode active, only vanilla datapack will be loaded");
+            }
+
+            DataPackConfig datapackconfig = levelstoragesource$levelstorageaccess.getDataPacks();
+
+            PackRepository packrepository = new PackRepository(PackType.SERVER_DATA, new ServerPacksSource(), new FolderRepositorySource(levelstoragesource$levelstorageaccess.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), PackSource.WORLD));
+
+            // CraftBukkit start
+            File bukkitDataPackFolder = new File(levelstoragesource$levelstorageaccess.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+            if (!bukkitDataPackFolder.exists()) {
+                bukkitDataPackFolder.mkdirs();
+            }
+            File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+            try {
+                com.google.common.io.Files.write("{\n"
+                        + "    \"pack\": {\n"
+                        + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+                        + "        \"pack_format\": " + SharedConstants.getCurrentVersion().getPackVersion() + "\n"
+                        + "    }\n"
+                        + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+            } catch (java.io.IOException ex) {
+                throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+            }
+            java.util.concurrent.atomic.AtomicReference<DataPackConfig> config = new java.util.concurrent.atomic.AtomicReference<>();
+            java.util.concurrent.atomic.AtomicReference<DynamicOps<Tag>> ops = new java.util.concurrent.atomic.AtomicReference<>();
+            // CraftBukkit end
+
+            DataPackConfig datapackconfig1 = MinecraftServer.configurePackRepository(packrepository, datapackconfig == null ? DataPackConfig.DEFAULT : datapackconfig, flag);
+
+            WorldStem worldstem;
+            try {
+                WorldStem.InitConfig worldstem$initconfig = new WorldStem.InitConfig(packrepository, Commands.CommandSelection.DEDICATED, dedicatedserversettings.getProperties().functionPermissionLevel, flag);
+                worldstem = WorldStem.load(worldstem$initconfig, () -> {
+                    DataPackConfig datapackconfigd = levelstoragesource$levelstorageaccess.getDataPacks();
+                    return datapackconfigd == null ? DataPackConfig.DEFAULT : datapackconfigd;
+                }, (p_206543_, p_206544_) -> {
+                    RegistryAccess.Writable registryaccess$writable = RegistryAccess.builtinCopy();
+                    DynamicOps<Tag> dynamicops = RegistryOps.createAndLoad(NbtOps.INSTANCE, registryaccess$writable, p_206543_);
+                    config.set(p_206544_);
+                    ops.set(dynamicops);
+                    WorldData worlddata1 = levelstoragesource$levelstorageaccess.getDataTag(dynamicops, p_206544_, registryaccess$writable.allElementsLifecycle());
+                    if (worlddata1 != null) {
+                        return Pair.of(worlddata1, registryaccess$writable.freeze());
+                    } else {
+                        LevelSettings levelsettings;
+                        WorldGenSettings worldgensettings;
+                        if (optionset.has(optionspec2)) {
+                            levelsettings = MinecraftServer.DEMO_SETTINGS;
+                            worldgensettings = WorldGenSettings.demoSettings(registryaccess$writable);
+                        } else {
+                            DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.getProperties();
+                            levelsettings = new LevelSettings(dedicatedserverproperties.levelName, dedicatedserverproperties.gamemode, dedicatedserverproperties.hardcore, dedicatedserverproperties.difficulty, false, new GameRules(), p_206544_, Lifecycle.stable());
+                            worldgensettings = optionset.has(optionspec3) ? dedicatedserverproperties.getWorldGenSettings(registryaccess$writable).withBonusChest() : dedicatedserverproperties.getWorldGenSettings(registryaccess$writable);
+                        }
+
+                        // Forge: Deserialize the WorldGenSettings to ensure modded dims are loaded on first server load. Vanilla behavior only loads from the server.properties and deserializes only after the 2nd server load.
+                        worldgensettings = WorldGenSettings.CODEC.encodeStart(dynamicops, worldgensettings).flatMap(nbt -> WorldGenSettings.CODEC.parse(dynamicops, nbt)).getOrThrow(false, errorMsg -> {});
+                        PrimaryLevelData primaryleveldata = new PrimaryLevelData(levelsettings, worldgensettings, Lifecycle.stable());
+                        return Pair.of(primaryleveldata, registryaccess$writable.freeze());
+                    }
+                }, Util.backgroundExecutor(), Runnable::run).get();
+            } catch (Exception exception) {
+                LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (Throwable) exception);
+                packrepository.close();
+                return;
+            }
+
+            worldstem.updateGlobals();
+            RegistryAccess.Frozen registryaccess$frozen = worldstem.registryAccess();
+            dedicatedserversettings.getProperties().getWorldGenSettings(registryaccess$frozen);
+            WorldData worlddata = worldstem.worldData();
+            if (optionset.has(optionspec4)) {
+                forceUpgrade(levelstoragesource$levelstorageaccess, DataFixers.getDataFixer(), optionset.has(optionspec5), () -> {
+                    return true;
+                }, worlddata.worldGenSettings());
+            }
+
+            levelstoragesource$levelstorageaccess.saveDataTag(registryaccess$frozen, worlddata);
+            final MinecraftServer dedicatedserver = MinecraftServer.spin((p_129697_) -> {
+                org.magmafoundation.magma.helpers.ServerInitHelper.init(optionset, config.get(), ops.get());
+                MinecraftServer dedicatedserver1;
+                if (gametestEnabled) {
+                    net.minecraftforge.gametest.ForgeGameTestHooks.registerGametests();
+                    java.util.Collection<net.minecraft.gametest.framework.GameTestBatch> testBatches = net.minecraft.gametest.framework.GameTestRunner.groupTestsIntoBatches(net.minecraft.gametest.framework.GameTestRegistry.getAllTestFunctions());
+                    net.minecraft.core.BlockPos spawnPos = optionset.valueOf(spawnPosOpt);
+                    dedicatedserver1 = new net.minecraft.gametest.framework.GameTestServer(p_129697_, levelstoragesource$levelstorageaccess, packrepository, worldstem, testBatches, spawnPos);
+                } else {
+                    dedicatedserver1 = new DedicatedServer(p_129697_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), minecraftsessionservice, gameprofilerepository, gameprofilecache, LoggerChunkProgressListener::new);
+                }
+                dedicatedserver1.setSingleplayerName(optionset.valueOf(optionspec8));
+                dedicatedserver1.setPort(optionset.valueOf(optionspec11));
+                dedicatedserver1.setDemo(optionset.has(optionspec2));
+                dedicatedserver1.setId(optionset.valueOf(optionspec12));
+                boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec14).contains("nogui");
+                dedicatedserver1.options = optionset;
+                if (dedicatedserver1 instanceof DedicatedServer dedicatedServer && flag1 && !GraphicsEnvironment.isHeadless()) {
+                    // dedicatedServer.showGui(); //MAGMA: Disabled GUI for now
+                }
+
+                if (optionset.has("port")) {
+                    int port = (Integer) optionset.valueOf("port");
+                    if (port > 0) {
+                        dedicatedserver1.setPort(port);
+                    }
+                }
+
+                return dedicatedserver1;
+            });
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
+                org.magmafoundation.magma.protect.InjectProtect.shutdownCalled(); //Magma - Mixin Inject protection
+               // FORGE: Halting as GameTestServer will cause issues as it always calls System#exit on both crash and normal exit, so skip it
+               if (!(dedicatedserver instanceof net.minecraft.gametest.framework.GameTestServer))
                dedicatedserver.halt(true);
+               //TODO-PATCHING: Figure out what needs to be done here after the logging update.
+               //LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
+               org.apache.logging.log4j.LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
          Runtime.getRuntime().addShutdownHook(thread);
-      } catch (Exception exception1) {
-         LOGGER.error(LogUtils.FATAL_MARKER, "Failed to start the minecraft server", (Throwable)exception1);
-      }
-
-   }
-
-   public static void forceUpgrade(LevelStorageSource.LevelStorageAccess p_195489_, DataFixer p_195490_, boolean p_195491_, BooleanSupplier p_195492_, WorldGenSettings p_195493_) {
-      LOGGER.info("Forcing world upgrade!");
-      WorldUpgrader worldupgrader = new WorldUpgrader(p_195489_, p_195490_, p_195493_, p_195491_);
-      Component component = null;
-
-      while(!worldupgrader.isFinished()) {
-         Component component1 = worldupgrader.getStatus();
-         if (component != component1) {
-            component = component1;
-            LOGGER.info(worldupgrader.getStatus().getString());
-         }
-
-         int i = worldupgrader.getTotalChunks();
-         if (i > 0) {
-            int j = worldupgrader.getConverted() + worldupgrader.getSkipped();
-            LOGGER.info("{}% completed ({} / {} chunks)...", Mth.floor((float)j / (float)i * 100.0F), j, i);
-         }
-
-         if (!p_195492_.getAsBoolean()) {
-            worldupgrader.cancel();
-         } else {
+        } catch (Exception exception1) {
+            LOGGER.error(LogUtils.FATAL_MARKER, "Failed to start the minecraft server", (Throwable) exception1);
+        }
+
+    }
+
+    // Paper start - load config files
+    private static org.bukkit.configuration.file.YamlConfiguration loadConfigFile(File configFile) throws Exception {
+        org.bukkit.configuration.file.YamlConfiguration config = new org.bukkit.configuration.file.YamlConfiguration();
+        if (configFile.exists()) {
             try {
-               Thread.sleep(1000L);
-            } catch (InterruptedException interruptedexception) {
-            }
-         }
-      }
-
-   }
+                config.load(configFile);
+            } catch (Exception ex) {
+                throw new Exception("Failed to load configuration file: " + configFile.getName(), ex);
+            }
+        }
+        return config;
+    }
+    // Paper end
+
+    public static void forceUpgrade(LevelStorageSource.LevelStorageAccess p_195489_, DataFixer p_195490_, boolean p_195491_, BooleanSupplier p_195492_, WorldGenSettings p_195493_) {
+        LOGGER.info("Forcing world upgrade! {}", p_195489_.getLevelId()); // CraftBukkit
+        WorldUpgrader worldupgrader = new WorldUpgrader(p_195489_, p_195490_, p_195493_, p_195491_);
+        net.minecraft.network.chat.Component component = null;
+
+        while (!worldupgrader.isFinished()) {
+            net.minecraft.network.chat.Component component1 = worldupgrader.getStatus();
+            if (component != component1) {
+                component = component1;
+                LOGGER.info(worldupgrader.getStatus().getString());
+            }
+
+            int i = worldupgrader.getTotalChunks();
+            if (i > 0) {
+                int j = worldupgrader.getConverted() + worldupgrader.getSkipped();
+                LOGGER.info("{}% completed ({} / {} chunks)...", Mth.floor((float) j / (float) i * 100.0F), j, i);
+            }
+
+            if (!p_195492_.getAsBoolean()) {
+                worldupgrader.cancel();
+            } else {
+                try {
+                    Thread.sleep(1000L);
+                } catch (InterruptedException interruptedexception) {
+                }
+            }
+        }
+
+    }
 }
