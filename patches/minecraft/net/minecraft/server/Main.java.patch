--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -13,6 +_,7 @@
 import java.net.Proxy;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import joptsimple.OptionParser;
@@ -77,6 +_,33 @@
       OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
       OptionSpec<String> optionspec14 = optionparser.nonOptions();
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+      final OptionSpec<net.minecraft.core.BlockPos> spawnPosOpt;
+      boolean gametestEnabled = Boolean.getBoolean("forge.gameTestServer");
+      if (gametestEnabled) {
+         spawnPosOpt = optionparser.accepts("spawnPos").withRequiredArg().withValuesConvertedBy(new net.minecraftforge.gametest.BlockPosValueConverter()).defaultsTo(new net.minecraft.core.BlockPos(0, 60, 0));
+      } else {
+          spawnPosOpt = null;
+      }
+
+      optionparser.acceptsAll(Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("bukkit.yml"))
+              .describedAs("Yml file");
+
+      optionparser.acceptsAll(Arrays.asList("C", "commands-settings"), "File for command settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("commands.yml"))
+              .describedAs("Yml file");
+
+      optionparser.acceptsAll(Arrays.asList("P", "plugins"), "Plugin directory to use")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("plugins"))
+              .describedAs("Plugin directory");
 
       try {
          OptionSet optionset = optionparser.parse(p_129699_);
@@ -84,6 +_,13 @@
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path1 = Paths.get("eula.txt");
+         Eula eula = new Eula(path1);
+
+         if (!eula.m_135944_()) {
+            f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
 
          CrashReport.m_127529_();
          if (optionset.has(optionspec13)) {
@@ -93,29 +_,29 @@
          Bootstrap.m_135870_();
          Bootstrap.m_135889_();
          Util.m_137584_();
+         if (!optionset.has(optionspec1)) net.minecraftforge.server.loading.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
+         //TODO-PATCHING: Figure out how to handle the delayed initialization.
          Path path = Paths.get("server.properties");
          DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path);
          dedicatedserversettings.m_139780_();
-         Path path1 = Paths.get("eula.txt");
-         Eula eula = new Eula(path1);
          if (optionset.has(optionspec1)) {
             f_129670_.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
             return;
          }
 
-         if (!eula.m_135944_()) {
-            f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
          File file1 = new File(optionset.valueOf(optionspec9));
          YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
          MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          GameProfileCache gameprofilecache = new GameProfileCache(gameprofilerepository, new File(file1, MinecraftServer.f_129742_.getName()));
          String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(dedicatedserversettings.m_139777_().f_139741_);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            f_129670_.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          LevelStorageSource levelstoragesource = LevelStorageSource.m_78242_(file1.toPath());
          LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.m_78260_(s);
+         levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData();
          LevelSummary levelsummary = levelstoragesource$levelstorageaccess.m_78308_();
          if (levelsummary != null) {
             if (levelsummary.m_193020_()) {
@@ -134,14 +_,17 @@
             f_129670_.warn("Safe mode active, only vanilla datapack will be loaded");
          }
 
+         DataPackConfig datapackconfig = levelstoragesource$levelstorageaccess.m_78309_();
+
          PackRepository packrepository = new PackRepository(PackType.SERVER_DATA, new ServerPacksSource(), new FolderRepositorySource(levelstoragesource$levelstorageaccess.m_78283_(LevelResource.f_78180_).toFile(), PackSource.f_10529_));
+         DataPackConfig datapackconfig1 = MinecraftServer.m_129819_(packrepository, datapackconfig == null ? DataPackConfig.f_45842_ : datapackconfig, flag);
 
          WorldStem worldstem;
          try {
             WorldStem.InitConfig worldstem$initconfig = new WorldStem.InitConfig(packrepository, Commands.CommandSelection.DEDICATED, dedicatedserversettings.m_139777_().f_139711_, flag);
             worldstem = WorldStem.m_206911_(worldstem$initconfig, () -> {
-               DataPackConfig datapackconfig = levelstoragesource$levelstorageaccess.m_78309_();
-               return datapackconfig == null ? DataPackConfig.f_45842_ : datapackconfig;
+               DataPackConfig datapackconfigd = levelstoragesource$levelstorageaccess.m_78309_();
+               return datapackconfigd == null ? DataPackConfig.f_45842_ : datapackconfigd;
             }, (p_206543_, p_206544_) -> {
                RegistryAccess.Writable registryaccess$writable = RegistryAccess.m_206197_();
                DynamicOps<Tag> dynamicops = RegistryOps.m_206813_(NbtOps.f_128958_, registryaccess$writable, p_206543_);
@@ -156,7 +_,7 @@
                      worldgensettings = WorldGenSettings.m_64645_(registryaccess$writable);
                   } else {
                      DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.m_139777_();
-                     levelsettings = new LevelSettings(dedicatedserverproperties.f_139741_, dedicatedserverproperties.f_139740_, dedicatedserverproperties.f_139752_, dedicatedserverproperties.f_139739_, false, new GameRules(), p_206544_);
+                     levelsettings = new LevelSettings(dedicatedserverproperties.f_139741_, dedicatedserverproperties.f_139740_, dedicatedserverproperties.f_139752_, dedicatedserverproperties.f_139739_, false, new GameRules(), p_206544_, Lifecycle.stable());
                      worldgensettings = optionset.has(optionspec3) ? dedicatedserverproperties.m_180927_(registryaccess$writable).m_64671_() : dedicatedserverproperties.m_180927_(registryaccess$writable);
                   }
 
@@ -181,26 +_,49 @@
          }
 
          levelstoragesource$levelstorageaccess.m_78287_(registryaccess$frozen, worlddata);
-         final DedicatedServer dedicatedserver = MinecraftServer.m_129872_((p_206536_) -> {
-            DedicatedServer dedicatedserver1 = new DedicatedServer(p_206536_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.m_14512_(), minecraftsessionservice, gameprofilerepository, gameprofilecache, LoggerChunkProgressListener::new);
+         final MinecraftServer dedicatedserver = MinecraftServer.m_129872_((p_129697_) -> {
+            MinecraftServer dedicatedserver1;
+            if (gametestEnabled) {
+               net.minecraftforge.gametest.ForgeGameTestHooks.registerGametests();
+               java.util.Collection<net.minecraft.gametest.framework.GameTestBatch> testBatches = net.minecraft.gametest.framework.GameTestRunner.m_127724_(net.minecraft.gametest.framework.GameTestRegistry.m_127658_());
+               net.minecraft.core.BlockPos spawnPos = optionset.valueOf(spawnPosOpt);
+               dedicatedserver1 = new net.minecraft.gametest.framework.GameTestServer(optionset, datapackconfig, null, p_129697_, levelstoragesource$levelstorageaccess, packrepository, worldstem, testBatches, spawnPos);
+            } else {
+               dedicatedserver1 = new DedicatedServer(optionset,datapackconfig,null,p_129697_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.m_14512_(), minecraftsessionservice, gameprofilerepository, gameprofilecache, LoggerChunkProgressListener::new);
+            }
             dedicatedserver1.m_129981_(optionset.valueOf(optionspec8));
             dedicatedserver1.m_129801_(optionset.valueOf(optionspec11));
             dedicatedserver1.m_129975_(optionset.has(optionspec2));
             dedicatedserver1.m_129948_(optionset.valueOf(optionspec12));
             boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec14).contains("nogui");
-            if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.m_139667_();
+            dedicatedserver1.options = optionset;
+            if (dedicatedserver1 instanceof DedicatedServer dedicatedServer && flag1 && !GraphicsEnvironment.isHeadless()) {
+               // dedicatedServer.showGui(); //MAGMA: Disabled GUI for now
+            }
+
+            if (optionset.has("port")) {
+               int port = (Integer) optionset.valueOf("port");
+               if (port > 0) {
+                  dedicatedserver1.m_129801_(port);
+               }
             }
 
             return dedicatedserver1;
          });
+         /* CraftBukkit start
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
-               dedicatedserver.m_7570_(true);
+               // FORGE: Halting as GameTestServer will cause issues as it always calls System#exit on both crash and normal exit, so skip it
+               if (!(dedicatedserver instanceof net.minecraft.gametest.framework.GameTestServer))
+               dedicatedserver.halt(true);
+               //TODO-PATCHING: Figure out what needs to be done here after the logging update.
+               //LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
+               org.apache.logging.log4j.LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
-         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_129670_));
+         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
          Runtime.getRuntime().addShutdownHook(thread);
+         */ // CraftBukkit end
       } catch (Exception exception1) {
          f_129670_.error(LogUtils.FATAL_MARKER, "Failed to start the minecraft server", (Throwable)exception1);
       }
