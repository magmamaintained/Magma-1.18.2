--- a/net/minecraft/server/commands/GameRuleCommand.java
+++ b/net/minecraft/server/commands/GameRuleCommand.java
@@ -11,7 +_,7 @@
 public class GameRuleCommand {
    public static void register(CommandDispatcher<CommandSourceStack> p_137745_) {
       final LiteralArgumentBuilder<CommandSourceStack> literalargumentbuilder = Commands.literal("gamerule").requires((p_137750_) -> {
-         return p_137750_.hasPermission(2);
+         return p_137750_.hasPermission(2,"minecraft.command.gamerule");
       });
       GameRules.visitGameRuleTypes(new GameRules.GameRuleTypeVisitor() {
          public <T extends GameRules.Value<T>> void visit(GameRules.Key<T> p_137764_, GameRules.Type<T> p_137765_) {
@@ -27,14 +_,14 @@
 
    static <T extends GameRules.Value<T>> int setRule(CommandContext<CommandSourceStack> p_137755_, GameRules.Key<T> p_137756_) {
       CommandSourceStack commandsourcestack = p_137755_.getSource();
-      T t = commandsourcestack.getServer().getGameRules().getRule(p_137756_);
+      T t = commandsourcestack.getLevel().getGameRules().getRule(p_137756_); // CraftBukkit
       t.setFromArgument(p_137755_, "value");
       commandsourcestack.sendSuccess(new TranslatableComponent("commands.gamerule.set", p_137756_.getId(), t.toString()), true);
       return t.getCommandResult();
    }
 
    static <T extends GameRules.Value<T>> int queryRule(CommandSourceStack p_137758_, GameRules.Key<T> p_137759_) {
-      T t = p_137758_.getServer().getGameRules().getRule(p_137759_);
+      T t = p_137758_.getLevel().getGameRules().getRule(p_137759_); // CraftBukkit
       p_137758_.sendSuccess(new TranslatableComponent("commands.gamerule.query", p_137759_.getId(), t.toString()), false);
       return t.getCommandResult();
    }
