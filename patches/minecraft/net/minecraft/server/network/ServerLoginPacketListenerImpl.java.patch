--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -51,6 +_,8 @@
    private final String serverId = "";
    @Nullable
    private ServerPlayer delayedAcceptPlayer;
+   public String hostname = ""; // CraftBukkit - add field
+   private int velocityLoginMessageId = -1; // Paper - Velocity suppor
 
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.server = p_10027_;
@@ -59,7 +_,13 @@
    }
 
    public void tick() {
-      if (this.state == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
+      if (this.state == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+         boolean negotiationComplete = net.minecraftforge.network.NetworkHooks.tickNegotiation(this, this.connection, this.delayedAcceptPlayer);
+         if (negotiationComplete)
+            this.state = State.READY_TO_ACCEPT;
+      } else if (this.state == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
          this.handleAcceptedLogin();
       } else if (this.state == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
          ServerPlayer serverplayer = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
@@ -76,6 +_,20 @@
 
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      try {
+         Component ichatbasecomponent = new net.minecraft.network.chat.TextComponent(s);
+         ServerLoginPacketListenerImpl.LOGGER.info("Disconnecting {}: {}", this.getUserName(), s);
+         this.connection.send(new ClientboundLoginDisconnectPacket(ichatbasecomponent));
+         this.connection.disconnect(ichatbasecomponent);
+      } catch (Exception exception) {
+         ServerLoginPacketListenerImpl.LOGGER.error("Error whilst disconnecting player", exception);
+      }
+   }
+   // CraftBukkit end
+
    public Connection getConnection() {
       return this.connection;
    }
@@ -91,15 +_,57 @@
 
    }
 
+   // Paper start - Cache authenticator threads
+   private static final AtomicInteger threadId = new AtomicInteger(0);
+   private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+           r -> {
+               Thread ret = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, r, "User Authenticator #" + threadId.incrementAndGet());
+               ret.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+               return ret;
+           }
+   );
+   // Paper end
+
+   // Spigot start
+   public void initUUID() {
+      UUID uuid;
+      if (connection.spoofedUUID != null) {
+         uuid = connection.spoofedUUID;
+      } else {
+         uuid = Player.createPlayerUUID(this.gameProfile.getName());
+      }
+
+      this.gameProfile = new GameProfile(uuid, this.gameProfile.getName());
+
+      if (connection.spoofedProfile != null) {
+         for (com.mojang.authlib.properties.Property property : connection.spoofedProfile) {
+            if (!ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher(property.getName()).matches()) continue;
+            this.gameProfile.getProperties().put(property.getName(), property);
+         }
+      }
+   }
+   // Spigot end
+
    public void handleAcceptedLogin() {
+      // Spigot start - Moved to initUUID
+      /*
       if (!this.gameProfile.isComplete()) {
          this.gameProfile = this.createFakeProfile(this.gameProfile);
       }
+       */
+      // Spigot end
 
-      Component component = this.server.getPlayerList().canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
-      if (component != null) {
-         this.disconnect(component);
+      // CraftBukkit start - fire PlayerLoginEvent
+      // Magma - don't. Just move out the player creation, and call the playerJoinEvent after Forge
+      ServerPlayer s = this.server.getPlayerList().getPlayerForLogin(this.gameProfile);
+      if (s == null) {
+         // CraftBukkit end
       } else {
+         s.resetBukkitEntity(); //Magma - fixes an issue where the CraftPlayer got initialized before actually getting valid data
+         // Magma start - fixes mixin problems
+         this.server.getPlayerList().preparePlayerLogin(this, hostname, s);
+         this.server.getPlayerList().canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
+         // Magma end
          this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
          if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
             this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), (p_10041_) -> {
@@ -107,11 +_,11 @@
             });
          }
 
+         ServerPlayer serverplayer = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
          this.connection.send(new ClientboundGameProfilePacket(this.gameProfile));
-         ServerPlayer serverplayer = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
 
          try {
-            ServerPlayer serverplayer1 = this.server.getPlayerList().getPlayerForLogin(this.gameProfile);
+            ServerPlayer serverplayer1 = this.server.getPlayerList().getPlayerForLogin(this.gameProfile, s); // CraftBukkit - add player reference
             if (serverplayer != null) {
                this.state = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
                this.delayedAcceptPlayer = serverplayer1;
@@ -148,7 +_,31 @@
          this.state = ServerLoginPacketListenerImpl.State.KEY;
          this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.nonce));
       } else {
-         this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+         // this.state = ServerLoginPacketListenerImpl.State.NEGOTIATING;
+         // Paper start - Velocity support
+         if (com.destroystokyo.paper.youcandfindpaper.PaperConfig.velocitySupport) {
+             this.velocityLoginMessageId = java.util.concurrent.ThreadLocalRandom.current().nextInt();
+             net.minecraft.network.protocol.login.ClientboundCustomQueryPacket packet1 = new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket(this.velocityLoginMessageId, com.destroystokyo.paper.youcandfindpaper.proxy.VelocityProxy.PLAYER_INFO_CHANNEL, new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.EMPTY_BUFFER));
+             this.connection.send(packet1);
+             return;
+         }
+         // Paper end
+         // Spigot start
+         // Paper start - Cache authenticator threads
+         authenticatorPool.execute(new Runnable() {
+            @Override
+            public void run() {
+               try {
+                  initUUID();
+                  new LoginHandler().fireEvents();
+               } catch (Exception ex) {
+                  disconnect("Failed to verify username!");
+                  server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameProfile.getName(), ex);
+               }
+            }
+            });
+            // Paper end
+         // Spigot end
       }
 
    }
@@ -179,19 +_,24 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+        // Paper start - Cache authenticator threads
+        authenticatorPool.execute(new Runnable() {
          public void run() {
             GameProfile gameprofile = ServerLoginPacketListenerImpl.this.gameProfile;
 
             try {
                ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.getAddress());
                if (ServerLoginPacketListenerImpl.this.gameProfile != null) {
-                  ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
-                  ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!connection.isConnected()) {
+                     return;
+                  }
+
+                  new LoginHandler().fireEvents();
                } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                   ServerLoginPacketListenerImpl.LOGGER.warn("Failed to verify username but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameprofile);
-                  ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.NEGOTIATING;
                } else {
                   ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.LOGGER.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
@@ -200,11 +_,16 @@
                if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                   ServerLoginPacketListenerImpl.LOGGER.warn("Authentication servers are down but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameprofile);
-                  ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.NEGOTIATING;
                } else {
                   ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.LOGGER.error("Couldn't verify username because servers are unavailable");
                }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+               // CraftBukkit end
             }
 
          }
@@ -214,12 +_,93 @@
             SocketAddress socketaddress = ServerLoginPacketListenerImpl.this.connection.getRemoteAddress();
             return ServerLoginPacketListenerImpl.this.server.getPreventProxyConnections() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress)socketaddress).getAddress() : null;
          }
-      };
-      thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-      thread.start();
-   }
+        });
+        // Paper end
+   }
+
+   // Spigot start
+   public class LoginHandler {
+      public void fireEvents() throws Exception {
+         // Paper start - Velocity support
+         if (ServerLoginPacketListenerImpl.this.velocityLoginMessageId == -1 && com.destroystokyo.paper.youcandfindpaper.PaperConfig.velocitySupport) {
+             disconnect("This server requires you to connect with Velocity.");
+             return;
+         }
+         // Paper end
+         String playerName = gameProfile.getName();
+         java.net.InetAddress address = ((java.net.InetSocketAddress) connection.getRemoteAddress()).getAddress();
+         java.util.UUID uniqueId = gameProfile.getId();
+         final org.bukkit.craftbukkit.v1_18_R2.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
+
+         org.bukkit.event.player.AsyncPlayerPreLoginEvent asyncEvent = new org.bukkit.event.player.AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+         server.getPluginManager().callEvent(asyncEvent);
+
+         if (org.bukkit.event.player.PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final org.bukkit.event.player.PlayerPreLoginEvent event = new org.bukkit.event.player.PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != org.bukkit.event.player.PlayerPreLoginEvent.Result.ALLOWED) {
+               event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            org.bukkit.craftbukkit.v1_18_R2.util.Waitable<org.bukkit.event.player.PlayerPreLoginEvent.Result> waitable = new org.bukkit.craftbukkit.v1_18_R2.util.Waitable<org.bukkit.event.player.PlayerPreLoginEvent.Result>() {
+               @Override
+               protected org.bukkit.event.player.PlayerPreLoginEvent.Result evaluate() {
+                  server.getPluginManager().callEvent(event);
+                  return event.getResult();
+               }};
+
+            ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
+            if (waitable.get() != org.bukkit.event.player.PlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(event.getKickMessage());
+               return;
+            }
+         } else {
+            if (asyncEvent.getLoginResult() != org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(asyncEvent.getKickMessage());
+               return;
+            }
+         }
+         // CraftBukkit end
+         ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
+         ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.NEGOTIATING;
+      }
+   }
+   // Spigot end
 
    public void handleCustomQueryPacket(ServerboundCustomQueryPacket p_10045_) {
+      // Paper start - Velocity support
+      if (com.destroystokyo.paper.youcandfindpaper.PaperConfig.velocitySupport && p_10045_.getTransactionId() == this.velocityLoginMessageId) {
+          net.minecraft.network.FriendlyByteBuf buf = p_10045_.getData();
+          if (buf == null) {
+              this.disconnect("This server requires you to connect with Velocity.");
+              return;
+          }
+
+          if (!com.destroystokyo.paper.youcandfindpaper.proxy.VelocityProxy.checkIntegrity(buf)) {
+              this.disconnect("Unable to verify player details");
+              return;
+          }
+
+          java.net.SocketAddress listening = this.connection.getRemoteAddress();
+          int port = 0;
+          if (listening instanceof java.net.InetSocketAddress) {
+              port = ((java.net.InetSocketAddress) listening).getPort();
+          }
+          this.connection.address = new java.net.InetSocketAddress(com.destroystokyo.paper.youcandfindpaper.proxy.VelocityProxy.readAddress(buf), port);
+
+          this.gameProfile = com.destroystokyo.paper.youcandfindpaper.proxy.VelocityProxy.createProfile(buf);
+
+          // Proceed with login
+          authenticatorPool.execute(() -> {
+              try {
+                  new LoginHandler().fireEvents();
+              } catch (Exception ex) {
+                  disconnect("Failed to verify username!");
+                  server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameProfile.getName(), ex);
+              }
+          });
+          return;
+      }
+      // Paper end
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_10045_, this.connection))
       this.disconnect(new TranslatableComponent("multiplayer.disconnect.unexpected_query_response"));
    }
 
