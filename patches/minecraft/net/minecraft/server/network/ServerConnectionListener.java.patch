--- a/net/minecraft/server/network/ServerConnectionListener.java
+++ b/net/minecraft/server/network/ServerConnectionListener.java
@@ -50,11 +_,12 @@
 
 public class ServerConnectionListener {
    private static final Logger LOGGER = LogUtils.getLogger();
+   private static final int READ_TIMEOUT = Integer.parseInt(System.getProperty("forge.readTimeout", "30"));
    public static final LazyLoadedValue<NioEventLoopGroup> SERVER_EVENT_GROUP = new LazyLoadedValue<>(() -> {
-      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build());
    });
    public static final LazyLoadedValue<EpollEventLoopGroup> SERVER_EPOLL_EVENT_GROUP = new LazyLoadedValue<>(() -> {
-      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build());
    });
    final MinecraftServer server;
    public volatile boolean running;
@@ -67,6 +_,8 @@
    }
 
    public void startTcpServerListener(@Nullable InetAddress p_9712_, int p_9713_) throws IOException {
+      if (p_9712_ == null) p_9712_ = new java.net.InetSocketAddress(p_9713_).getAddress();
+      net.minecraftforge.network.DualStackUtils.checkIPv6(p_9712_);
       synchronized(this.channels) {
          Class<? extends ServerSocketChannel> oclass;
          LazyLoadedValue<? extends EventLoopGroup> lazyloadedvalue;
@@ -87,16 +_,26 @@
                } catch (ChannelException channelexception) {
                }
 
-               p_9729_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyQueryHandler(ServerConnectionListener.this)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.SERVERBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.CLIENTBOUND));
+               p_9729_.pipeline().addLast("timeout", new ReadTimeoutHandler(READ_TIMEOUT)).addLast("legacy_query", new LegacyQueryHandler(ServerConnectionListener.this)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.SERVERBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.CLIENTBOUND));
                int i = ServerConnectionListener.this.server.getRateLimitPacketsPerSecond();
                Connection connection = (Connection)(i > 0 ? new RateKickingConnection(i) : new Connection(PacketFlow.SERVERBOUND));
                ServerConnectionListener.this.connections.add(connection);
                p_9729_.pipeline().addLast("packet_handler", connection);
                connection.setListener(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, connection));
             }
-         }).group(lazyloadedvalue.get()).localAddress(p_9712_, p_9713_).bind().syncUninterruptibly());
-      }
-   }
+         }).group(lazyloadedvalue.get()).localAddress(p_9712_, p_9713_).option(ChannelOption.AUTO_READ, false).bind().syncUninterruptibly()); // CraftBukkit
+      }
+   }
+
+   // CraftBukkit start
+   public void acceptConnections() {
+      synchronized (this.channels) {
+         for (ChannelFuture future : this.channels) {
+            future.channel().config().setAutoRead(true);
+         }
+      }
+   }
+   // CraftBukkit end
 
    public SocketAddress startMemoryChannel() {
       ChannelFuture channelfuture;
@@ -130,6 +_,13 @@
 
    public void tick() {
       synchronized(this.connections) {
+         // Spigot Start
+         // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+         if ( org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0 )
+         {
+            Collections.shuffle( this.connections );
+         }
+         // Spigot End
          Iterator<Connection> iterator = this.connections.iterator();
 
          while(iterator.hasNext()) {
@@ -151,6 +_,10 @@
                      connection.setReadOnly();
                   }
                } else {
+                  // Spigot Start
+                  // Fix a race condition where a NetworkManager could be unregistered just before connection.
+                  if (connection.preparing) continue;
+                  // Spigot End
                   iterator.remove();
                   connection.handleDisconnection();
                }
