--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -89,12 +_,39 @@
    public boolean initServer() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
-            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
-
-            String s1;
-            try {
-               while(!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.handleConsoleInput(s1, DedicatedServer.this.createCommandSourceStack());
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+            jline.console.ConsoleReader bufferedreader = reader;
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
+
+            String s;
+            try {
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                  if (org.bukkit.craftbukkit.Main.useJline) {
+                     s = bufferedreader.readLine(">", null);
+                  } else {
+                     s = bufferedreader.readLine();
+                  }
+
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.handleConsoleInput(s, DedicatedServer.this.createCommandSourceStack());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.LOGGER.error("Exception handling console input", (Throwable)ioexception1);
@@ -102,6 +_,27 @@
 
          }
       };
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+
+      global.addHandler(new org.bukkit.craftbukkit.v1_18_R2.util.ForwardLogHandler());
+
+      final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) org.apache.logging.log4j.LogManager.getRootLogger());
+      for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+         if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+            logger.removeAppender(appender);
+         }
+      }
+
+      new org.bukkit.craftbukkit.v1_18_R2.util.TerminalConsoleWriterThread(System.out, this.reader).start();
+
+      System.setOut(org.apache.logging.log4j.io.IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(org.apache.logging.log4j.io.IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.WARN).buildPrintStream());
+      // CraftBukkit end
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
       thread.start();
@@ -120,13 +_,32 @@
          this.setLocalIp(dedicatedserverproperties.serverIp);
       }
 
+      // Spigot start
+      this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage));
+      org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+      org.spigotmc.SpigotConfig.registerCommands();
+      // Spigot end
+      // Paper start
+      try {
+         com.destroystokyo.paper.youcandfindpaper.PaperConfig.init((java.io.File) options.valueOf("paper-settings"));
+      } catch (Exception e) {
+         DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+         return false;
+      }
+      com.destroystokyo.paper.youcandfindpaper.PaperConfig.registerCommands();
+      // Paper end
+
+      // Magma start
+      org.magmafoundation.magma.configuration.MagmaConfig.instance.registerCommands();
+      // Magma end
+
       this.setPvpAllowed(dedicatedserverproperties.pvp);
       this.setFlightAllowed(dedicatedserverproperties.allowFlight);
       this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
       this.setMotd(dedicatedserverproperties.motd);
       super.setPlayerIdleTimeout(dedicatedserverproperties.playerIdleTimeout.get());
       this.setEnforceWhitelist(dedicatedserverproperties.enforceWhitelist);
-      this.worldData.setGameType(dedicatedserverproperties.gamemode);
+      // this.worldData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
       LOGGER.info("Default game type: {}", (Object)dedicatedserverproperties.gamemode);
       InetAddress inetaddress = null;
       if (!this.getLocalIp().isEmpty()) {
@@ -149,10 +_,29 @@
          return false;
       }
 
+      // CraftBukkit start
+      server.loadPlugins();
+      server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+      // CraftBukkit end
+
+      // Paper start
+      boolean usingProxy = org.spigotmc.SpigotConfig.bungee || com.destroystokyo.paper.youcandfindpaper.PaperConfig.velocitySupport;
+      String proxyFlavor = (com.destroystokyo.paper.youcandfindpaper.PaperConfig.velocitySupport) ? "Velocity" : "BungeeCord";
+      String proxyLink = (com.destroystokyo.paper.youcandfindpaper.PaperConfig.velocitySupport) ? "https://docs.papermc.io/velocity/security" : "http://www.spigotmc.org/wiki/firewall-guide/";
+      // Paper end
       if (!this.usesAuthentication()) {
          LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
          LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-         LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         // Spigot start
+         // Paper start
+         if (usingProxy) {
+            DedicatedServer.LOGGER.warn("Whilst this makes it possible to use "+proxyFlavor+", unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+            DedicatedServer.LOGGER.warn("Please see "+proxyLink+" for further information.");
+            // Paper end
+         } else {
+            DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         }
+         // Spigot end
          LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
       }
 
@@ -163,15 +_,16 @@
       if (!OldUsersConverter.serverReadyAfterUserconversion(this)) {
          return false;
       } else {
-         this.setPlayerList(new DedicatedPlayerList(this, this.registryAccess(), this.playerDataStorage));
          long i = Util.getNanos();
          SkullBlockEntity.setup(this.getProfileCache(), this.getSessionService(), this);
          GameProfileCache.setUsesAuthentication(this.usesAuthentication());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          LOGGER.info("Preparing level \"{}\"", (Object)this.getLevelIdName());
-         this.loadLevel();
+         this.loadLevel(); // CraftBukkit - pass in levelId //Magma - no need to pass in levelId
          long j = Util.getNanos() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          LOGGER.info("Done ({})! For help, type \"help\"", (Object)s);
+         this.nextTickTime = Util.getMillis(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.announcePlayerAchievements != null) {
             this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(dedicatedserverproperties.announcePlayerAchievements, this);
          }
@@ -184,9 +_,10 @@
          if (dedicatedserverproperties.enableRcon) {
             LOGGER.info("Starting remote control listener");
             this.rconThread = RconThread.create(this);
+            this.remoteConsole = new org.bukkit.craftbukkit.v1_18_R2.command.CraftRemoteConsoleCommandSender(this.rconConsoleSource); // CraftBukkit
          }
 
-         if (this.getMaxTickLength() > 0L) {
+         if (false && this.getMaxTickLength() > 0L) {  // Spigot - disable
             Thread thread1 = new Thread(new ServerWatchdog(this));
             thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(LOGGER));
             thread1.setName("Server Watchdog");
@@ -195,12 +_,13 @@
          }
 
          Items.AIR.fillItemCategory(CreativeModeTab.TAB_SEARCH, NonNullList.create());
+         // <3 you Grum for this, saves us ~30 patch files! --^
          if (dedicatedserverproperties.enableJmxMonitoring) {
             MinecraftServerStatistics.registerJmxMonitoring(this);
             LOGGER.info("JMX monitoring enabled");
          }
 
-         return true;
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -316,6 +_,36 @@
          this.queryThreadGs4.stop();
       }
 
+      // Magma start - Add ArcLight stop
+      try {
+         net.minecrell.terminalconsole.TerminalConsoleAppender.close();
+      } catch (IOException e) {
+         e.printStackTrace();
+      }
+
+      org.magmafoundation.magma.protect.InjectProtect.shutdownCalled();
+
+      Thread exitThread = new Thread(() -> {
+         try {
+            Thread.sleep(5000L);
+         } catch (InterruptedException e) {
+            e.printStackTrace();
+         }
+         List<String> threads = new java.util.ArrayList<>();
+         for (Thread thread : Thread.getAllStackTraces().keySet()) {
+            if (!thread.isDaemon() && !thread.getName().equals("DestroyJavaVM")) {
+               threads.add(thread.getName());
+            }
+         }
+         if (!threads.isEmpty()) {
+            LOGGER.debug("Threads {} not shutting down", String.join(", ", threads));
+            LOGGER.info("{} threads not shutting down correctly, force exiting", threads.size());
+         }
+         System.exit(0);
+      }, "Exit Thread");
+      exitThread.setDaemon(true);
+      exitThread.start();
+      // Magma end
    }
 
    public void tickChildren(BooleanSupplier p_139661_) {
@@ -332,11 +_,21 @@
    }
 
    public void handleConsoleInputs() {
+      co.aikar.timings.MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
       while(!this.consoleInput.isEmpty()) {
          ConsoleInput consoleinput = this.consoleInput.remove(0);
-         this.getCommands().performCommand(consoleinput.source, consoleinput.msg);
+
+         // CraftBukkit start - ServerCommand for preprocessing
+         org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(console, consoleinput.msg);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) continue;
+         consoleinput = new ConsoleInput(event.getCommand(), consoleinput.source);
+
+         //this.getCommands().performCommand(consoleinput.source, consoleinput.msg); // Called in dispatchServerCommand
+         server.dispatchServerCommand(console, consoleinput);
+         // CraftBukkit end
       }
-
+      co.aikar.timings.MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
    }
 
    public boolean isDedicatedServer() {
@@ -518,14 +_,74 @@
    }
 
    public String getPluginNames() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String runCommand(String p_139644_) {
+      org.bukkit.craftbukkit.v1_18_R2.util.Waitable[] waitableArray = new org.bukkit.craftbukkit.v1_18_R2.util.Waitable[1];
       this.rconConsoleSource.prepareForCommand();
       this.executeBlocking(() -> {
-         this.getCommands().performCommand(this.rconConsoleSource.createCommandSourceStack(), p_139644_);
+         // CraftBukkit start - fire RemoteServerCommandEvent
+         org.bukkit.event.server.RemoteServerCommandEvent event = new org.bukkit.event.server.RemoteServerCommandEvent(remoteConsole, p_139644_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         // Paper start
+         if (p_139644_.toLowerCase().startsWith("timings") && p_139644_.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
+            org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
+            org.bukkit.craftbukkit.v1_18_R2.util.Waitable<String> waitable = new org.bukkit.craftbukkit.v1_18_R2.util.Waitable<String>() {
+               @Override
+               protected String evaluate() {
+                  return sender.getBuffer();
+               }
+            };
+            waitableArray[0] = waitable;
+            co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
+         } else {
+            // Paper end
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), rconConsoleSource.createCommandSourceStack());
+         server.dispatchServerCommand(remoteConsole, serverCommand);
+         } // Paper
+         // CraftBukkit end
       });
+      // Paper start
+      if (waitableArray[0] != null) {
+         //noinspection unchecked
+         org.bukkit.craftbukkit.v1_18_R2.util.Waitable<String> waitable = waitableArray[0];
+         try {
+            return waitable.get();
+         } catch (java.util.concurrent.ExecutionException e) {
+            throw new RuntimeException("Exception processing rcon command " + p_139644_, e.getCause());
+         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt(); // Maintain interrupted state
+            throw new RuntimeException("Interrupted processing rcon command " + p_139644_, e);
+         }
+      }
+      // Paper end
       return this.rconConsoleSource.getCommandResponse();
    }
 
@@ -545,6 +_,11 @@
       return false;
    }
 
+   @Override //Forge: Enable formated text for colors in console.
+   public void sendMessage(net.minecraft.network.chat.Component message, java.util.UUID p_108776_) {
+      LOGGER.info(message.getString());
+   }
+
    public int getScaledTrackingDistance(int p_139659_) {
       return this.getProperties().entityBroadcastRangePercentage * p_139659_ / 100;
    }
@@ -588,4 +_,15 @@
    public Component getResourcePackPrompt() {
       return this.resourcePackPrompt;
    }
+
+   // CraftBukkit start
+   public boolean isDebugging() {
+      return this.getProperties().debug;
+   }
+
+   @Override
+   public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
+   }
+   // CraftBukkit end
 }
