--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,5 +_,6 @@
 package net.minecraft.server.dedicated;
 
+import co.aikar.timings.MinecraftTimings;
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
@@ -7,26 +_,7 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.Writer;
-import java.net.InetAddress;
-import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
-import java.util.Locale;
-import java.util.function.BooleanSupplier;
-import java.util.regex.Pattern;
-import javax.annotation.Nullable;
-import net.minecraft.DefaultUncaughtExceptionHandler;
-import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
-import net.minecraft.SharedConstants;
-import net.minecraft.SystemReport;
-import net.minecraft.Util;
+import net.minecraft.*;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
@@ -57,8 +_,31 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_18_R2.command.CraftRemoteConsoleCommandSender;
+import org.bukkit.craftbukkit.v1_18_R2.util.ForwardLogHandler;
+import org.bukkit.craftbukkit.v1_18_R2.util.TerminalConsoleWriterThread;
+import org.bukkit.craftbukkit.v1_18_R2.util.Waitable;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
+import org.magmafoundation.magma.configuration.MagmaConfig;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
+import java.io.IOException;
+import java.io.Writer;
+import java.net.InetAddress;
+import java.net.Proxy;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import java.util.function.BooleanSupplier;
+import java.util.regex.Pattern;
+
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
    static final Logger f_139598_ = LogUtils.getLogger();
    private static final int f_142864_ = 5000;
@@ -89,12 +_,35 @@
    public boolean m_7038_() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
-            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
-
-            String s1;
-            try {
-               while(!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+            jline.console.ConsoleReader bufferedreader = reader;
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
+
+            String s;
+            try {
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_()) {
+                  s = bufferedreader.readLine();
+
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.m_139645_(s, DedicatedServer.this.m_129893_());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.f_139598_.error("Exception handling console input", (Throwable)ioexception1);
@@ -102,6 +_,27 @@
 
          }
       };
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+
+      global.addHandler(new ForwardLogHandler());
+
+      final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+      for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+         if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+            logger.removeAppender(appender);
+         }
+      }
+
+      new TerminalConsoleWriterThread(System.out, this.reader).start();
+
+      System.setOut(IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.WARN).buildPrintStream());
+      // CraftBukkit end
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_139598_));
       thread.start();
@@ -120,13 +_,32 @@
          this.m_129913_(dedicatedserverproperties.f_139730_);
       }
 
+      // Spigot start
+      this.m_129823_(new DedicatedPlayerList(this, this.f_129746_, this.f_129745_));
+      org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+      org.spigotmc.SpigotConfig.registerCommands();
+      // Spigot end
+      // Paper start
+      try {
+         com.destroystokyo.paper.PaperConfig.init((java.io.File) options.valueOf("paper-settings"));
+      } catch (Exception e) {
+         DedicatedServer.f_139598_.error("Unable to load server configuration", e);
+         return false;
+      }
+      com.destroystokyo.paper.PaperConfig.registerCommands();
+      // Paper end
+
+      // Magma start
+      MagmaConfig.instance.registerCommands();
+      // Magma end
+
       this.m_129997_(dedicatedserverproperties.f_139733_);
       this.m_129999_(dedicatedserverproperties.f_139734_);
       this.m_129853_(dedicatedserverproperties.f_139735_, this.m_139664_());
       this.m_129989_(dedicatedserverproperties.f_139736_);
       super.m_7196_(dedicatedserverproperties.f_139725_.get());
       this.m_130004_(dedicatedserverproperties.f_139738_);
-      this.f_129749_.m_5458_(dedicatedserverproperties.f_139740_);
+      // this.worldData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
       f_139598_.info("Default game type: {}", (Object)dedicatedserverproperties.f_139740_);
       InetAddress inetaddress = null;
       if (!this.m_130009_().isEmpty()) {
@@ -149,10 +_,22 @@
          return false;
       }
 
+      // CraftBukkit start
+      server.loadPlugins();
+      server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+      // CraftBukkit end
+
       if (!this.m_129797_()) {
          f_139598_.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
          f_139598_.warn("The server will make no attempt to authenticate usernames. Beware.");
-         f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         // Spigot start
+         if (org.spigotmc.SpigotConfig.bungee) {
+            DedicatedServer.f_139598_.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+            DedicatedServer.f_139598_.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+         } else {
+            DedicatedServer.f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         }
+         // Spigot end
          f_139598_.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
       }
 
@@ -163,15 +_,16 @@
       if (!OldUsersConverter.m_11106_(this)) {
          return false;
       } else {
-         this.m_129823_(new DedicatedPlayerList(this, this.m_206579_(), this.f_129745_));
          long i = Util.m_137569_();
          SkullBlockEntity.m_196700_(this.m_129927_(), this.m_129925_(), this);
          GameProfileCache.m_11004_(this.m_129797_());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          f_139598_.info("Preparing level \"{}\"", (Object)this.m_7123_());
-         this.m_130006_();
+         this.m_130006_(); // CraftBukkit - pass in levelId //Magma - no need to pass in levelId
          long j = Util.m_137569_() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          f_139598_.info("Done ({})! For help, type \"help\"", (Object)s);
+         this.f_129726_ = Util.m_137550_(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.f_139744_ != null) {
             this.m_129900_().m_46170_(GameRules.f_46153_).m_46246_(dedicatedserverproperties.f_139744_, this);
          }
@@ -184,9 +_,10 @@
          if (dedicatedserverproperties.f_139747_) {
             f_139598_.info("Starting remote control listener");
             this.f_139603_ = RconThread.m_11615_(this);
+            this.remoteConsole = new CraftRemoteConsoleCommandSender(this.f_139602_); // CraftBukkit
          }
 
-         if (this.m_139669_() > 0L) {
+         if (false && this.m_139669_() > 0L) {  // Spigot - disable
             Thread thread1 = new Thread(new ServerWatchdog(this));
             thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(f_139598_));
             thread1.setName("Server Watchdog");
@@ -195,12 +_,13 @@
          }
 
          Items.f_41852_.m_6787_(CreativeModeTab.f_40754_, NonNullList.m_122779_());
+         // <3 you Grum for this, saves us ~30 patch files! --^
          if (dedicatedserverproperties.f_139721_) {
             MinecraftServerStatistics.m_18328_(this);
             f_139598_.info("JMX monitoring enabled");
          }
 
-         return true;
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -316,6 +_,7 @@
          this.f_139601_.m_7530_();
       }
 
+      Runtime.getRuntime().halt(0);
    }
 
    public void m_5703_(BooleanSupplier p_139661_) {
@@ -332,11 +_,21 @@
    }
 
    public void m_139665_() {
+      MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
       while(!this.f_139600_.isEmpty()) {
          ConsoleInput consoleinput = this.f_139600_.remove(0);
-         this.m_129892_().m_82117_(consoleinput.f_135929_, consoleinput.f_135928_);
+
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(console, consoleinput.f_135928_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) continue;
+         consoleinput = new ConsoleInput(event.getCommand(), consoleinput.f_135929_);
+
+         //this.getCommands().performCommand(consoleinput.source, consoleinput.msg); // Called in dispatchServerCommand
+         server.dispatchServerCommand(console, consoleinput);
+         // CraftBukkit end
       }
-
+      MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
    }
 
    public boolean m_6982_() {
@@ -518,14 +_,74 @@
    }
 
    public String m_7138_() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String m_7261_(String p_139644_) {
+      Waitable[] waitableArray = new Waitable[1];
       this.f_139602_.m_11512_();
       this.m_18709_(() -> {
-         this.m_129892_().m_82117_(this.f_139602_.m_11514_(), p_139644_);
+         // CraftBukkit start - fire RemoteServerCommandEvent
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, p_139644_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         // Paper start
+         if (p_139644_.toLowerCase().startsWith("timings") && p_139644_.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
+            org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
+            Waitable<String> waitable = new Waitable<String>() {
+               @Override
+               protected String evaluate() {
+                  return sender.getBuffer();
+               }
+            };
+            waitableArray[0] = waitable;
+            co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
+         } else {
+            // Paper end
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), f_139602_.m_11514_());
+         server.dispatchServerCommand(remoteConsole, serverCommand);
+         } // Paper
+         // CraftBukkit end
       });
+      // Paper start
+      if (waitableArray[0] != null) {
+         //noinspection unchecked
+         Waitable<String> waitable = waitableArray[0];
+         try {
+            return waitable.get();
+         } catch (java.util.concurrent.ExecutionException e) {
+            throw new RuntimeException("Exception processing rcon command " + p_139644_, e.getCause());
+         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt(); // Maintain interrupted state
+            throw new RuntimeException("Interrupted processing rcon command " + p_139644_, e);
+         }
+      }
+      // Paper end
       return this.f_139602_.m_11513_();
    }
 
@@ -545,6 +_,11 @@
       return false;
    }
 
+   @Override //Forge: Enable formated text for colors in console.
+   public void m_6352_(net.minecraft.network.chat.Component message, java.util.UUID p_108776_) {
+      f_139598_.info(message.getString());
+   }
+
    public int m_7186_(int p_139659_) {
       return this.m_7913_().f_139723_ * p_139659_ / 100;
    }
@@ -588,4 +_,15 @@
    public Component m_141958_() {
       return this.f_142863_;
    }
+
+   // CraftBukkit start
+   public boolean isDebugging() {
+      return this.m_7913_().debug;
+   }
+
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
+   }
+   // CraftBukkit end
 }
