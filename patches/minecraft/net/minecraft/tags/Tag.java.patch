--- a/net/minecraft/tags/Tag.java
+++ b/net/minecraft/tags/Tag.java
@@ -31,8 +_,16 @@
       return (Tag<T>)EMPTY;
    }
 
-   public static class Builder {
+   public static class Builder implements net.minecraftforge.common.extensions.IForgeRawTagBuilder {
+      private final List<Tag.BuilderEntry> removeEntries = new java.util.ArrayList<>(); // FORGE: internal field for tracking "remove" entries
+      /** FORGE: Gets a view of this builder's "remove" entries (only used during datagen) **/
+      public Stream<Tag.BuilderEntry> getRemoveEntries() { return this.removeEntries.stream(); }
+      public Tag.Builder remove(final Tag.BuilderEntry proxy) { // internal forge method for adding remove entries
+         this.removeEntries.add(proxy);
+         return this;
+      }
       private final List<Tag.BuilderEntry> entries = new ArrayList<>();
+      private boolean replace = false;
 
       public static Tag.Builder tag() {
          return new Tag.Builder();
@@ -63,6 +_,15 @@
          return this.add(new Tag.OptionalTagEntry(p_144383_), p_144384_);
       }
 
+      public Tag.Builder replace(boolean value) {
+         this.replace = value;
+         return this;
+      }
+
+      public Tag.Builder replace() {
+         return replace(true);
+      }
+
       public <T> Either<Collection<Tag.BuilderEntry>, Tag<T>> build(Function<ResourceLocation, Tag<T>> p_144372_, Function<ResourceLocation, T> p_144373_) {
          ImmutableSet.Builder<T> builder = ImmutableSet.builder();
          List<Tag.BuilderEntry> list = new ArrayList<>();
@@ -104,6 +_,7 @@
             this.entries.clear();
          }
 
+         net.minecraftforge.common.ForgeHooks.deserializeTagAdditions(list, p_13313_, entries);
          list.forEach((p_13319_) -> {
             this.entries.add(new Tag.BuilderEntry(p_13319_, p_13314_));
          });
@@ -139,8 +_,9 @@
             tag$builderentry.entry().serializeTo(jsonarray);
          }
 
-         jsonobject.addProperty("replace", false);
+         jsonobject.addProperty("replace", replace);
          jsonobject.add("values", jsonarray);
+         this.serializeTagAdditions(jsonobject);
          return jsonobject;
       }
    }
@@ -179,6 +_,7 @@
       public String toString() {
          return this.id.toString();
       }
+      @Override public boolean equals(Object o) { return o == this || (o instanceof Tag.ElementEntry && java.util.Objects.equals(this.id, ((Tag.ElementEntry) o).id)); }
    }
 
    public interface Entry {
@@ -287,6 +_,8 @@
       public String toString() {
          return "#" + this.id;
       }
+      @Override public boolean equals(Object o) { return o == this || (o instanceof Tag.TagEntry && java.util.Objects.equals(this.id, ((Tag.TagEntry) o).id)); }
+      public ResourceLocation getId() { return id; }
 
       public boolean verifyIfPresent(Predicate<ResourceLocation> p_144404_, Predicate<ResourceLocation> p_144405_) {
          return p_144405_.test(this.id);
