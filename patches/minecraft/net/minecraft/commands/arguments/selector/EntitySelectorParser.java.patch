--- a/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -245,6 +_,57 @@
       }
    }
 
+   // CraftBukkit start
+   protected void parseSelector(boolean overridePermissions) throws CommandSyntaxException {
+      this.usesSelectors = !overridePermissions;
+      // CraftBukkit end
+      this.suggestions = this::suggestSelector;
+      if (!this.reader.canRead()) {
+         throw ERROR_MISSING_SELECTOR_TYPE.createWithContext(this.reader);
+      } else {
+         int i = this.reader.getCursor();
+         char c0 = this.reader.read();
+         if (c0 == 'p') {
+            this.maxResults = 1;
+            this.includesEntities = false;
+            this.order = ORDER_NEAREST;
+            this.limitToType(EntityType.PLAYER);
+         } else if (c0 == 'a') {
+            this.maxResults = Integer.MAX_VALUE;
+            this.includesEntities = false;
+            this.order = ORDER_ARBITRARY;
+            this.limitToType(EntityType.PLAYER);
+         } else if (c0 == 'r') {
+            this.maxResults = 1;
+            this.includesEntities = false;
+            this.order = ORDER_RANDOM;
+            this.limitToType(EntityType.PLAYER);
+         } else if (c0 == 's') {
+            this.maxResults = 1;
+            this.includesEntities = true;
+            this.currentEntity = true;
+         } else {
+            if (c0 != 'e') {
+               this.reader.setCursor(i);
+               throw ERROR_UNKNOWN_SELECTOR_TYPE.createWithContext(this.reader, "@" + String.valueOf(c0));
+            }
+
+            this.maxResults = Integer.MAX_VALUE;
+            this.includesEntities = true;
+            this.order = ORDER_ARBITRARY;
+            this.predicate = Entity::isAlive;
+         }
+
+         this.suggestions = this::suggestOpenOptions;
+         if (this.reader.canRead() && this.reader.peek() == '[') {
+            this.reader.skip();
+            this.suggestions = this::suggestOptionsKeyOrClose;
+            this.parseOptions();
+         }
+
+      }
+   }
+
    protected void parseNameOrUUID() throws CommandSyntaxException {
       if (this.reader.canRead()) {
          this.suggestions = this::suggestName;
@@ -461,6 +_,9 @@
          }
 
          this.reader.skip();
+         EntitySelector forgeSelector = net.minecraftforge.common.command.EntitySelectorManager.parseSelector(this);
+         if (forgeSelector != null)
+            return forgeSelector;
          this.parseSelector();
       } else {
          this.parseNameOrUUID();
@@ -470,12 +_,36 @@
       return this.getSelector();
    }
 
+   // CraftBukkit start
+   public EntitySelector parse(boolean overridePermissions) throws CommandSyntaxException {
+      // CraftBukkit end
+      this.startPosition = this.reader.getCursor();
+      this.suggestions = this::suggestNameOrSelector;
+      if (this.reader.canRead() && this.reader.peek() == '@') {
+         if (!this.allowSelectors) {
+            throw ERROR_SELECTORS_NOT_ALLOWED.createWithContext(this.reader);
+         }
+
+         this.reader.skip();
+         EntitySelector forgeSelector = net.minecraftforge.common.command.EntitySelectorManager.parseSelector(this);
+         if (forgeSelector != null)
+            return forgeSelector;
+         this.parseSelector(overridePermissions); // CraftBukkit
+      } else {
+         this.parseNameOrUUID();
+      }
+
+      this.finalizePredicates();
+      return this.getSelector();
+   }
+
    private static void fillSelectorSuggestions(SuggestionsBuilder p_121248_) {
       p_121248_.suggest("@p", new TranslatableComponent("argument.entity.selector.nearestPlayer"));
       p_121248_.suggest("@a", new TranslatableComponent("argument.entity.selector.allPlayers"));
       p_121248_.suggest("@r", new TranslatableComponent("argument.entity.selector.randomPlayer"));
       p_121248_.suggest("@s", new TranslatableComponent("argument.entity.selector.self"));
       p_121248_.suggest("@e", new TranslatableComponent("argument.entity.selector.allEntities"));
+      net.minecraftforge.common.command.EntitySelectorManager.fillSelectorSuggestions(p_121248_);
    }
 
    private CompletableFuture<Suggestions> suggestNameOrSelector(SuggestionsBuilder p_121287_, Consumer<SuggestionsBuilder> p_121288_) {
