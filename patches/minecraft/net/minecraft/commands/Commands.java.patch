--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -115,8 +_,10 @@
    public static final int LEVEL_ADMINS = 3;
    public static final int LEVEL_OWNERS = 4;
    private final CommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher<>();
+   private final CommandDispatcher<CommandSourceStack> forgeDispatcher = new CommandDispatcher<>();
 
    public Commands(Commands.CommandSelection p_82093_) {
+      this(); // CraftBukkit
       AdvancementCommands.register(this.dispatcher);
       AttributeCommand.register(this.dispatcher);
       ExecuteCommand.register(this.dispatcher);
@@ -177,7 +_,7 @@
          JfrCommand.register(this.dispatcher);
       }
 
-      if (SharedConstants.IS_RUNNING_IN_IDE) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          TestCommand.register(this.dispatcher);
       }
 
@@ -201,26 +_,85 @@
       if (p_82093_.includeIntegrated) {
          PublishCommand.register(this.dispatcher);
       }
+      net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.forgeDispatcher, p_82093_);
 
       this.dispatcher.findAmbiguities((p_82108_, p_82109_, p_82110_, p_82111_) -> {
-         LOGGER.warn("Ambiguity between arguments {} and {} with inputs: {}", this.dispatcher.getPath(p_82109_), this.dispatcher.getPath(p_82110_), p_82111_);
+         // LOGGER.warn("Ambiguity between arguments {} and {} with inputs: {}", this.dispatcher.getPath(p_82109_), this.dispatcher.getPath(p_82110_), p_82111_); // CraftBukkit
       });
+
+      // CraftBukkit start
+   }
+
+
+   public Commands() {
+      // CraftBukkkit end
       this.dispatcher.setConsumer((p_82104_, p_82105_, p_82106_) -> {
          p_82104_.getSource().onCommandComplete(p_82104_, p_82105_, p_82106_);
       });
    }
 
+   // CraftBukkit start
+   public int dispatchServerCommand(CommandSourceStack sender, String command) {
+      com.google.common.base.Joiner joiner = com.google.common.base.Joiner.on(" ");
+      if (command.startsWith("/")) {
+         command = command.substring(1);
+      }
+
+      org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(sender.getBukkitSender(), command);
+      org.bukkit.Bukkit.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return 0;
+      }
+      command = event.getCommand();
+
+      String[] args = command.split(" ");
+
+      String cmd = args[0];
+      if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+      if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+      if (cmd.startsWith("forge:")) {
+         setForge(true);
+         cmd = cmd.substring("forge:".length());
+      }
+
+      // Block disallowed commands
+      if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+              || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+              || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+         setForge(false);
+         return 0;
+      }
+
+      // Handle vanilla commands;
+      if (sender.getLevel().getCraftServer().getCommandBlockOverride(args[0])) {
+         args[0] = "minecraft:" + args[0];
+      }
+
+      String newCommand = joiner.join(args);
+      try {
+         return this.performCommand(sender, newCommand, newCommand, false);
+      } finally {
+         setForge(false);
+      }
+   }
+
+   //Magma start - fix mixin inject on original performCommand
+   private @Nullable String performCommand_label = null;
+   private boolean performCommand_stripSlash = true;
    public int performCommand(CommandSourceStack p_82118_, String p_82119_) {
       StringReader stringreader = new StringReader(p_82119_);
-      if (stringreader.canRead() && stringreader.peek() == '/') {
+      if (this.performCommand_stripSlash && stringreader.canRead() && stringreader.peek() == '/') {
          stringreader.skip();
+         // CraftBukkit end
       }
 
       p_82118_.getServer().getProfiler().push(p_82119_);
 
       try {
          try {
-            return this.dispatcher.execute(stringreader, p_82118_);
+            if (parseCommand(stringreader, p_82118_).isEmpty())
+               return 1;
+            return this.getCurrentDispatcher(stringreader).execute(parseCommand(stringreader, p_82118_).get().getParseResults());
          } catch (CommandRuntimeException commandruntimeexception) {
             p_82118_.sendFailure(commandruntimeexception.getComponent());
             return 0;
@@ -229,7 +_,7 @@
             if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
                int j = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
                MutableComponent mutablecomponent1 = (new TextComponent("")).withStyle(ChatFormatting.GRAY).withStyle((p_82134_) -> {
-                  return p_82134_.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, p_82119_));
+                  return p_82134_.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, this.performCommand_label == null ? p_82119_ : this.performCommand_label)); // CraftBukkit
                });
                if (j > 10) {
                   mutablecomponent1.append("...");
@@ -269,19 +_,100 @@
          return 0;
       } finally {
          p_82118_.getServer().getProfiler().pop();
-      }
-   }
-
+         this.performCommand_stripSlash = true;
+         this.performCommand_label = null;
+      }
+   }
+
+   private java.util.Optional<net.minecraftforge.event.CommandEvent> parseCommand(StringReader stringreader, CommandSourceStack stack) throws Exception {
+      ParseResults<CommandSourceStack> parse = this.getCurrentDispatcher(stringreader).parse(stringreader, stack);
+      net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(parse);
+      if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+         if (event.getException() instanceof Exception exception) {
+            throw exception;
+         } else if (event.getException() != null) {
+            com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+         }
+         return java.util.Optional.empty();
+      }
+      return java.util.Optional.of(event);
+   }
+
+   public int performCommand(CommandSourceStack p_82118_, String p_82119_, String label, boolean stripSlash) {
+      this.performCommand_label = label;
+      this.performCommand_stripSlash = stripSlash;
+      return this.performCommand(p_82118_, p_82119_);
+   }
+   //Magma end
+
+   //Magma start - rewrite to add forge dispatcher support
    public void sendCommands(ServerPlayer p_82096_) {
-      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newHashMap();
+      if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) return; // Spigot
+      // CraftBukkit start
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+
+      RootCommandNode<SharedSuggestionProvider> vanillaRoot = new RootCommandNode<>();
+      Commands vanillaCommands = p_82096_.server.vanillaCommandDispatcher;
+      map.put(vanillaCommands.getDispatcher().getRoot(), vanillaRoot);
+
+      // FORGE: Use our own command node merging method to handle redirect nodes properly, see issue #7551
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(vanillaCommands.getDispatcher().getRoot(), vanillaRoot, map, p_82096_.createCommandSourceStack(), ctx -> 0, suggest -> SuggestionProviders.safelySwap((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      // Now build the global commands in a second pass
       RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode<>();
       map.put(this.dispatcher.getRoot(), rootcommandnode);
-      this.fillUsableCommands(this.dispatcher.getRoot(), rootcommandnode, p_82096_.createCommandSourceStack(), map);
-      p_82096_.connection.send(new ClientboundCommandsPacket(rootcommandnode));
+
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(this.dispatcher.getRoot(), rootcommandnode, map, p_82096_.createCommandSourceStack(), ctx -> 0, suggest -> SuggestionProviders.safelySwap((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      java.util.LinkedHashSet<String> set = new java.util.LinkedHashSet<>();
+      for (CommandNode<SharedSuggestionProvider> child : rootcommandnode.getChildren()) {
+         set.add(child.getName());
+      }
+
+      org.bukkit.event.player.PlayerCommandSendEvent event = new org.bukkit.event.player.PlayerCommandSendEvent(p_82096_.getBukkitEntity(), new java.util.LinkedHashSet<>(set));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+      // Remove labels that were removed during the event
+      for (String orig : set) {
+         if (!event.getCommands().contains(orig)) {
+            rootcommandnode.removeCommand(orig);
+         }
+      }
+
+      //Now add the forge commands
+      RootCommandNode<SharedSuggestionProvider> forgeRoot = new RootCommandNode<>();
+      map.put(this.forgeDispatcher.getRoot(), forgeRoot);
+
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(this.forgeDispatcher.getRoot(), forgeRoot, map, p_82096_.createCommandSourceStack(), ctx -> 0, suggest -> SuggestionProviders.safelySwap((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      //Add all the forge commands to the root node
+      forgeRoot.getChildren().forEach(rootcommandnode::addChild);
+      //ambassador support start
+      ClientboundCommandsPacket packet = new ClientboundCommandsPacket(rootcommandnode);
+      try{
+         net.minecraftforge.network.ConnectionData connectionData = (net.minecraftforge.network.ConnectionData) p_82096_.connection.connection.channel().attr(io.netty.util.AttributeKey.valueOf("fml:conndata")).get();
+         if (connectionData == null){
+            LOGGER.info("Failed to get a channel with the attribute of fml:conndata.");
+            p_82096_.connection.send(packet);
+         } else if (connectionData.getChannels().keySet().stream().anyMatch((v) -> v.equals(new net.minecraft.resources.ResourceLocation("ambassador:commands")))) {
+            net.minecraft.network.FriendlyByteBuf byteBuf = new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+            packet.write(byteBuf, true);
+            p_82096_.connection.send(new net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket(new net.minecraft.resources.ResourceLocation("ambassador:commands"), byteBuf));
+         } else {
+            p_82096_.connection.send(packet);
+         }
+      }catch (ClassCastException e){
+            LOGGER.error("Failed to get connection data for player " + p_82096_.getName().getString() + ". Someone registered a channel with the fml:conndata key that isn't a net.minecraftforge.network.ConnectionData object.");
+            p_82096_.connection.send(packet);
+      }
+      //ambassador support end
    }
+   //Magma end
 
    private void fillUsableCommands(CommandNode<CommandSourceStack> p_82113_, CommandNode<SharedSuggestionProvider> p_82114_, CommandSourceStack p_82115_, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> p_82116_) {
       for(CommandNode<CommandSourceStack> commandnode : p_82113_.getChildren()) {
+         if ( !org.spigotmc.SpigotConfig.sendNamespaced && commandnode.getName().contains( ":" ) ) continue; // Spigot
          if (commandnode.canUse(p_82115_)) {
             ArgumentBuilder<SharedSuggestionProvider, ?> argumentbuilder = (ArgumentBuilder)commandnode.createBuilder();
             argumentbuilder.requires((p_82126_) -> {
@@ -335,9 +_,16 @@
    }
 
    public CommandDispatcher<CommandSourceStack> getDispatcher() {
+      if (org.magmafoundation.magma.commands.DispatcherRedirector.shouldBypass())
+         return this.forgeDispatcher;
       return this.dispatcher;
    }
 
+   //Magma - wrap the forge dispatcher to prevent LuckPerms from using this method as the vanilla dispatcher.. thanks reflection...
+   public org.magmafoundation.magma.util.Wrapped<CommandDispatcher<CommandSourceStack>> getForgeDispatcher() {
+      return org.magmafoundation.magma.util.Wrapped.wrap(forgeDispatcher);
+   }
+
    @Nullable
    public static <S> CommandSyntaxException getParseException(ParseResults<S> p_82098_) {
       if (!p_82098_.getReader().canRead()) {
@@ -362,6 +_,39 @@
          throw new IllegalStateException("Unregistered argument types");
       }
    }
+
+   //Magma start - add forge dispatcher
+   private boolean forge = false;
+   public void setForge(boolean b) {
+      this.forge = b;
+   }
+
+   private CommandDispatcher<CommandSourceStack> getCurrentDispatcher(StringReader stringReader) {
+      if (forge)
+         return getForgeDispatcher().unwrap();
+
+      String literal = stringReader.getString().split(" ")[0]; //the command root, ex. deop
+      if (literal.startsWith("/"))
+         literal = literal.substring(1);
+      if (literal.startsWith("forge:"))
+         return getForgeDispatcher().unwrap();
+
+      final String search = literal;
+      CommandNode<CommandSourceStack> found = getForgeDispatcher().unwrap()
+              .getRoot()
+              .getChildren()
+              .stream()
+              .filter(node -> node instanceof com.mojang.brigadier.tree.LiteralCommandNode)
+              .filter(node -> ((com.mojang.brigadier.tree.LiteralCommandNode<?>) node).getLiteral().equals(search))
+              .findFirst()
+              .orElse(null);
+
+      if (found != null)
+         return getForgeDispatcher().unwrap();
+
+      return getDispatcher();
+   }
+   //Magma end
 
    public static enum CommandSelection {
       ALL(true, true),
