--- a/net/minecraft/resources/ResourceKey.java
+++ b/net/minecraft/resources/ResourceKey.java
@@ -8,8 +_,8 @@
 import java.util.function.Function;
 import net.minecraft.core.Registry;
 
-public class ResourceKey<T> {
-   private static final Map<String, ResourceKey<?>> VALUES = Collections.synchronizedMap(Maps.newIdentityHashMap());
+public class ResourceKey<T> implements Comparable<ResourceKey<?>> {
+   private static final Map<String, ResourceKey<?>> VALUES = Collections.synchronizedMap(Maps.newHashMap()); // CraftBukkit - SPIGOT-6973: remove costly intern
    private final ResourceLocation registryName;
    private final ResourceLocation location;
 
@@ -28,7 +_,7 @@
    }
 
    private static <T> ResourceKey<T> create(ResourceLocation p_135791_, ResourceLocation p_135792_) {
-      String s = (p_135791_ + ":" + p_135792_).intern();
+      String s = (p_135791_ + ":" + p_135792_); // CraftBukkit - SPIGOT-6973: remove costly intern
       return (ResourceKey<T>)VALUES.computeIfAbsent(s, (p_195971_) -> {
          return new ResourceKey(p_135791_, p_135792_);
       });
@@ -63,5 +_,23 @@
       return (p_195974_) -> {
          return create(p_135798_, p_195974_);
       };
+   }
+
+   public ResourceLocation getRegistryName() {
+      return this.registryName;
+   }
+
+   @Override
+   public boolean equals(Object o) {
+      if (this == o) return true;
+      if (o == null || getClass() != o.getClass()) return false;
+      return registryName.equals(((ResourceKey<?>) o).registryName) && location.equals(((ResourceKey<?>) o).location);
+   }
+
+   @Override
+   public int compareTo(ResourceKey<?> o) {
+      int ret = this.getRegistryName().compareTo(o.getRegistryName());
+      if (ret == 0) ret = this.location().compareTo(o.location());
+      return ret;
    }
 }
