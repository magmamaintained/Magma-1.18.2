--- a/net/minecraft/resources/RegistryResourceAccess.java
+++ b/net/minecraft/resources/RegistryResourceAccess.java
@@ -66,6 +_,7 @@
 
                      try {
                         JsonElement jsonelement = JsonParser.parseReader(reader);
+                        if (jsonelement != null) jsonelement.getAsJsonObject().addProperty("forge:registry_name", p_195895_.location().toString());
                         optional = Optional.of(p_195896_.parse(p_195893_, jsonelement).map(RegistryResourceAccess.ParsedEntry::createWithoutId));
                      } catch (Throwable throwable2) {
                         try {
@@ -102,6 +_,8 @@
          }
 
          private static String registryDirPath(ResourceKey<? extends Registry<?>> p_195910_) {
+            if (net.minecraftforge.registries.RegistryManager.FROZEN.getRegistry(p_195910_.location()) != null && !(p_195910_.location().getNamespace().equals("minecraft")))
+               return p_195910_.location().getNamespace() + "/" + p_195910_.location().getPath(); // FORGE: add non-vanilla registry namespace to loader directory, same format as tag directory (see net.minecraft.tags.TagManager#getTagDir(ResourceKey))
             return p_195910_.location().getPath();
          }
 
@@ -138,6 +_,8 @@
 
       public <E> Optional<DataResult<RegistryResourceAccess.ParsedEntry<E>>> parseElement(DynamicOps<JsonElement> p_195917_, ResourceKey<? extends Registry<E>> p_195918_, ResourceKey<E> p_195919_, Decoder<E> p_195920_) {
          RegistryResourceAccess.InMemoryStorage.Entry registryresourceaccess$inmemorystorage$entry = this.entries.get(p_195919_);
+         if (registryresourceaccess$inmemorystorage$entry != null && registryresourceaccess$inmemorystorage$entry.data != null && registryresourceaccess$inmemorystorage$entry.data.isJsonObject())
+            registryresourceaccess$inmemorystorage$entry.data.getAsJsonObject().addProperty("forge:registry_name", p_195919_.location().toString());
          return registryresourceaccess$inmemorystorage$entry == null ? Optional.of(DataResult.error("Unknown element: " + p_195919_)) : Optional.of(p_195920_.parse(p_195917_, registryresourceaccess$inmemorystorage$entry.data).setLifecycle(registryresourceaccess$inmemorystorage$entry.lifecycle).map((p_195930_) -> {
             return RegistryResourceAccess.ParsedEntry.createWithId(p_195930_, registryresourceaccess$inmemorystorage$entry.id);
          }));
