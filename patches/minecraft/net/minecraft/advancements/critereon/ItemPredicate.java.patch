--- a/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -28,6 +_,8 @@
 import net.minecraft.world.level.ItemLike;
 
 public class ItemPredicate {
+   private static final Map<ResourceLocation, java.util.function.Function<JsonObject, ItemPredicate>> custom_predicates = new java.util.HashMap<>();
+   private static final Map<ResourceLocation, java.util.function.Function<JsonObject, ItemPredicate>> unmod_predicates = java.util.Collections.unmodifiableMap(custom_predicates);
    public static final ItemPredicate ANY = new ItemPredicate();
    @Nullable
    private final TagKey<Item> tag;
@@ -107,6 +_,11 @@
    public static ItemPredicate fromJson(@Nullable JsonElement p_45052_) {
       if (p_45052_ != null && !p_45052_.isJsonNull()) {
          JsonObject jsonobject = GsonHelper.convertToJsonObject(p_45052_, "item");
+         if (jsonobject.has("type")) {
+            final ResourceLocation rl = new ResourceLocation(GsonHelper.getAsString(jsonobject, "type"));
+            if (custom_predicates.containsKey(rl)) return custom_predicates.get(rl).apply(jsonobject);
+            else throw new JsonSyntaxException("There is no ItemPredicate of type "+rl);
+         }
          MinMaxBounds.Ints minmaxbounds$ints = MinMaxBounds.Ints.fromJson(jsonobject.get("count"));
          MinMaxBounds.Ints minmaxbounds$ints1 = MinMaxBounds.Ints.fromJson(jsonobject.get("durability"));
          if (jsonobject.has("data")) {
@@ -214,6 +_,14 @@
       } else {
          return new ItemPredicate[0];
       }
+   }
+
+   public static void register(ResourceLocation name, java.util.function.Function<JsonObject, ItemPredicate> deserializer) {
+      custom_predicates.put(name, deserializer);
+   }
+
+   public static Map<ResourceLocation, java.util.function.Function<JsonObject, ItemPredicate>> getPredicates() {
+      return unmod_predicates;
    }
 
    public static class Builder {
