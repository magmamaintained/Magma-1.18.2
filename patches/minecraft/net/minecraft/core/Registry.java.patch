--- a/net/minecraft/core/Registry.java
+++ b/net/minecraft/core/Registry.java
@@ -116,6 +_,10 @@
 import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
 
+/*
+ * Attention Modders: This SHOULD NOT be used, you should use ForgeRegistries instead. As it has a cleaner modder facing API.
+ * We will be wrapping all of these in our API as necessary for syncing and management.
+ */
 public abstract class Registry<T> implements Keyable, IdMap<T> {
    private static final Logger LOGGER = LogUtils.getLogger();
    private static final Map<ResourceLocation, Supplier<?>> LOADERS = Maps.newLinkedHashMap();
@@ -163,43 +_,43 @@
    public static final DefaultedRegistry<GameEvent> GAME_EVENT = registerDefaulted(GAME_EVENT_REGISTRY, "step", GameEvent::builtInRegistryHolder, (p_206044_) -> {
       return GameEvent.STEP;
    });
-   public static final Registry<SoundEvent> SOUND_EVENT = registerSimple(SOUND_EVENT_REGISTRY, (p_206042_) -> {
+   @Deprecated public static final Registry<SoundEvent> SOUND_EVENT = forge(SOUND_EVENT_REGISTRY, (registry) -> {
       return SoundEvents.ITEM_PICKUP;
    });
-   public static final DefaultedRegistry<Fluid> FLUID = registerDefaulted(FLUID_REGISTRY, "empty", Fluid::builtInRegistryHolder, (p_206040_) -> {
+   @Deprecated public static final DefaultedRegistry<Fluid> FLUID = forge(FLUID_REGISTRY, "empty", (registry) -> {
       return Fluids.EMPTY;
    });
-   public static final Registry<MobEffect> MOB_EFFECT = registerSimple(MOB_EFFECT_REGISTRY, (p_205982_) -> {
+   @Deprecated public static final Registry<MobEffect> MOB_EFFECT = forge(MOB_EFFECT_REGISTRY, (registry) -> {
       return MobEffects.LUCK;
    });
-   public static final DefaultedRegistry<Block> BLOCK = registerDefaulted(BLOCK_REGISTRY, "air", Block::builtInRegistryHolder, (p_205980_) -> {
+   @Deprecated public static final DefaultedRegistry<Block> BLOCK = forge(BLOCK_REGISTRY, "air", (registry) -> {
       return Blocks.AIR;
    });
-   public static final Registry<Enchantment> ENCHANTMENT = registerSimple(ENCHANTMENT_REGISTRY, (p_205978_) -> {
+   @Deprecated public static final Registry<Enchantment> ENCHANTMENT = forge(ENCHANTMENT_REGISTRY, (registry) -> {
       return Enchantments.BLOCK_FORTUNE;
    });
-   public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = registerDefaulted(ENTITY_TYPE_REGISTRY, "pig", EntityType::builtInRegistryHolder, (p_205976_) -> {
+   @Deprecated public static final DefaultedRegistry<EntityType<?>> ENTITY_TYPE = forge(ENTITY_TYPE_REGISTRY, "pig", (registry) -> {
       return EntityType.PIG;
    });
-   public static final DefaultedRegistry<Item> ITEM = registerDefaulted(ITEM_REGISTRY, "air", Item::builtInRegistryHolder, (p_205974_) -> {
+   @Deprecated public static final DefaultedRegistry<Item> ITEM = forge(ITEM_REGISTRY, "air", (registry) -> {
       return Items.AIR;
    });
-   public static final DefaultedRegistry<Potion> POTION = registerDefaulted(POTION_REGISTRY, "empty", (p_205972_) -> {
+   @Deprecated public static final DefaultedRegistry<Potion> POTION = forge(POTION_REGISTRY, "empty", (registry) -> {
       return Potions.EMPTY;
    });
-   public static final Registry<ParticleType<?>> PARTICLE_TYPE = registerSimple(PARTICLE_TYPE_REGISTRY, (p_205970_) -> {
+   @Deprecated public static final Registry<ParticleType<?>> PARTICLE_TYPE = forge(PARTICLE_TYPE_REGISTRY, (registry) -> {
       return ParticleTypes.BLOCK;
    });
-   public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = registerSimple(BLOCK_ENTITY_TYPE_REGISTRY, (p_205968_) -> {
+   @Deprecated public static final Registry<BlockEntityType<?>> BLOCK_ENTITY_TYPE = forge(BLOCK_ENTITY_TYPE_REGISTRY, (registry) -> {
       return BlockEntityType.FURNACE;
    });
-   public static final DefaultedRegistry<Motive> MOTIVE = registerDefaulted(MOTIVE_REGISTRY, "kebab", (p_205966_) -> {
+   @Deprecated public static final DefaultedRegistry<Motive> MOTIVE = forge(MOTIVE_REGISTRY, "kebab", (registry) -> {
       return Motive.KEBAB;
    });
    public static final Registry<ResourceLocation> CUSTOM_STAT = registerSimple(CUSTOM_STAT_REGISTRY, (p_205964_) -> {
       return Stats.JUMP;
    });
-   public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = registerDefaulted(CHUNK_STATUS_REGISTRY, "empty", (p_205962_) -> {
+   @Deprecated public static final DefaultedRegistry<ChunkStatus> CHUNK_STATUS = forge(CHUNK_STATUS_REGISTRY, "empty", (registry) -> {
       return ChunkStatus.EMPTY;
    });
    public static final Registry<RuleTestType<?>> RULE_TEST = registerSimple(RULE_TEST_REGISTRY, (p_205960_) -> {
@@ -208,43 +_,43 @@
    public static final Registry<PosRuleTestType<?>> POS_RULE_TEST = registerSimple(POS_RULE_TEST_REGISTRY, (p_205958_) -> {
       return PosRuleTestType.ALWAYS_TRUE_TEST;
    });
-   public static final Registry<MenuType<?>> MENU = registerSimple(MENU_REGISTRY, (p_205956_) -> {
+   @Deprecated public static final Registry<MenuType<?>> MENU = forge(MENU_REGISTRY, (registry) -> {
       return MenuType.ANVIL;
    });
    public static final Registry<RecipeType<?>> RECIPE_TYPE = registerSimple(RECIPE_TYPE_REGISTRY, (p_205954_) -> {
       return RecipeType.CRAFTING;
    });
-   public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = registerSimple(RECIPE_SERIALIZER_REGISTRY, (p_205952_) -> {
+   @Deprecated public static final Registry<RecipeSerializer<?>> RECIPE_SERIALIZER = forge(RECIPE_SERIALIZER_REGISTRY, (registry) -> {
       return RecipeSerializer.SHAPELESS_RECIPE;
    });
-   public static final Registry<Attribute> ATTRIBUTE = registerSimple(ATTRIBUTE_REGISTRY, (p_205950_) -> {
+   @Deprecated public static final Registry<Attribute> ATTRIBUTE = forge(ATTRIBUTE_REGISTRY, (registry) -> {
       return Attributes.LUCK;
    });
    public static final Registry<PositionSourceType<?>> POSITION_SOURCE_TYPE = registerSimple(POSITION_SOURCE_TYPE_REGISTRY, (p_205948_) -> {
       return PositionSourceType.BLOCK;
    });
-   public static final Registry<StatType<?>> STAT_TYPE = registerSimple(STAT_TYPE_REGISTRY, (p_205946_) -> {
+   @Deprecated public static final Registry<StatType<?>> STAT_TYPE = forge(STAT_TYPE_REGISTRY, (registry) -> {
       return Stats.ITEM_USED;
    });
    public static final DefaultedRegistry<VillagerType> VILLAGER_TYPE = registerDefaulted(VILLAGER_TYPE_REGISTRY, "plains", (p_205944_) -> {
       return VillagerType.PLAINS;
    });
-   public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = registerDefaulted(VILLAGER_PROFESSION_REGISTRY, "none", (p_205942_) -> {
+   @Deprecated public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = forge(VILLAGER_PROFESSION_REGISTRY, "none", (registry) -> {
       return VillagerProfession.NONE;
    });
-   public static final DefaultedRegistry<PoiType> POINT_OF_INTEREST_TYPE = registerDefaulted(POINT_OF_INTEREST_TYPE_REGISTRY, "unemployed", (p_205940_) -> {
+   @Deprecated public static final DefaultedRegistry<PoiType> POINT_OF_INTEREST_TYPE = forge(POINT_OF_INTEREST_TYPE_REGISTRY, "unemployed", (registry) -> {
       return PoiType.UNEMPLOYED;
    });
-   public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = registerDefaulted(MEMORY_MODULE_TYPE_REGISTRY, "dummy", (p_205938_) -> {
+   @Deprecated public static final DefaultedRegistry<MemoryModuleType<?>> MEMORY_MODULE_TYPE = forge(MEMORY_MODULE_TYPE_REGISTRY, "dummy", (registry) -> {
       return MemoryModuleType.DUMMY;
    });
-   public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = registerDefaulted(SENSOR_TYPE_REGISTRY, "dummy", (p_205936_) -> {
+   @Deprecated public static final DefaultedRegistry<SensorType<?>> SENSOR_TYPE = forge(SENSOR_TYPE_REGISTRY, "dummy", (registry) -> {
       return SensorType.DUMMY;
    });
-   public static final Registry<Schedule> SCHEDULE = registerSimple(SCHEDULE_REGISTRY, (p_205934_) -> {
+   @Deprecated public static final Registry<Schedule> SCHEDULE = forge(SCHEDULE_REGISTRY, (registry) -> {
       return Schedule.EMPTY;
    });
-   public static final Registry<Activity> ACTIVITY = registerSimple(ACTIVITY_REGISTRY, (p_205932_) -> {
+   @Deprecated public static final Registry<Activity> ACTIVITY = forge(ACTIVITY_REGISTRY, (registry) -> {
       return Activity.IDLE;
    });
    public static final Registry<LootPoolEntryType> LOOT_POOL_ENTRY_TYPE = registerSimple(LOOT_ENTRY_REGISTRY, (p_206133_) -> {
@@ -293,15 +_,15 @@
    public static final ResourceKey<Registry<NormalNoise.NoiseParameters>> NOISE_REGISTRY = createRegistryKey("worldgen/noise");
    public static final ResourceKey<Registry<DensityFunction>> DENSITY_FUNCTION_REGISTRY = createRegistryKey("worldgen/density_function");
    public static final ResourceKey<Registry<WorldCarver<?>>> CARVER_REGISTRY = createRegistryKey("worldgen/carver");
-   public static final Registry<WorldCarver<?>> CARVER = registerSimple(CARVER_REGISTRY, (p_206112_) -> {
+   @Deprecated public static final Registry<WorldCarver<?>> CARVER = forge(CARVER_REGISTRY, (registry) -> {
       return WorldCarver.CAVE;
    });
    public static final ResourceKey<Registry<Feature<?>>> FEATURE_REGISTRY = createRegistryKey("worldgen/feature");
-   public static final Registry<Feature<?>> FEATURE = registerSimple(FEATURE_REGISTRY, (p_206109_) -> {
+   @Deprecated public static final Registry<Feature<?>> FEATURE = forge(FEATURE_REGISTRY, (registry) -> {
       return Feature.ORE;
    });
    public static final ResourceKey<Registry<StructureFeature<?>>> STRUCTURE_FEATURE_REGISTRY = createRegistryKey("worldgen/structure_feature");
-   public static final Registry<StructureFeature<?>> STRUCTURE_FEATURE = registerSimple(STRUCTURE_FEATURE_REGISTRY, (p_206107_) -> {
+   @Deprecated public static final Registry<StructureFeature<?>> STRUCTURE_FEATURE = forge(STRUCTURE_FEATURE_REGISTRY, (registry) -> {
       return StructureFeature.MINESHAFT;
    });
    public static final ResourceKey<Registry<StructurePlacementType<?>>> STRUCTURE_PLACEMENT_TYPE_REGISTRY = createRegistryKey("worldgen/structure_placement");
@@ -328,16 +_,16 @@
    public static final ResourceKey<Registry<Codec<? extends DensityFunction>>> DENSITY_FUNCTION_TYPE_REGISTRY = createRegistryKey("worldgen/density_function_type");
    public static final ResourceKey<Registry<StructureProcessorType<?>>> STRUCTURE_PROCESSOR_REGISTRY = createRegistryKey("worldgen/structure_processor");
    public static final ResourceKey<Registry<StructurePoolElementType<?>>> STRUCTURE_POOL_ELEMENT_REGISTRY = createRegistryKey("worldgen/structure_pool_element");
-   public static final Registry<BlockStateProviderType<?>> BLOCKSTATE_PROVIDER_TYPES = registerSimple(BLOCK_STATE_PROVIDER_TYPE_REGISTRY, (p_206098_) -> {
+   @Deprecated public static final Registry<BlockStateProviderType<?>> BLOCKSTATE_PROVIDER_TYPES = forge(BLOCK_STATE_PROVIDER_TYPE_REGISTRY, (registry) -> {
       return BlockStateProviderType.SIMPLE_STATE_PROVIDER;
    });
-   public static final Registry<FoliagePlacerType<?>> FOLIAGE_PLACER_TYPES = registerSimple(FOLIAGE_PLACER_TYPE_REGISTRY, (p_206092_) -> {
+   @Deprecated public static final Registry<FoliagePlacerType<?>> FOLIAGE_PLACER_TYPES = forge(FOLIAGE_PLACER_TYPE_REGISTRY, (registry) -> {
       return FoliagePlacerType.BLOB_FOLIAGE_PLACER;
    });
    public static final Registry<TrunkPlacerType<?>> TRUNK_PLACER_TYPES = registerSimple(TRUNK_PLACER_TYPE_REGISTRY, (p_206086_) -> {
       return TrunkPlacerType.STRAIGHT_TRUNK_PLACER;
    });
-   public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPES = registerSimple(TREE_DECORATOR_TYPE_REGISTRY, (p_206078_) -> {
+   @Deprecated public static final Registry<TreeDecoratorType<?>> TREE_DECORATOR_TYPES = forge(TREE_DECORATOR_TYPE_REGISTRY, (registry) -> {
       return TreeDecoratorType.LEAVE_VINE;
    });
    public static final Registry<FeatureSizeType<?>> FEATURE_SIZE_TYPES = registerSimple(FEATURE_SIZE_TYPE_REGISTRY, (p_206072_) -> {
@@ -383,16 +_,32 @@
       return registerSimple(p_206009_, Lifecycle.experimental(), p_206010_);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> Registry<T> forge(ResourceKey<? extends Registry<T>> key, Registry.RegistryBootstrap<T> def) {
+      return forge(key, Lifecycle.experimental(), def);
+   }
+
    private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> p_206028_, String p_206029_, Registry.RegistryBootstrap<T> p_206030_) {
       return registerDefaulted(p_206028_, p_206029_, Lifecycle.experimental(), p_206030_);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> DefaultedRegistry<T> forge(ResourceKey<? extends Registry<T>> key, String defKey, Registry.RegistryBootstrap<T> def) {
+      return forge(key, defKey, Lifecycle.experimental(), def);
+   }
+
    private static <T> DefaultedRegistry<T> registerDefaulted(ResourceKey<? extends Registry<T>> p_206032_, String p_206033_, Function<T, Holder.Reference<T>> p_206034_, Registry.RegistryBootstrap<T> p_206035_) {
       return registerDefaulted(p_206032_, p_206033_, Lifecycle.experimental(), p_206034_, p_206035_);
    }
 
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> Registry<T> forge(ResourceKey<? extends Registry<T>> key, Lifecycle cycle, Registry.RegistryBootstrap<T> def) {
+      return internalRegister(key, net.minecraftforge.registries.GameData.getWrapper(key, cycle), def, cycle);
+   }
+
    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> p_206000_, Lifecycle p_206001_, Registry.RegistryBootstrap<T> p_206002_) {
       return internalRegister(p_206000_, new MappedRegistry<>(p_206000_, p_206001_, (Function<T, Holder.Reference<T>>)null), p_206002_, p_206001_);
+   }
+
+   private static <T extends net.minecraftforge.registries.IForgeRegistryEntry<T>> DefaultedRegistry<T> forge(ResourceKey<? extends Registry<T>> key, String defKey, Lifecycle cycle, Registry.RegistryBootstrap<T> def) {
+      return internalRegister(key, net.minecraftforge.registries.GameData.getWrapper(key, cycle, defKey), def, cycle);
    }
 
    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> p_206004_, Lifecycle p_206005_, Function<T, Holder.Reference<T>> p_206006_, Registry.RegistryBootstrap<T> p_206007_) {
