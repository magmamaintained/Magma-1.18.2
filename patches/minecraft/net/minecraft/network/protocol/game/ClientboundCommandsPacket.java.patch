--- a/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
+++ b/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
@@ -54,6 +_,96 @@
       p_131886_.writeVarInt(object2intmap.get(this.root));
    }
 
+   //Magma - ambassador command support
+   public void write(FriendlyByteBuf byteBuf, boolean wrap) {
+      Object2IntMap<CommandNode<SharedSuggestionProvider>> object2intmap = enumerateNodes(this.root);
+      List<CommandNode<SharedSuggestionProvider>> list = getNodesInIdOrder(object2intmap);
+      byteBuf.writeCollection(list, (p_178810_, p_178811_) -> {
+         writeNodeNoArgumentTypes(p_178810_, p_178811_, object2intmap);
+         if (p_178811_ instanceof ArgumentCommandNode argumentCommandNode) {
+            serialize(byteBuf, argumentCommandNode.getType(), wrap);
+            if (argumentCommandNode.getCustomSuggestions() != null) {
+               byteBuf.writeResourceLocation(SuggestionProviders.getName(argumentCommandNode.getCustomSuggestions()));
+            }
+         }
+      });
+      byteBuf.writeVarInt(object2intmap.get(this.root));
+   }
+   private static final List<String> integratedArgumentTypes = java.util.Arrays.asList(
+           "brigadier:bool",
+           "brigadier:float",
+           "brigadier:double",
+           "brigadier:integer",
+           "brigadier:long",
+           "brigadier:string",
+
+           "minecraft:entity",
+           "minecraft:game_profile",
+           "minecraft:block_pos",
+           "minecraft:column_pos",
+           "minecraft:vec3",
+           "minecraft:vec2",
+           "minecraft:block_state",
+           "minecraft:block_predicate",
+           "minecraft:item_stack",
+           "minecraft:item_predicate",
+           "minecraft:color",
+           "minecraft:component",
+           "minecraft:message",
+           "minecraft:nbt_compound_tag",
+           "minecraft:nbt_tag",
+           "minecraft:nbt_path",
+           "minecraft:objective",
+           "minecraft:objective_criteria",
+           "minecraft:operation",
+           "minecraft:particle",
+           "minecraft:angle",
+           "minecraft:rotation",
+           "minecraft:scoreboard_slot",
+           "minecraft:score_holder",
+           "minecraft:swizzle",
+           "minecraft:team",
+           "minecraft:item_slot",
+           "minecraft:resource_location",
+           "minecraft:mob_effect",
+           "minecraft:function",
+           "minecraft:entity_anchor",
+           "minecraft:int_range",
+           "minecraft:float_range",
+           "minecraft:item_enchantment",
+           "minecraft:entity_summon",
+           "minecraft:dimension",
+
+           "minecraft:time",
+
+           "minecraft:resource_or_tag",
+           "minecraft:resource",
+
+           "minecraft:uuid",
+
+           "minecraft:nbt"
+   );
+
+   private static <T extends ArgumentType<?>> void serialize(FriendlyByteBuf buf, T type, boolean wrap) {
+      ArgumentTypes.Entry<T> entry = (ArgumentTypes.Entry<T>)ArgumentTypes.get(type);
+
+      if (entry == null) {
+         buf.writeResourceLocation(MOD_ARGUMENT_INDICATOR);
+         buf.writeResourceLocation(new net.minecraft.resources.ResourceLocation("")); //"minecraft:"
+         buf.writeVarInt(0);
+         return;
+      }
+
+      if (!wrap || integratedArgumentTypes.contains(entry.name.toString())) {
+         ArgumentTypes.serialize(buf, type);
+         return;
+      }
+
+      // Not a standard Minecraft argument type - so we need to wrap it
+      serializeWrappedArgumentType(buf, type, entry);
+   }
+   //Magma - end
+
    private static void resolveEntries(List<ClientboundCommandsPacket.Entry> p_178813_) {
       List<ClientboundCommandsPacket.Entry> list = Lists.newArrayList(p_178813_);
 
@@ -128,54 +_,152 @@
       }
    }
 
-   private static void writeNode(FriendlyByteBuf p_131872_, CommandNode<SharedSuggestionProvider> p_131873_, Map<CommandNode<SharedSuggestionProvider>, Integer> p_131874_) {
-      byte b0 = 0;
-      if (p_131873_.getRedirect() != null) {
-         b0 = (byte)(b0 | 8);
-      }
-
-      if (p_131873_.getCommand() != null) {
-         b0 = (byte)(b0 | 4);
-      }
-
-      if (p_131873_ instanceof RootCommandNode) {
-         b0 = (byte)(b0 | 0);
-      } else if (p_131873_ instanceof ArgumentCommandNode) {
-         b0 = (byte)(b0 | 2);
-         if (((ArgumentCommandNode)p_131873_).getCustomSuggestions() != null) {
-            b0 = (byte)(b0 | 16);
-         }
-      } else {
-         if (!(p_131873_ instanceof LiteralCommandNode)) {
-            throw new UnsupportedOperationException("Unknown node type " + p_131873_);
-         }
-
-         b0 = (byte)(b0 | 1);
-      }
-
-      p_131872_.writeByte(b0);
-      p_131872_.writeVarInt(p_131873_.getChildren().size());
-
-      for(CommandNode<SharedSuggestionProvider> commandnode : p_131873_.getChildren()) {
-         p_131872_.writeVarInt(p_131874_.get(commandnode));
-      }
-
-      if (p_131873_.getRedirect() != null) {
-         p_131872_.writeVarInt(p_131874_.get(p_131873_.getRedirect()));
-      }
-
-      if (p_131873_ instanceof ArgumentCommandNode) {
-         ArgumentCommandNode<SharedSuggestionProvider, ?> argumentcommandnode = (ArgumentCommandNode)p_131873_;
-         p_131872_.writeUtf(argumentcommandnode.getName());
-         ArgumentTypes.serialize(p_131872_, argumentcommandnode.getType());
-         if (argumentcommandnode.getCustomSuggestions() != null) {
-            p_131872_.writeResourceLocation(SuggestionProviders.getName(argumentcommandnode.getCustomSuggestions()));
-         }
-      } else if (p_131873_ instanceof LiteralCommandNode) {
-         p_131872_.writeUtf(((LiteralCommandNode)p_131873_).getLiteral());
-      }
-
-   }
+   private static void writeNode(FriendlyByteBuf p_131872_, CommandNode<SharedSuggestionProvider> p_131873_, Map<CommandNode<SharedSuggestionProvider>, Integer> p_131874_){
+      byte b0 = 0;
+      if (p_131873_.getRedirect() != null) {
+         b0 = (byte)(b0 | 8);
+      }
+
+      if (p_131873_.getCommand() != null) {
+         b0 = (byte)(b0 | 4);
+      }
+
+      if (p_131873_ instanceof RootCommandNode) {
+         b0 = (byte)(b0 | 0);
+      } else if (p_131873_ instanceof ArgumentCommandNode) {
+         b0 = (byte)(b0 | 2);
+         if (((ArgumentCommandNode)p_131873_).getCustomSuggestions() != null) {
+            b0 = (byte)(b0 | 16);
+         }
+      } else {
+         if (!(p_131873_ instanceof LiteralCommandNode)) {
+            throw new UnsupportedOperationException("Unknown node type " + p_131873_);
+         }
+
+         b0 = (byte)(b0 | 1);
+      }
+
+      p_131872_.writeByte(b0);
+      p_131872_.writeVarInt(p_131873_.getChildren().size());
+
+      for(CommandNode<SharedSuggestionProvider> commandnode : p_131873_.getChildren()) {
+         p_131872_.writeVarInt(p_131874_.get(commandnode));
+      }
+
+      if (p_131873_.getRedirect() != null) {
+         p_131872_.writeVarInt(p_131874_.get(p_131873_.getRedirect()));
+      }
+
+      if (p_131873_ instanceof ArgumentCommandNode) {
+         ArgumentCommandNode<SharedSuggestionProvider, ?> argumentcommandnode = (ArgumentCommandNode)p_131873_;
+         p_131872_.writeUtf(argumentcommandnode.getName());
+         //Magma start
+         if(org.spigotmc.SpigotConfig.bungee){
+            ArgumentTypes.Entry entry = ArgumentTypes.BY_CLASS.get(argumentcommandnode.getType().getClass());
+            if (entry == null) {
+               p_131872_.writeResourceLocation(new net.minecraft.resources.ResourceLocation(""));
+               return;
+            }
+            if (entry.name.getNamespace().equals("minecraft") || entry.name.getNamespace().equals("brigadier")) {
+               p_131872_.writeResourceLocation(entry.name);
+               entry.serializer.serializeToNetwork(argumentcommandnode.getType(), p_131872_);
+            } else {
+               serializeWrappedArgumentType(p_131872_, argumentcommandnode.getType(), entry);
+            }
+         } else {
+            ArgumentTypes.serialize(p_131872_, argumentcommandnode.getType());
+         }
+         //Magma end
+
+         if (argumentcommandnode.getCustomSuggestions() != null) {
+            p_131872_.writeResourceLocation(SuggestionProviders.getName(argumentcommandnode.getCustomSuggestions()));
+         }
+      } else if (p_131873_ instanceof LiteralCommandNode) {
+         p_131872_.writeUtf(((LiteralCommandNode)p_131873_).getLiteral());
+      }
+   }
+//Magma start - ambassador command support
+   private static void writeNodeNoArgumentTypes(FriendlyByteBuf p_131872_, CommandNode<SharedSuggestionProvider> p_131873_, Map<CommandNode<SharedSuggestionProvider>, Integer> p_131874_) {
+      byte b0 = 0;
+      if (p_131873_.getRedirect() != null) {
+         b0 = (byte)(b0 | 8);
+      }
+
+      if (p_131873_.getCommand() != null) {
+         b0 = (byte)(b0 | 4);
+      }
+
+      if (p_131873_ instanceof RootCommandNode) {
+         b0 = (byte)(b0 | 0);
+      } else if (p_131873_ instanceof ArgumentCommandNode) {
+         b0 = (byte)(b0 | 2);
+         if (((ArgumentCommandNode)p_131873_).getCustomSuggestions() != null) {
+            b0 = (byte)(b0 | 16);
+         }
+      } else {
+         if (!(p_131873_ instanceof LiteralCommandNode)) {
+            throw new UnsupportedOperationException("Unknown node type " + p_131873_);
+         }
+
+         b0 = (byte)(b0 | 1);
+      }
+
+      p_131872_.writeByte(b0);
+      p_131872_.writeVarInt(p_131873_.getChildren().size());
+
+      for(CommandNode<SharedSuggestionProvider> commandnode : p_131873_.getChildren()) {
+         p_131872_.writeVarInt(p_131874_.get(commandnode));
+      }
+
+      if (p_131873_.getRedirect() != null) {
+         p_131872_.writeVarInt(p_131874_.get(p_131873_.getRedirect()));
+      }
+
+      if (p_131873_ instanceof ArgumentCommandNode) {
+         ArgumentCommandNode<SharedSuggestionProvider, ?> argumentcommandnode = (ArgumentCommandNode)p_131873_;
+         p_131872_.writeUtf(argumentcommandnode.getName());
+         //Magma start
+         if(org.spigotmc.SpigotConfig.bungee){
+            ArgumentTypes.Entry entry = ArgumentTypes.BY_CLASS.get(argumentcommandnode.getType().getClass());
+            if (entry == null) {
+               p_131872_.writeResourceLocation(new net.minecraft.resources.ResourceLocation(""));
+               return;
+            }
+            if (entry.name.getNamespace().equals("minecraft") || entry.name.getNamespace().equals("brigadier")) {
+               p_131872_.writeResourceLocation(entry.name);
+               entry.serializer.serializeToNetwork(argumentcommandnode.getType(), p_131872_);
+            } else {
+               serializeWrappedArgumentType(p_131872_, argumentcommandnode.getType(), entry);
+            }
+         } else {
+            return;
+//            ArgumentTypes.serialize(p_131872_, argumentcommandnode.getType());
+         }
+         //Magma end
+
+         if (argumentcommandnode.getCustomSuggestions() != null) {
+            p_131872_.writeResourceLocation(SuggestionProviders.getName(argumentcommandnode.getCustomSuggestions()));
+         }
+      } else if (p_131873_ instanceof LiteralCommandNode) {
+         p_131872_.writeUtf(((LiteralCommandNode)p_131873_).getLiteral());
+      }
+
+   }
+//Magma end
+   //Magma start
+   private static final net.minecraft.resources.ResourceLocation MOD_ARGUMENT_INDICATOR  = new net.minecraft.resources.ResourceLocation("crossstitch", "mod_argument");
+
+   private static void serializeWrappedArgumentType(FriendlyByteBuf packetByteBuf, ArgumentType argumentType, ArgumentTypes.Entry entry) {
+      packetByteBuf.writeResourceLocation(MOD_ARGUMENT_INDICATOR);
+      packetByteBuf.writeResourceLocation(entry.name);
+
+      FriendlyByteBuf extraData = new FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+      entry.serializer.serializeToNetwork(argumentType, extraData);
+
+      packetByteBuf.writeVarInt(extraData.readableBytes());
+      packetByteBuf.writeBytes(extraData);
+   }
+   //Magma end
 
    public void handle(ClientGamePacketListener p_131878_) {
       p_131878_.handleCommands(this);
