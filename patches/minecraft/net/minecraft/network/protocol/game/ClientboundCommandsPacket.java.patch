--- a/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
+++ b/net/minecraft/network/protocol/game/ClientboundCommandsPacket.java
@@ -10,19 +_,23 @@
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+import io.netty.buffer.Unpooled;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.Queue;
-import javax.annotation.Nullable;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.commands.synchronization.ArgumentTypes;
 import net.minecraft.commands.synchronization.SuggestionProviders;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.resources.ResourceLocation;
+import org.spigotmc.SpigotConfig;
+
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+import java.util.Queue;
 
 public class ClientboundCommandsPacket implements Packet<ClientGamePacketListener> {
    private static final byte f_178797_ = 3;
@@ -34,6 +_,7 @@
    private static final byte f_178803_ = 2;
    private final RootCommandNode<SharedSuggestionProvider> f_131858_;
 
+
    public ClientboundCommandsPacket(RootCommandNode<SharedSuggestionProvider> p_131861_) {
       this.f_131858_ = p_131861_;
    }
@@ -167,7 +_,24 @@
       if (p_131873_ instanceof ArgumentCommandNode) {
          ArgumentCommandNode<SharedSuggestionProvider, ?> argumentcommandnode = (ArgumentCommandNode)p_131873_;
          p_131872_.m_130070_(argumentcommandnode.getName());
-         ArgumentTypes.m_121611_(p_131872_, argumentcommandnode.getType());
+         //Magma start
+         if(SpigotConfig.bungee){
+            ArgumentTypes.Entry entry = ArgumentTypes.f_121583_.get(argumentcommandnode.getType().getClass());
+            if (entry == null) {
+               p_131872_.m_130085_(new ResourceLocation(""));
+               return;
+            }
+            if (entry.f_121620_.m_135827_().equals("minecraft") || entry.f_121620_.m_135827_().equals("brigadier")) {
+               p_131872_.m_130085_(entry.f_121620_);
+               entry.f_121619_.m_6017_(argumentcommandnode.getType(), p_131872_);
+            } else {
+               serializeWrappedArgumentType(p_131872_, argumentcommandnode.getType(), entry);
+            }
+         } else {
+            ArgumentTypes.m_121611_(p_131872_, argumentcommandnode.getType());
+         }
+         //Magma end
+
          if (argumentcommandnode.getCustomSuggestions() != null) {
             p_131872_.m_130085_(SuggestionProviders.m_121654_(argumentcommandnode.getCustomSuggestions()));
          }
@@ -176,6 +_,21 @@
       }
 
    }
+
+   //Magma start
+   private static final ResourceLocation MOD_ARGUMENT_INDICATOR  = new ResourceLocation("crossstitch", "mod_argument");
+
+   private static void serializeWrappedArgumentType(FriendlyByteBuf packetByteBuf, ArgumentType argumentType, ArgumentTypes.Entry entry) {
+      packetByteBuf.m_130085_(MOD_ARGUMENT_INDICATOR);
+      packetByteBuf.m_130085_(entry.f_121620_);
+
+      FriendlyByteBuf extraData = new FriendlyByteBuf(Unpooled.buffer());
+      entry.f_121619_.m_6017_(argumentType, extraData);
+
+      packetByteBuf.m_130130_(extraData.readableBytes());
+      packetByteBuf.writeBytes(extraData);
+   }
+   //Magma end
 
    public void m_5797_(ClientGamePacketListener p_131878_) {
       p_131878_.m_7443_(this);
