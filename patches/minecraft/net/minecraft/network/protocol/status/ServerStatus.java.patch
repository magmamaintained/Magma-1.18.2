--- a/net/minecraft/network/protocol/status/ServerStatus.java
+++ b/net/minecraft/network/protocol/status/ServerStatus.java
@@ -26,6 +_,16 @@
    private ServerStatus.Version version;
    @Nullable
    private String favicon;
+   private transient net.minecraftforge.network.ServerStatusPing forgeData;
+
+   public net.minecraftforge.network.ServerStatusPing getForgeData() {
+      return this.forgeData;
+   }
+
+   public void setForgeData(net.minecraftforge.network.ServerStatusPing data){
+      this.forgeData = data;
+      invalidateJson();
+   }
 
    @Nullable
    public Component getDescription() {
@@ -34,6 +_,7 @@
 
    public void setDescription(Component p_134909_) {
       this.description = p_134909_;
+      invalidateJson();
    }
 
    @Nullable
@@ -43,6 +_,7 @@
 
    public void setPlayers(ServerStatus.Players p_134911_) {
       this.players = p_134911_;
+      invalidateJson();
    }
 
    @Nullable
@@ -52,10 +_,12 @@
 
    public void setVersion(ServerStatus.Version p_134913_) {
       this.version = p_134913_;
+      invalidateJson();
    }
 
    public void setFavicon(String p_134907_) {
       this.favicon = p_134907_;
+      invalidateJson();
    }
 
    @Nullable
@@ -63,6 +_,39 @@
       return this.favicon;
    }
 
+   private java.util.concurrent.Semaphore mutex = new java.util.concurrent.Semaphore(1);
+   private String json = null;
+   /**
+    * Returns this object as a Json string.
+    * Converting to JSON if a cached version is not available.
+    *
+    * Also to prevent potentially large memory allocations on the server
+    * this is moved from the SPacketServerInfo writePacket function
+    *
+    * As this method is called from the impl threads so thread safety is important!
+    */
+   public String getJson() {
+      String ret = this.json;
+      if (ret == null) {
+         mutex.acquireUninterruptibly();
+         ret = this.json;
+         if (ret == null) {
+            ret = net.minecraft.network.protocol.status.ClientboundStatusResponsePacket.GSON.toJson(this);
+            this.json = ret;
+         }
+         mutex.release();
+      }
+      return ret;
+   }
+
+   /**
+    * Invalidates the cached json, causing the next call to getJson to rebuild it.
+    * This is needed externally because PlayerCountData.setPlayer's is public.
+    */
+   public void invalidateJson() {
+      this.json = null;
+   }
+
    public static class Players {
       private final int maxPlayers;
       private final int numPlayers;
@@ -157,6 +_,10 @@
             serverstatus.setFavicon(GsonHelper.getAsString(jsonobject, "favicon"));
          }
 
+         if (jsonobject.has("forgeData")) {
+            serverstatus.setForgeData(net.minecraftforge.network.ServerStatusPing.Serializer.deserialize(GsonHelper.getAsJsonObject(jsonobject, "forgeData")));
+         }
+
          return serverstatus;
       }
 
@@ -176,6 +_,10 @@
 
          if (p_134951_.getFavicon() != null) {
             jsonobject.addProperty("favicon", p_134951_.getFavicon());
+         }
+
+         if(p_134951_.getForgeData() != null){
+            jsonobject.add("forgeData", net.minecraftforge.network.ServerStatusPing.Serializer.serialize(p_134951_.getForgeData()));
          }
 
          return jsonobject;
