--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -65,18 +_,23 @@
    });
    public static final AttributeKey<ConnectionProtocol> ATTRIBUTE_PROTOCOL = AttributeKey.valueOf("protocol");
    public static final LazyLoadedValue<NioEventLoopGroup> NETWORK_WORKER_GROUP = new LazyLoadedValue<>(() -> {
-      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).build());
+      return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
    });
    public static final LazyLoadedValue<EpollEventLoopGroup> NETWORK_EPOLL_WORKER_GROUP = new LazyLoadedValue<>(() -> {
-      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
+      return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
    });
    public static final LazyLoadedValue<DefaultEventLoopGroup> LOCAL_WORKER_GROUP = new LazyLoadedValue<>(() -> {
-      return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
+      return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()); // Paper
    });
    private final PacketFlow receiving;
    private final Queue<Connection.PacketHolder> queue = Queues.newConcurrentLinkedQueue();
-   private Channel channel;
+   public Channel channel; //Magma - private -> public
    public SocketAddress address;
+   // Spigot Start
+   public java.util.UUID spoofedUUID;
+   public com.mojang.authlib.properties.Property[] spoofedProfile;
+   public boolean preparing = true;
+   // Spigot End
    private PacketListener packetListener;
    private Component disconnectedReason;
    private boolean encrypted;
@@ -87,6 +_,7 @@
    private float averageSentPackets;
    private int tickCount;
    private boolean handlingFault;
+   private java.util.function.Consumer<Connection> activationHandler;
 
    public Connection(PacketFlow p_129482_) {
       this.receiving = p_129482_;
@@ -96,6 +_,10 @@
       super.channelActive(p_129525_);
       this.channel = p_129525_.channel();
       this.address = this.channel.remoteAddress();
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
+      if (activationHandler != null) activationHandler.accept(this);
 
       try {
          this.setProtocol(ConnectionProtocol.HANDSHAKING);
@@ -143,6 +_,7 @@
 
          }
       }
+      if (net.minecraft.server.MinecraftServer.getServer().isDebugging()) p_129534_.printStackTrace(); // Spigot
    }
 
    protected void channelRead0(ChannelHandlerContext p_129487_, Packet<?> p_129488_) {
@@ -191,7 +_,7 @@
       ++this.sentPackets;
       if (connectionprotocol1 != connectionprotocol) {
          LOGGER.debug("Disabled auto read");
-         this.channel.config().setAutoRead(false);
+         this.channel.eventLoop().execute(()->this.channel.config().setAutoRead(false));
       }
 
       if (this.channel.eventLoop().inEventLoop()) {
@@ -270,7 +_,7 @@
 
    public void disconnect(Component p_129508_) {
       if (this.channel.isOpen()) {
-         this.channel.close().awaitUninterruptibly();
+         this.channel.close(); // We can't wait as this may be called from an event loop.
          this.disconnectedReason = p_129508_;
       }
 
@@ -289,7 +_,10 @@
    }
 
    public static Connection connectToServer(InetSocketAddress p_178301_, boolean p_178302_) {
+      net.minecraftforge.network.DualStackUtils.checkIPv6(p_178301_.getAddress());
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      net.minecraftforge.network.DualStackUtils.checkIPv6(p_178301_.getAddress());
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyLoadedValue<? extends EventLoopGroup> lazyloadedvalue;
       if (Epoll.isAvailable() && p_178302_) {
@@ -315,6 +_,7 @@
 
    public static Connection connectToLocalServer(SocketAddress p_129494_) {
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(LOCAL_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_129557_) {
             p_129557_.pipeline().addLast("packet_handler", connection);
@@ -390,6 +_,7 @@
             } else if (this.getPacketListener() != null) {
                this.getPacketListener().onDisconnect(new TranslatableComponent("multiplayer.disconnect.generic"));
             }
+            this.queue.clear(); // Free up packet queue.
          }
 
       }
@@ -403,6 +_,14 @@
       return this.averageSentPackets;
    }
 
+   public Channel channel() {
+      return channel;
+   }
+
+   public PacketFlow getDirection() {
+      return this.receiving;
+   }
+
    static class PacketHolder {
       final Packet<?> packet;
       @Nullable
@@ -413,4 +_,11 @@
          this.listener = p_129562_;
       }
    }
+
+   // Spigot Start
+   public SocketAddress getRawAddress()
+   {
+      return this.channel.remoteAddress();
+   }
+   // Spigot End
 }
