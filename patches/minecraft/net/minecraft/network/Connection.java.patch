--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -4,16 +_,7 @@
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.logging.LogUtils;
 import io.netty.bootstrap.Bootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelException;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelFutureListener;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.channel.ChannelInitializer;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.DefaultEventLoopGroup;
-import io.netty.channel.EventLoopGroup;
-import io.netty.channel.SimpleChannelInboundHandler;
+import io.netty.channel.*;
 import io.netty.channel.epoll.Epoll;
 import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.epoll.EpollSocketChannel;
@@ -27,12 +_,6 @@
 import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.Queue;
-import java.util.concurrent.RejectedExecutionException;
-import javax.annotation.Nullable;
-import javax.crypto.Cipher;
 import net.minecraft.Util;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TranslatableComponent;
@@ -50,6 +_,13 @@
 import org.slf4j.Marker;
 import org.slf4j.MarkerFactory;
 
+import javax.annotation.Nullable;
+import javax.crypto.Cipher;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.Queue;
+import java.util.concurrent.RejectedExecutionException;
+
 public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
    private static final float f_178299_ = 0.75F;
    private static final Logger f_129465_ = LogUtils.getLogger();
@@ -87,6 +_,7 @@
    private float f_129477_;
    private int f_129478_;
    private boolean f_129479_;
+   private java.util.function.Consumer<Connection> activationHandler;
 
    public Connection(PacketFlow p_129482_) {
       this.f_129466_ = p_129482_;
@@ -96,6 +_,7 @@
       super.channelActive(p_129525_);
       this.f_129468_ = p_129525_.channel();
       this.f_129469_ = this.f_129468_.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
 
       try {
          this.m_129498_(ConnectionProtocol.HANDSHAKING);
@@ -191,7 +_,7 @@
       ++this.f_129475_;
       if (connectionprotocol1 != connectionprotocol) {
          f_129465_.debug("Disabled auto read");
-         this.f_129468_.config().setAutoRead(false);
+         this.f_129468_.eventLoop().execute(()->this.f_129468_.config().setAutoRead(false));
       }
 
       if (this.f_129468_.eventLoop().inEventLoop()) {
@@ -270,7 +_,7 @@
 
    public void m_129507_(Component p_129508_) {
       if (this.f_129468_.isOpen()) {
-         this.f_129468_.close().awaitUninterruptibly();
+         this.f_129468_.close(); // We can't wait as this may be called from an event loop.
          this.f_129471_ = p_129508_;
       }
 
@@ -289,7 +_,9 @@
    }
 
    public static Connection m_178300_(InetSocketAddress p_178301_, boolean p_178302_) {
+      if (p_178301_.getAddress() instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyLoadedValue<? extends EventLoopGroup> lazyloadedvalue;
       if (Epoll.isAvailable() && p_178302_) {
@@ -315,6 +_,7 @@
 
    public static Connection m_129493_(SocketAddress p_129494_) {
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(f_129464_.m_13971_()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_129557_) {
             p_129557_.pipeline().addLast("packet_handler", connection);
@@ -401,6 +_,14 @@
 
    public float m_129543_() {
       return this.f_129477_;
+   }
+
+   public Channel channel() {
+      return f_129468_;
+   }
+
+   public PacketFlow getDirection() {
+      return this.f_129466_;
    }
 
    static class PacketHolder {
